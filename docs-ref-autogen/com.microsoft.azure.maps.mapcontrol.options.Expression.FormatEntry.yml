### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.FormatEntry
  id: FormatEntry
  parent: com.microsoft.azure.maps.mapcontrol.options
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.FormatEntry.yml
  langs:
  - java
  name: Expression.FormatEntry
  nameWithType: Expression.FormatEntry
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.FormatEntry
  type: Class
  source:
    remote:
      path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
      branch: master
      repo: https://dev.azure.com/msazure/One/_git/Azure-IoT-Maps-AndroidSDK
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 4334
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Holds format entries used in a <xref uid=\"\" data-throw-if-not-resolved=\"false\">format(FormatEntry...)</xref> expression. </p>"
  syntax:
    content: public class FormatEntry
  inheritance:
  - java.lang.Object
references:
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression
  parent: com.microsoft.azure.maps.mapcontrol.options
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  name: Expression
  nameWithType: Expression
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression
  type: Class
  summary: "<p>The value for any layout property, paint property, or filter may be specified as an expression. An expression defines a formula for computing the value of the property using the operators described below. <ul><li><p>Element </p></li><li><p>Mathematical operators for performing arithmetic and other operations on numeric values </p></li><li><p>Logical operators for manipulating boolean values and making conditional decisions </p></li><li><p>String operators for manipulating strings </p></li><li><p>Data operators, providing access to the properties of source features </p></li><li><p>Camera operators, providing access to the parameters defining the current map view </p></li></ul></p>\r\n<p>Expressions are represented as JSON arrays. The first element of an expression array is a string naming the expression operator, e.g. \"*\"or \"case\". Subsequent elements (if any) are the arguments to the expression. Each argument is either a literal value (a string, number, boolean, or null), or another expression array. </p>\r\n<p>Data expression: a data expression is any expression that access feature data <ndash></ndash> that is, any expression that uses one of the data operators:get,has,id,geometry-type, or properties. Data expressions allow a feature's properties to determine its appearance. They can be used to differentiate features within the same layer and to create data visualizations. </p>\r\n<p>Camera expression: a camera expression is any expression that uses the zoom operator. Such expressions allow the the appearance of a layer to change with the map's zoom level. Camera expressions can be used to create the appearance of depth and to control data density. </p>\r\n<p>Composition: a single expression may use a mix of data operators, camera operators, and other operators. Such composite expressions allows a layer's appearance to be determined by a combination of the zoom level and individual feature properties. </p>\r\n<p>Example expression: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n      \"source-id\",\r\n      fillColor(\r\n        interpolate( linear(), zoom(),\r\n          stop(12, step(get(\"stroke-width\"),\r\n            color(Color.BLACK),\r\n            stop(1f, color(Color.RED)),\r\n            stop(2f, color(Color.WHITE)),\r\n            stop(3f, color(Color.BLUE))\r\n          )),\r\n          stop(15, step(get(\"stroke-width\"),\r\n            color(Color.BLACK),\r\n            stop(1f, color(Color.YELLOW)),\r\n            stop(2f, color(Color.LTGRAY)),\r\n            stop(3f, color(Color.CYAN))\r\n          )),\r\n          stop(18, step(get(\"stroke-width\"),\r\n            color(Color.BLACK),\r\n            stop(1f, color(Color.WHITE)),\r\n            stop(2f, color(Color.GRAY)),\r\n            stop(3f, color(Color.GREEN))\r\n          ))\r\n        )\r\n      )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>"
  syntax:
    content: public class Expression
