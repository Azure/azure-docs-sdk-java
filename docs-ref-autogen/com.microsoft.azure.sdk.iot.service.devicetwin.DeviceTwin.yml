### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  id: DeviceTwin
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin
  children:
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.DeviceTwin()
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.createFromConnectionString(java.lang.String)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getNextDeviceTwin(com.microsoft.azure.sdk.iot.service.devicetwin.Query)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getTwin(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNext(com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNextDeviceTwin(com.microsoft.azure.sdk.iot.service.devicetwin.Query)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.next(com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.next(com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection,com.microsoft.azure.sdk.iot.service.devicetwin.QueryOptions)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwin(java.lang.String)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwin(java.lang.String,java.lang.Integer)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwinCollection(java.lang.String)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwinCollection(java.lang.String,java.lang.Integer)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceDesiredProperties(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceTags(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.scheduleUpdateTwin(java.lang.String,com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice,java.util.Date,long)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateDesiredProperties(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  - com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateTwin(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  langs:
  - java
  name: DeviceTwin
  nameWithType: DeviceTwin
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  type: Class
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  syntax:
    content: public class DeviceTwin
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.DeviceTwin()
  id: DeviceTwin()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: DeviceTwin()
  nameWithType: DeviceTwin.DeviceTwin()
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.DeviceTwin()
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.DeviceTwin*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  syntax:
    content: public DeviceTwin()
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.createFromConnectionString(java.lang.String)
  id: createFromConnectionString(java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: createFromConnectionString(String connectionString)
  nameWithType: DeviceTwin.createFromConnectionString(String connectionString)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.createFromConnectionString(String connectionString)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.createFromConnectionString*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: Static constructor to create instance from connection string
  syntax:
    content: public static DeviceTwin createFromConnectionString(String connectionString)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: The iot hub connection string
    return:
      type: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
      description: The instance of DeviceTwin
  exceptions:
  - type: java.io.IOException
    description: This exception is thrown if the object creation failed
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getNextDeviceTwin(com.microsoft.azure.sdk.iot.service.devicetwin.Query)
  id: getNextDeviceTwin(com.microsoft.azure.sdk.iot.service.devicetwin.Query)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: getNextDeviceTwin(Query deviceTwinQuery)
  nameWithType: DeviceTwin.getNextDeviceTwin(Query deviceTwinQuery)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getNextDeviceTwin(Query deviceTwinQuery)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getNextDeviceTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: Returns the next device twin document
  syntax:
    content: public synchronized DeviceTwinDevice getNextDeviceTwin(Query deviceTwinQuery)
    parameters:
    - id: deviceTwinQuery
      type: com.microsoft.azure.sdk.iot.service.devicetwin.Query
      description: Object corresponding to the query in request
    return:
      type: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
      description: Returns the next device twin document
  exceptions:
  - type: java.io.IOException
    description: If input parameter is incorrect
  - type: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
    description: If input parameter is incorrect
  - type: java.util.NoSuchElementException
    description: If input parameter is incorrect
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getTwin(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  id: getTwin(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: getTwin(DeviceTwinDevice device)
  nameWithType: DeviceTwin.getTwin(DeviceTwinDevice device)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getTwin(DeviceTwinDevice device)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: This method retrieves device twin for the specified device.
  syntax:
    content: public void getTwin(DeviceTwinDevice device)
    parameters:
    - id: device
      type: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
      description: The device with a valid id for which device twin is to be retrieved.
  exceptions:
  - type: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
    description: This exception is thrown if the IO operation failed
  - type: java.io.IOException
    description: This exception is thrown if the IO operation failed
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNext(com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection)
  id: hasNext(com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: hasNext(QueryCollection deviceTwinQueryCollection)
  nameWithType: DeviceTwin.hasNext(QueryCollection deviceTwinQueryCollection)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNext(QueryCollection deviceTwinQueryCollection)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNext*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: Returns if the provided deviceTwinQueryCollection has a next page to query.
  syntax:
    content: public synchronized boolean hasNext(QueryCollection deviceTwinQueryCollection)
    parameters:
    - id: deviceTwinQueryCollection
      type: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection
      description: the query to check
    return:
      type: boolean
      description: True if the provided deviceTwinQueryCollection has a next page to query, false otherwise
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNextDeviceTwin(com.microsoft.azure.sdk.iot.service.devicetwin.Query)
  id: hasNextDeviceTwin(com.microsoft.azure.sdk.iot.service.devicetwin.Query)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: hasNextDeviceTwin(Query deviceTwinQuery)
  nameWithType: DeviceTwin.hasNextDeviceTwin(Query deviceTwinQuery)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNextDeviceTwin(Query deviceTwinQuery)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNextDeviceTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: Returns the availability of next twin element upon query. If non was found, Query is sent over again and response is updated accordingly until no response for the query was found.
  syntax:
    content: public synchronized boolean hasNextDeviceTwin(Query deviceTwinQuery)
    parameters:
    - id: deviceTwinQuery
      type: com.microsoft.azure.sdk.iot.service.devicetwin.Query
      description: Query object returned upon creation of query
    return:
      type: boolean
      description: True if next is available and false other wise.
  exceptions:
  - type: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
    description: If IotHub could not respond back to the query successfully
  - type: java.io.IOException
    description: If IotHub could not respond back to the query successfully
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.next(com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection)
  id: next(com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: next(QueryCollection deviceTwinQueryCollection)
  nameWithType: DeviceTwin.next(QueryCollection deviceTwinQueryCollection)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.next(QueryCollection deviceTwinQueryCollection)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.next*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: >-
    Returns the next DeviceTwinDevice collection for the given query alongside the continuation token needed for querying the next page.


    This function shall update a local continuation token continuously to continue the query so you don't need to re-supply the returned continuation token.
  syntax:
    content: public synchronized QueryCollectionResponse<DeviceTwinDevice> next(QueryCollection deviceTwinQueryCollection)
    parameters:
    - id: deviceTwinQueryCollection
      type: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection
      description: the query to run
    return:
      type: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollectionResponse<com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice>
      description: The page of query results and the continuation token for the next page of results. Return value shall be <code>null</code> if there is no next collection
  exceptions:
  - type: java.io.IOException
    description: If an IotHubException occurs when querying the service.
  - type: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
    description: If an IotHubException occurs when querying the service.
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.next(com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection,com.microsoft.azure.sdk.iot.service.devicetwin.QueryOptions)
  id: next(com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection,com.microsoft.azure.sdk.iot.service.devicetwin.QueryOptions)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: next(QueryCollection deviceTwinQueryCollection, QueryOptions options)
  nameWithType: DeviceTwin.next(QueryCollection deviceTwinQueryCollection, QueryOptions options)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.next(QueryCollection deviceTwinQueryCollection, QueryOptions options)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.next*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: >-
    Returns the next DeviceTwinDevice collection for the given query alongside the continuation token needed for querying the next page.


    This function shall update a local continuation token continuously to continue the query so you don't need to re-supply the returned continuation token unless you want to continue the query from a different starting point. To do that, set your new continuation token in the query options object.


    The provided option's page size shall override any previously saved page size.
  syntax:
    content: public synchronized QueryCollectionResponse<DeviceTwinDevice> next(QueryCollection deviceTwinQueryCollection, QueryOptions options)
    parameters:
    - id: deviceTwinQueryCollection
      type: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection
      description: the query to run
    - id: options
      type: com.microsoft.azure.sdk.iot.service.devicetwin.QueryOptions
      description: >-
        the query options to run the query with. If the continuation token in these options is null, the internally saved continuation token shall be used.
                        The page size set in the options will override any previously set page size.
    return:
      type: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollectionResponse<com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice>
      description: The page of query results and the continuation token for the next page of results. Return value shall be <code>null</code> if there is no next collection.
  exceptions:
  - type: java.io.IOException
    description: If an IotHubException occurs when querying the service.
  - type: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
    description: If an IotHubException occurs when querying the service.
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwin(java.lang.String)
  id: queryTwin(java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: queryTwin(String sqlQuery)
  nameWithType: DeviceTwin.queryTwin(String sqlQuery)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwin(String sqlQuery)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: Sql style query for twin
  syntax:
    content: public synchronized Query queryTwin(String sqlQuery)
    parameters:
    - id: sqlQuery
      type: java.lang.String
      description: Sql query string to query IotHub for Twin
    return:
      type: com.microsoft.azure.sdk.iot.service.devicetwin.Query
      description: Query Object to be used for looking up responses for this query
  exceptions:
  - type: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
    description: If Query request was not successful at the IotHub
  - type: java.io.IOException
    description: If Query request was not successful at the IotHub
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwin(java.lang.String,java.lang.Integer)
  id: queryTwin(java.lang.String,java.lang.Integer)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: queryTwin(String sqlQuery, Integer pageSize)
  nameWithType: DeviceTwin.queryTwin(String sqlQuery, Integer pageSize)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwin(String sqlQuery, Integer pageSize)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: Sql style query for twin
  syntax:
    content: public synchronized Query queryTwin(String sqlQuery, Integer pageSize)
    parameters:
    - id: sqlQuery
      type: java.lang.String
      description: Sql query string to query IotHub for Twin
    - id: pageSize
      type: java.lang.Integer
      description: Size to limit query response by
    return:
      type: com.microsoft.azure.sdk.iot.service.devicetwin.Query
      description: Query Object to be used for looking up responses for this query
  exceptions:
  - type: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
    description: If Query request was not successful at the IotHub
  - type: java.io.IOException
    description: If Query request was not successful at the IotHub
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwinCollection(java.lang.String)
  id: queryTwinCollection(java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: queryTwinCollection(String sqlQuery)
  nameWithType: DeviceTwin.queryTwinCollection(String sqlQuery)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwinCollection(String sqlQuery)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwinCollection*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: Create a QueryCollection object that can be used to query whole pages of results at a time. QueryCollection objects also allow you to provide a continuation token for the query to pick up from
  syntax:
    content: public synchronized QueryCollection queryTwinCollection(String sqlQuery)
    parameters:
    - id: sqlQuery
      type: java.lang.String
      description: the sql query to run
    return:
      type: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection
      description: the created QueryCollection object that can be used to query the service
  exceptions:
  - type: java.net.MalformedURLException
    description: If twin query url is not correct
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwinCollection(java.lang.String,java.lang.Integer)
  id: queryTwinCollection(java.lang.String,java.lang.Integer)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: queryTwinCollection(String sqlQuery, Integer pageSize)
  nameWithType: DeviceTwin.queryTwinCollection(String sqlQuery, Integer pageSize)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwinCollection(String sqlQuery, Integer pageSize)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwinCollection*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: Create a QueryCollection object that can be used to query whole pages of results at a time. QueryCollection objects also allow you to provide a continuation token for the query to pick up from
  syntax:
    content: public synchronized QueryCollection queryTwinCollection(String sqlQuery, Integer pageSize)
    parameters:
    - id: sqlQuery
      type: java.lang.String
      description: the sql query to run
    - id: pageSize
      type: java.lang.Integer
      description: the number of results to return at a time
    return:
      type: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection
      description: the created QueryCollection object that can be used to query the service
  exceptions:
  - type: java.net.MalformedURLException
    description: If twin query url is not correct
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceDesiredProperties(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  id: replaceDesiredProperties(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: replaceDesiredProperties(DeviceTwinDevice device)
  nameWithType: DeviceTwin.replaceDesiredProperties(DeviceTwinDevice device)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceDesiredProperties(DeviceTwinDevice device)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceDesiredProperties*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: This method replaces desired properties for the specified device. desired properties can be input via device's setDesiredProperties method.
  syntax:
    content: public void replaceDesiredProperties(DeviceTwinDevice device)
    parameters:
    - id: device
      type: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
      description: The device with a valid id for which device twin is to be updated.
  exceptions:
  - type: java.lang.UnsupportedOperationException
    description: This exception is always thrown.
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceTags(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  id: replaceTags(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: replaceTags(DeviceTwinDevice device)
  nameWithType: DeviceTwin.replaceTags(DeviceTwinDevice device)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceTags(DeviceTwinDevice device)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceTags*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: This method replaces tags for the specified device. Tags can be input via device's setTags method.
  syntax:
    content: public void replaceTags(DeviceTwinDevice device)
    parameters:
    - id: device
      type: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
      description: The device with a valid id for which device twin is to be updated.
  exceptions:
  - type: java.lang.UnsupportedOperationException
    description: This exception is always thrown.
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.scheduleUpdateTwin(java.lang.String,com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice,java.util.Date,long)
  id: scheduleUpdateTwin(java.lang.String,com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice,java.util.Date,long)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: scheduleUpdateTwin(String queryCondition, DeviceTwinDevice updateTwin, Date startTimeUtc, long maxExecutionTimeInSeconds)
  nameWithType: DeviceTwin.scheduleUpdateTwin(String queryCondition, DeviceTwinDevice updateTwin, Date startTimeUtc, long maxExecutionTimeInSeconds)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.scheduleUpdateTwin(String queryCondition, DeviceTwinDevice updateTwin, Date startTimeUtc, long maxExecutionTimeInSeconds)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.scheduleUpdateTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: Creates a new Job to update twin tags and desired properties on one or multiple devices
  syntax:
    content: public Job scheduleUpdateTwin(String queryCondition, DeviceTwinDevice updateTwin, Date startTimeUtc, long maxExecutionTimeInSeconds)
    parameters:
    - id: queryCondition
      type: java.lang.String
      description: Query condition to evaluate which devices to run the job on. It can be <code>null</code> or empty
    - id: updateTwin
      type: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
      description: Twin object to use for the update
    - id: startTimeUtc
      type: java.util.Date
      description: Date time in Utc to start the job
    - id: maxExecutionTimeInSeconds
      type: long
      description: Max execution time in seconds, i.e., ttl duration the job can run
    return:
      type: com.microsoft.azure.sdk.iot.service.devicetwin.Job
      description: a Job class that represent this job on IotHub
  exceptions:
  - type: java.io.IOException
    description: if the function contains invalid parameters
  - type: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
    description: if the function contains invalid parameters
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateDesiredProperties(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  id: updateDesiredProperties(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: updateDesiredProperties(DeviceTwinDevice device)
  nameWithType: DeviceTwin.updateDesiredProperties(DeviceTwinDevice device)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateDesiredProperties(DeviceTwinDevice device)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateDesiredProperties*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: This method updates desired properties for the specified device.
  syntax:
    content: public void updateDesiredProperties(DeviceTwinDevice device)
    parameters:
    - id: device
      type: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
      description: The device with a valid id for which desired properties is to be updated.
  exceptions:
  - type: java.lang.UnsupportedOperationException
    description: This exception is always thrown.
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateTwin(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  id: updateTwin(com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin
  langs:
  - java
  name: updateTwin(DeviceTwinDevice device)
  nameWithType: DeviceTwin.updateTwin(DeviceTwinDevice device)
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateTwin(DeviceTwinDevice device)
  overload: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.devicetwin
  summary: >-
    This method updates device twin for the specified device. This API uses the IoT Hub PATCH API when sending updates, but it sends the full twin with each patch update. As a result, devices subscribed to twin will receive notifications that each property is changed when this API is called, even if only some of the properties were changed. See [PATCH][] for more details



    [PATCH]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatedevicetwin
  syntax:
    content: public synchronized void updateTwin(DeviceTwinDevice device)
    parameters:
    - id: device
      type: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
      description: The device with a valid id for which device twin is to be updated.
  exceptions:
  - type: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
    description: This exception is thrown if the IO operation failed
  - type: java.io.IOException
    description: This exception is thrown if the IO operation failed
references:
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.DeviceTwin*
  name: DeviceTwin
  nameWithType: DeviceTwin.DeviceTwin
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.DeviceTwin
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.createFromConnectionString*
  name: createFromConnectionString
  nameWithType: DeviceTwin.createFromConnectionString
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.createFromConnectionString
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
  name: IotHubException
  nameWithType: IotHubException
  fullName: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
  name: DeviceTwinDevice
  nameWithType: DeviceTwinDevice
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getTwin*
  name: getTwin
  nameWithType: DeviceTwin.getTwin
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getTwin
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateTwin*
  name: updateTwin
  nameWithType: DeviceTwin.updateTwin
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateTwin
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: java.lang.UnsupportedOperationException
  spec.java:
  - uid: java.lang.UnsupportedOperationException
    name: UnsupportedOperationException
    fullName: java.lang.UnsupportedOperationException
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateDesiredProperties*
  name: updateDesiredProperties
  nameWithType: DeviceTwin.updateDesiredProperties
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.updateDesiredProperties
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceDesiredProperties*
  name: replaceDesiredProperties
  nameWithType: DeviceTwin.replaceDesiredProperties
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceDesiredProperties
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceTags*
  name: replaceTags
  nameWithType: DeviceTwin.replaceTags
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.replaceTags
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.Query
  name: Query
  nameWithType: Query
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.Query
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwin*
  name: queryTwin
  nameWithType: DeviceTwin.queryTwin
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwin
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: java.net.MalformedURLException
  spec.java:
  - uid: java.net.MalformedURLException
    name: MalformedURLException
    fullName: java.net.MalformedURLException
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection
  name: QueryCollection
  nameWithType: QueryCollection
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollection
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwinCollection*
  name: queryTwinCollection
  nameWithType: DeviceTwin.queryTwinCollection
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.queryTwinCollection
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNextDeviceTwin*
  name: hasNextDeviceTwin
  nameWithType: DeviceTwin.hasNextDeviceTwin
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNextDeviceTwin
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: java.util.NoSuchElementException
  spec.java:
  - uid: java.util.NoSuchElementException
    name: NoSuchElementException
    fullName: java.util.NoSuchElementException
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getNextDeviceTwin*
  name: getNextDeviceTwin
  nameWithType: DeviceTwin.getNextDeviceTwin
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.getNextDeviceTwin
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNext*
  name: hasNext
  nameWithType: DeviceTwin.hasNext
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.hasNext
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollectionResponse<com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice>
  spec.java:
  - uid: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollectionResponse
    name: QueryCollectionResponse
    fullName: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollectionResponse
  - name: <
    fullName: <
  - uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
    name: DeviceTwinDevice
    fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.next*
  name: next
  nameWithType: DeviceTwin.next
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.next
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.QueryOptions
  name: QueryOptions
  nameWithType: QueryOptions
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.QueryOptions
- uid: java.util.Date
  spec.java:
  - uid: java.util.Date
    name: Date
    fullName: java.util.Date
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.Job
  name: Job
  nameWithType: Job
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.Job
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.scheduleUpdateTwin*
  name: scheduleUpdateTwin
  nameWithType: DeviceTwin.scheduleUpdateTwin
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.scheduleUpdateTwin
  package: com.microsoft.azure.sdk.iot.service.devicetwin
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollectionResponse
  name: QueryCollectionResponse
  nameWithType: QueryCollectionResponse
  fullName: com.microsoft.azure.sdk.iot.service.devicetwin.QueryCollectionResponse
