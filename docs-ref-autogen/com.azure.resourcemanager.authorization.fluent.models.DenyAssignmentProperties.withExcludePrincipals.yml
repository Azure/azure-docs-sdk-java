### YamlMime:JavaMember
uid: "com.azure.resourcemanager.authorization.fluent.models.DenyAssignmentProperties.withExcludePrincipals*"
fullName: "com.azure.resourcemanager.authorization.fluent.models.DenyAssignmentProperties.withExcludePrincipals"
name: "withExcludePrincipals"
nameWithType: "DenyAssignmentProperties.withExcludePrincipals"
members:
- uid: "com.azure.resourcemanager.authorization.fluent.models.DenyAssignmentProperties.withExcludePrincipals(java.util.List<com.azure.resourcemanager.authorization.models.Principal>)"
  fullName: "com.azure.resourcemanager.authorization.fluent.models.DenyAssignmentProperties.withExcludePrincipals(List<Principal> excludePrincipals)"
  name: "withExcludePrincipals(List<Principal> excludePrincipals)"
  nameWithType: "DenyAssignmentProperties.withExcludePrincipals(List<Principal> excludePrincipals)"
  summary: "Set the excludePrincipals property: Array of principals to which the deny assignment does not apply."
  parameters:
  - description: "the excludePrincipals value to set."
    name: "excludePrincipals"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.authorization.models.Principal?alt=com.azure.resourcemanager.authorization.models.Principal&text=Principal\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public DenyAssignmentProperties withExcludePrincipals(List<Principal> excludePrincipals)"
  returns:
    description: "the DenyAssignmentProperties object itself."
    type: "<xref href=\"com.azure.resourcemanager.authorization.fluent.models.DenyAssignmentProperties?alt=com.azure.resourcemanager.authorization.fluent.models.DenyAssignmentProperties&text=DenyAssignmentProperties\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.authorization.fluent.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-authorization:2.13.0
