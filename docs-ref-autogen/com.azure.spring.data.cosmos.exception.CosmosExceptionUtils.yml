### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils
  id: CosmosExceptionUtils
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.exception
  children:
  - com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>exceptionHandler(java.lang.String,java.lang.Throwable)
  - com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>findAPIExceptionHandler(java.lang.String,java.lang.Throwable)
  - com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.CosmosExceptionUtils()
  langs:
  - java
  name: CosmosExceptionUtils
  nameWithType: CosmosExceptionUtils
  fullName: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils
  type: Class
  package: com.azure.spring.data.cosmos.exception
  summary: To handle and throw a cosmos db exception when access the database
  syntax:
    content: public class CosmosExceptionUtils
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>exceptionHandler(java.lang.String,java.lang.Throwable)
  id: <T>exceptionHandler(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils
  langs:
  - java
  name: <T>exceptionHandler(String message, Throwable throwable)
  nameWithType: CosmosExceptionUtils.<T>exceptionHandler(String message, Throwable throwable)
  fullName: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>exceptionHandler(String message, Throwable throwable)
  overload: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.exceptionHandler*
  type: Method
  package: com.azure.spring.data.cosmos.exception
  summary: To throw a CosmosDBAccessException
  syntax:
    content: public static Mono<T> <T>exceptionHandler(String message, Throwable throwable)
    parameters:
    - id: message
      type: java.lang.String
      description: the detail message
    - id: throwable
      type: java.lang.Throwable
      description: exception
    return:
      type: reactor.core.publisher.Mono<T>
      description: Mono instance
- uid: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>findAPIExceptionHandler(java.lang.String,java.lang.Throwable)
  id: <T>findAPIExceptionHandler(java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils
  langs:
  - java
  name: <T>findAPIExceptionHandler(String message, Throwable throwable)
  nameWithType: CosmosExceptionUtils.<T>findAPIExceptionHandler(String message, Throwable throwable)
  fullName: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>findAPIExceptionHandler(String message, Throwable throwable)
  overload: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.findAPIExceptionHandler*
  type: Method
  package: com.azure.spring.data.cosmos.exception
  summary: To find an exceptionHandler for a exception and return empty Mono if the exception status code is not found
  syntax:
    content: public static Mono<T> <T>findAPIExceptionHandler(String message, Throwable throwable)
    parameters:
    - id: message
      type: java.lang.String
      description: the detail message
    - id: throwable
      type: java.lang.Throwable
      description: exception
    return:
      type: reactor.core.publisher.Mono<T>
      description: Mono instance
- uid: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.CosmosExceptionUtils()
  id: CosmosExceptionUtils()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils
  langs:
  - java
  name: CosmosExceptionUtils()
  nameWithType: CosmosExceptionUtils.CosmosExceptionUtils()
  fullName: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.CosmosExceptionUtils()
  overload: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.CosmosExceptionUtils*
  type: Constructor
  package: com.azure.spring.data.cosmos.exception
  syntax:
    content: public CosmosExceptionUtils()
references:
- uid: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.CosmosExceptionUtils*
  name: CosmosExceptionUtils
  nameWithType: CosmosExceptionUtils.CosmosExceptionUtils
  fullName: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.CosmosExceptionUtils
  package: com.azure.spring.data.cosmos.exception
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: reactor.core.publisher.Mono<T>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.exceptionHandler*
  name: <T>exceptionHandler
  nameWithType: CosmosExceptionUtils.<T>exceptionHandler
  fullName: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>exceptionHandler
  package: com.azure.spring.data.cosmos.exception
- uid: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.findAPIExceptionHandler*
  name: <T>findAPIExceptionHandler
  nameWithType: CosmosExceptionUtils.<T>findAPIExceptionHandler
  fullName: com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>findAPIExceptionHandler
  package: com.azure.spring.data.cosmos.exception
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
