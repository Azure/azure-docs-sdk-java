### YamlMime:JavaType
uid: "com.azure.messaging.eventhubs.CheckpointStore"
fullName: "com.azure.messaging.eventhubs.CheckpointStore"
name: "CheckpointStore"
nameWithType: "CheckpointStore"
summary: "An interface that defines the operations for storing and retrieving partition ownership information and checkpoint details for each partition."
syntax: "public interface CheckpointStore"
methods:
- uid: "com.azure.messaging.eventhubs.CheckpointStore.claimOwnership(java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>)"
  fullName: "com.azure.messaging.eventhubs.CheckpointStore.claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)"
  name: "claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)"
  nameWithType: "CheckpointStore.claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)"
  summary: "Called to claim ownership of a list of partitions."
  modifiers:
  - "abstract"
  parameters:
  - description: "List of partition ownerships this instance is requesting to own."
    name: "requestedPartitionOwnerships"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.models.PartitionOwnership?alt=com.azure.messaging.eventhubs.models.PartitionOwnership&text=PartitionOwnership\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract Flux<PartitionOwnership> claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)"
  desc: "Called to claim ownership of a list of partitions. This will return the list of partitions that were owned successfully."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of partitions this instance successfully claimed ownership."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.models.PartitionOwnership?alt=com.azure.messaging.eventhubs.models.PartitionOwnership&text=PartitionOwnership\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.CheckpointStore.listCheckpoints(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.messaging.eventhubs.CheckpointStore.listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  name: "listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  nameWithType: "CheckpointStore.listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  summary: "Called to get the list of checkpoints from the underlying data store."
  modifiers:
  - "abstract"
  parameters:
  - description: "The fully qualified namespace of the Event Hub."
    name: "fullyQualifiedNamespace"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Event Hub name to get checkpoint information."
    name: "eventHubName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The consumer group name associated with the checkpoint."
    name: "consumerGroup"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Flux<Checkpoint> listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  desc: "Called to get the list of checkpoints from the underlying data store. This method could return empty results if there are no checkpoints available in the data store."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of checkpoints associated with the partitions of the Event Hub."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.models.Checkpoint?alt=com.azure.messaging.eventhubs.models.Checkpoint&text=Checkpoint\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.CheckpointStore.listOwnership(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.messaging.eventhubs.CheckpointStore.listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  name: "listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  nameWithType: "CheckpointStore.listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  summary: "Called to get the list of all existing partition ownership from the underlying data store."
  modifiers:
  - "abstract"
  parameters:
  - description: "The fully qualified namespace of the Event Hub. This is likely to be similar to\n <strong>\"{your-namespace}.servicebus.windows.net\"</strong>."
    name: "fullyQualifiedNamespace"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Event Hub name to get ownership information."
    name: "eventHubName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The consumer group name."
    name: "consumerGroup"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Flux<PartitionOwnership> listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)"
  desc: "Called to get the list of all existing partition ownership from the underlying data store. Could return empty results if there are is no existing ownership information."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of partition ownership details of all the partitions that have/had an owner."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.models.PartitionOwnership?alt=com.azure.messaging.eventhubs.models.PartitionOwnership&text=PartitionOwnership\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.CheckpointStore.updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)"
  fullName: "com.azure.messaging.eventhubs.CheckpointStore.updateCheckpoint(Checkpoint checkpoint)"
  name: "updateCheckpoint(Checkpoint checkpoint)"
  nameWithType: "CheckpointStore.updateCheckpoint(Checkpoint checkpoint)"
  summary: "Updates the checkpoint in the data store for a partition."
  modifiers:
  - "abstract"
  parameters:
  - description: "Checkpoint information containing sequence number and offset to be stored for this partition."
    name: "checkpoint"
    type: "<xref href=\"com.azure.messaging.eventhubs.models.Checkpoint?alt=com.azure.messaging.eventhubs.models.Checkpoint&text=Checkpoint\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<Void> updateCheckpoint(Checkpoint checkpoint)"
  desc: "Updates the checkpoint in the data store for a partition."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the checkpoint is updated."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "An interface that defines the operations for storing and retrieving partition ownership information and checkpoint details for each partition."
metadata: {}
package: "com.azure.messaging.eventhubs"
artifact: com.azure:azure-messaging-eventhubs:5.13.0
