### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.CheckpointStore
  id: CheckpointStore
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.CheckpointStore.claimOwnership(java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>)
  - com.azure.messaging.eventhubs.CheckpointStore.listCheckpoints(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.messaging.eventhubs.CheckpointStore.listOwnership(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.messaging.eventhubs.CheckpointStore.updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)
  langs:
  - java
  name: CheckpointStore
  nameWithType: CheckpointStore
  fullName: com.azure.messaging.eventhubs.CheckpointStore
  type: Interface
  package: com.azure.messaging.eventhubs
  summary: An interface that defines the operations for storing and retrieving partition ownership information and checkpoint details for each partition.
  syntax:
    content: public interface CheckpointStore
- uid: com.azure.messaging.eventhubs.CheckpointStore.claimOwnership(java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>)
  id: claimOwnership(java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>)
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.CheckpointStore
  langs:
  - java
  name: claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)
  nameWithType: CheckpointStore.claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)
  fullName: com.azure.messaging.eventhubs.CheckpointStore.claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)
  overload: com.azure.messaging.eventhubs.CheckpointStore.claimOwnership*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Called to claim ownership of a list of partitions. This will return the list of partitions that were owned successfully.
  syntax:
    content: public abstract Flux<PartitionOwnership> claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)
    parameters:
    - id: requestedPartitionOwnerships
      type: java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>
      description: List of partition ownerships this instance is requesting to own.
    return:
      type: reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionOwnership>
      description: A flux of partitions this instance successfully claimed ownership.
- uid: com.azure.messaging.eventhubs.CheckpointStore.listCheckpoints(java.lang.String,java.lang.String,java.lang.String)
  id: listCheckpoints(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.CheckpointStore
  langs:
  - java
  name: listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  nameWithType: CheckpointStore.listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  fullName: com.azure.messaging.eventhubs.CheckpointStore.listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  overload: com.azure.messaging.eventhubs.CheckpointStore.listCheckpoints*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Called to get the list of checkpoints from the underlying data store. This method could return empty results if there are no checkpoints available in the data store.
  syntax:
    content: public abstract Flux<Checkpoint> listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
    parameters:
    - id: fullyQualifiedNamespace
      type: java.lang.String
      description: The fully qualified namespace of the Event Hub.
    - id: eventHubName
      type: java.lang.String
      description: The Event Hub name to get checkpoint information.
    - id: consumerGroup
      type: java.lang.String
      description: The consumer group name associated with the checkpoint.
    return:
      type: reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.Checkpoint>
      description: A flux of checkpoints associated with the partitions of the Event Hub.
- uid: com.azure.messaging.eventhubs.CheckpointStore.listOwnership(java.lang.String,java.lang.String,java.lang.String)
  id: listOwnership(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.CheckpointStore
  langs:
  - java
  name: listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  nameWithType: CheckpointStore.listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  fullName: com.azure.messaging.eventhubs.CheckpointStore.listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  overload: com.azure.messaging.eventhubs.CheckpointStore.listOwnership*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Called to get the list of all existing partition ownership from the underlying data store. Could return empty results if there are is no existing ownership information.
  syntax:
    content: public abstract Flux<PartitionOwnership> listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
    parameters:
    - id: fullyQualifiedNamespace
      type: java.lang.String
      description: >-
        The fully qualified namespace of the Event Hub. This is likely to be similar to
         <strong>"{your-namespace}.servicebus.windows.net"</strong>.
    - id: eventHubName
      type: java.lang.String
      description: The Event Hub name to get ownership information.
    - id: consumerGroup
      type: java.lang.String
      description: The consumer group name.
    return:
      type: reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionOwnership>
      description: A flux of partition ownership details of all the partitions that have/had an owner.
- uid: com.azure.messaging.eventhubs.CheckpointStore.updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)
  id: updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.CheckpointStore
  langs:
  - java
  name: updateCheckpoint(Checkpoint checkpoint)
  nameWithType: CheckpointStore.updateCheckpoint(Checkpoint checkpoint)
  fullName: com.azure.messaging.eventhubs.CheckpointStore.updateCheckpoint(Checkpoint checkpoint)
  overload: com.azure.messaging.eventhubs.CheckpointStore.updateCheckpoint*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Updates the checkpoint in the data store for a partition.
  syntax:
    content: public abstract Mono<Void> updateCheckpoint(Checkpoint checkpoint)
    parameters:
    - id: checkpoint
      type: com.azure.messaging.eventhubs.models.Checkpoint
      description: Checkpoint information containing sequence number and offset to be stored for this partition.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> that completes when the checkpoint is updated.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionOwnership>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.models.PartitionOwnership
    name: PartitionOwnership
    fullName: com.azure.messaging.eventhubs.models.PartitionOwnership
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.CheckpointStore.listOwnership*
  name: listOwnership
  nameWithType: CheckpointStore.listOwnership
  fullName: com.azure.messaging.eventhubs.CheckpointStore.listOwnership
  package: com.azure.messaging.eventhubs
- uid: java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.models.PartitionOwnership
    name: PartitionOwnership
    fullName: com.azure.messaging.eventhubs.models.PartitionOwnership
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.CheckpointStore.claimOwnership*
  name: claimOwnership
  nameWithType: CheckpointStore.claimOwnership
  fullName: com.azure.messaging.eventhubs.CheckpointStore.claimOwnership
  package: com.azure.messaging.eventhubs
- uid: reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.Checkpoint>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.models.Checkpoint
    name: Checkpoint
    fullName: com.azure.messaging.eventhubs.models.Checkpoint
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.CheckpointStore.listCheckpoints*
  name: listCheckpoints
  nameWithType: CheckpointStore.listCheckpoints
  fullName: com.azure.messaging.eventhubs.CheckpointStore.listCheckpoints
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.models.Checkpoint
  name: Checkpoint
  nameWithType: Checkpoint
  fullName: com.azure.messaging.eventhubs.models.Checkpoint
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.CheckpointStore.updateCheckpoint*
  name: updateCheckpoint
  nameWithType: CheckpointStore.updateCheckpoint
  fullName: com.azure.messaging.eventhubs.CheckpointStore.updateCheckpoint
  package: com.azure.messaging.eventhubs
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: com.azure.messaging.eventhubs.models.PartitionOwnership
  name: PartitionOwnership
  nameWithType: PartitionOwnership
  fullName: com.azure.messaging.eventhubs.models.PartitionOwnership
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
