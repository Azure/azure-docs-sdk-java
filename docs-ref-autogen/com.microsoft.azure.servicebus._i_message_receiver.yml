### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus._i_message_receiver
  id: _i_message_receiver
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.complete(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.completeAsync(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.defer(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.defer(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.getPrefetchCount()
  - com.microsoft.azure.servicebus._i_message_receiver.getReceiveMode()
  - com.microsoft.azure.servicebus._i_message_receiver.receive()
  - com.microsoft.azure.servicebus._i_message_receiver.receive(Duration)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveAsync()
  - com.microsoft.azure.servicebus._i_message_receiver.receiveAsync(Duration)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int,Duration)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int,Duration)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessage(long)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageAsync(long)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatch(Collection<Long>)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatchAsync(Collection<Long>)
  - com.microsoft.azure.servicebus._i_message_receiver.renewMessageLock(IMessage)
  - com.microsoft.azure.servicebus._i_message_receiver.renewMessageLockAsync(IMessage)
  - com.microsoft.azure.servicebus._i_message_receiver.setPrefetchCount(int)
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: IMessageReceiver
  nameWithType: IMessageReceiver
  fullName: com.microsoft.azure.servicebus.IMessageReceiver
  type: Interface
  source:
    remote: &o0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
      branch: master
      repo: https://github.com/Azure/azure-service-bus-java
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 17
  package: com.microsoft.azure.servicebus
  summary: <p>Defines message receiver interface. The MessageReceiver can be used to receive messages from Queues and Subscriptions and acknowledge them. </p>
  syntax:
    content: public interface IMessageReceiver extends IMessageEntityClient,IMessageBrowser
  inheritedMembers:
  - com.microsoft.azure.servicebus._i_closeable.close()
  - com.microsoft.azure.servicebus._i_closeable.closeAsync()
  - com.microsoft.azure.servicebus._i_message_entity_client.getEntityPath()
  - com.microsoft.azure.servicebus._i_message_browser.peek()
  - com.microsoft.azure.servicebus._i_message_browser.peek(long)
  - com.microsoft.azure.servicebus._i_message_browser.peekAsync()
  - com.microsoft.azure.servicebus._i_message_browser.peekAsync(long)
  - com.microsoft.azure.servicebus._i_message_browser.peekBatch(int)
  - com.microsoft.azure.servicebus._i_message_browser.peekBatch(long,int)
  - com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(int)
  - com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(long,int)
- uid: com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID)
  id: abandon(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: abandon(UUID lockToken)
  nameWithType: IMessageReceiver.abandon(UUID lockToken)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID lockToken)
  overload: com.microsoft.azure.servicebus._i_message_receiver.abandon*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 33
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Abandon <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message</p>

    <p></p>
  syntax:
    content: public void abandon(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if abandon failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID,Map<String, Object>)
  id: abandon(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus._i_message_receiver.abandon*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 43
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Abandon <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message</p>

    <p></p>
  syntax:
    content: public void abandon(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if abandon failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID)
  id: abandonAsync(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: abandonAsync(UUID lockToken)
  nameWithType: IMessageReceiver.abandonAsync(UUID lockToken)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus._i_message_receiver.abandonAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 51
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously abandon <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending abandon. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID,Map<String, Object>)
  id: abandonAsync(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus._i_message_receiver.abandonAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 60
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously abandon <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending abandon. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.complete(UUID)
  id: complete(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: complete(UUID lockToken)
  nameWithType: IMessageReceiver.complete(UUID lockToken)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.complete(UUID lockToken)
  overload: com.microsoft.azure.servicebus._i_message_receiver.complete*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 69
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Completes a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.</p>

    <p></p>
  syntax:
    content: public void complete(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if abandon failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.completeAsync(UUID)
  id: completeAsync(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: completeAsync(UUID lockToken)
  nameWithType: IMessageReceiver.completeAsync(UUID lockToken)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus._i_message_receiver.completeAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 79
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously completes a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> completeAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending complete. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID)
  id: deadLetter(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: deadLetter(UUID lockToken)
  nameWithType: IMessageReceiver.deadLetter(UUID lockToken)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken)
  overload: com.microsoft.azure.servicebus._i_message_receiver.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 126
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue.</p>

    <p></p>
  syntax:
    content: public void deadLetter(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if deadletter failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,Map<String, Object>)
  id: deadLetter(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus._i_message_receiver.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 136
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified message properties.</p>

    <p></p>
  syntax:
    content: public void deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if deadletter failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String)
  id: deadLetter(UUID,String,String)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  overload: com.microsoft.azure.servicebus._i_message_receiver.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 147
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.</p>

    <p></p>
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: deadLetterReason
      type: "26831127"
      description: <p>The deadletter reason. </p>
    - id: deadLetterErrorDescription
      type: "26831127"
      description: <p>The deadletter error description. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if deadletter failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String,Map<String, Object>)
  id: deadLetter(UUID,String,String,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus._i_message_receiver.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 159
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.</p>

    <p></p>
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: deadLetterReason
      type: "26831127"
      description: <p>The deadletter reason. </p>
    - id: deadLetterErrorDescription
      type: "26831127"
      description: <p>The deadletter error description. </p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if deadletter failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID)
  id: deadLetterAsync(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken)
  nameWithType: IMessageReceiver.deadLetterAsync(UUID lockToken)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 167
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending deadletter. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,Map<String, Object>)
  id: deadLetterAsync(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 176
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified properties.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending deadletter. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String)
  id: deadLetterAsync(UUID,String,String)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  overload: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 186
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: deadLetterReason
      type: "26831127"
      description: <p>The deadletter reason. </p>
    - id: deadLetterErrorDescription
      type: "26831127"
      description: <p>The deadletter error description. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending deadletter. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String,Map<String, Object>)
  id: deadLetterAsync(UUID,String,String,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 197
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: deadLetterReason
      type: "26831127"
      description: <p>The deadletter reason. </p>
    - id: deadLetterErrorDescription
      type: "26831127"
      description: <p>The deadletter error description. </p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending deadletter. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.defer(UUID)
  id: defer(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: defer(UUID lockToken)
  nameWithType: IMessageReceiver.defer(UUID lockToken)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID lockToken)
  overload: com.microsoft.azure.servicebus._i_message_receiver.defer*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 90
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Defers a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will move message into deferred subqueue.</p>

    <p></p>
  syntax:
    content: public void defer(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if defer failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.defer(UUID,Map<String, Object>)
  id: defer(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: defer(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.defer(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID lockToken, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus._i_message_receiver.defer*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 100
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Defers a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token with modified message property. This will move message into deferred subqueue.</p>

    <p></p>
  syntax:
    content: public void defer(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if defer failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID)
  id: deferAsync(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: deferAsync(UUID lockToken)
  nameWithType: IMessageReceiver.deferAsync(UUID lockToken)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus._i_message_receiver.deferAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 108
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously defers a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will move message into deferred subqueue.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deferAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending defer. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID,Map<String, Object>)
  id: deferAsync(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus._i_message_receiver.deferAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 117
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously defers a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token with modified message propert. This will move message into deferred subqueue.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending defer. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.getPrefetchCount()
  id: getPrefetchCount()
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: getPrefetchCount()
  nameWithType: IMessageReceiver.getPrefetchCount()
  fullName: int com.microsoft.azure.servicebus.IMessageReceiver.getPrefetchCount()
  overload: com.microsoft.azure.servicebus._i_message_receiver.getPrefetchCount*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 338
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Get the prefetch value set.</p>

    <p></p>
  syntax:
    content: public int getPrefetchCount()
    return:
      type: f75371fa
      description: <p>The set prefetch count value. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.getReceiveMode()
  id: getReceiveMode()
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: getReceiveMode()
  nameWithType: IMessageReceiver.getReceiveMode()
  fullName: ReceiveMode com.microsoft.azure.servicebus.IMessageReceiver.getReceiveMode()
  overload: com.microsoft.azure.servicebus._i_message_receiver.getReceiveMode*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 24
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Get current receiver's <xref uid="com.microsoft.azure.servicebus._receive_mode" data-throw-if-not-resolved="false">ReceiveMode</xref>.</p>

    <p></p>
  syntax:
    content: public ReceiveMode getReceiveMode()
    return:
      type: com.microsoft.azure.servicebus._receive_mode
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._receive_mode" data-throw-if-not-resolved="false">ReceiveMode</xref>

        </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receive()
  id: receive()
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receive()
  nameWithType: IMessageReceiver.receive()
  fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receive()
  overload: com.microsoft.azure.servicebus._i_message_receiver.receive*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 206
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Receives a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with default server wait time.</p>

    <p></p>
  syntax:
    content: public IMessage receive()
    return:
      type: com.microsoft.azure.servicebus._i_message
      description: <p>The received <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> or null if there is no message. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if receive failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receive(Duration)
  id: receive(Duration)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receive(Duration serverWaitTime)
  nameWithType: IMessageReceiver.receive(Duration serverWaitTime)
  fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receive(Duration serverWaitTime)
  overload: com.microsoft.azure.servicebus._i_message_receiver.receive*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 216
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Receives a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with specified server wait time.</p>

    <p></p>
  syntax:
    content: public IMessage receive(Duration serverWaitTime)
    parameters:
    - id: serverWaitTime
      type: e02a2de0
      description: <p>The server wait time </p>
    return:
      type: com.microsoft.azure.servicebus._i_message
      description: <p>The received <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> or null if there is no message. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if receive failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveAsync()
  id: receiveAsync()
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receiveAsync()
  nameWithType: IMessageReceiver.receiveAsync()
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync()
  overload: com.microsoft.azure.servicebus._i_message_receiver.receiveAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 264
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Receives a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from Azure Service Bus.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<IMessage> receiveAsync()
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>The message received. Returns null if no message is found </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveAsync(Duration)
  id: receiveAsync(Duration)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receiveAsync(Duration serverWaitTime)
  nameWithType: IMessageReceiver.receiveAsync(Duration serverWaitTime)
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync(Duration serverWaitTime)
  overload: com.microsoft.azure.servicebus._i_message_receiver.receiveAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 272
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Receives a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from Azure Service Bus with server wait time.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<IMessage> receiveAsync(Duration serverWaitTime)
    parameters:
    - id: serverWaitTime
      type: e02a2de0
      description: <p>The time the client waits for receiving a message before it times out. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>The message received. Returns null if no message is found </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int)
  id: receiveBatch(int)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receiveBatch(int maxMessageCount)
  nameWithType: IMessageReceiver.receiveBatch(int maxMessageCount)
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int maxMessageCount)
  overload: com.microsoft.azure.servicebus._i_message_receiver.receiveBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 236
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Receives a maximum of maxMessageCount <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from Azure Service Bus.</p>

    <p></p>
  syntax:
    content: public Collection<IMessage> receiveBatch(int maxMessageCount)
    parameters:
    - id: maxMessageCount
      type: f75371fa
      description: <p>The maximum number of messages that will be received. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>List of messages received. Returns null if no message is found. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if receive failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int,Duration)
  id: receiveBatch(int,Duration)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receiveBatch(int maxMessageCount, Duration serverWaitTime)
  nameWithType: IMessageReceiver.receiveBatch(int maxMessageCount, Duration serverWaitTime)
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int maxMessageCount, Duration serverWaitTime)
  overload: com.microsoft.azure.servicebus._i_message_receiver.receiveBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 247
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Receives a maximum of maxMessageCount <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from Azure Service Bus with server wait time.</p>

    <p></p>
  syntax:
    content: public Collection<IMessage> receiveBatch(int maxMessageCount, Duration serverWaitTime)
    parameters:
    - id: maxMessageCount
      type: f75371fa
      description: <p>The maximum number of messages that will be received. </p>
    - id: serverWaitTime
      type: e02a2de0
      description: <p>The time the client waits for receiving a message before it times out. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>List of messages received. Returns null if no message is found. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if receive failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int)
  id: receiveBatchAsync(int)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receiveBatchAsync(int maxMessageCount)
  nameWithType: IMessageReceiver.receiveBatchAsync(int maxMessageCount)
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int maxMessageCount)
  overload: com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 288
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously receives a maximum of maxMessageCount <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from the entity.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Collection<IMessage>> receiveBatchAsync(int maxMessageCount)
    parameters:
    - id: maxMessageCount
      type: f75371fa
      description: <p>The maximum number of messages that will be received. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
      description: <p>a CompletableFuture representing the pending receive. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int,Duration)
  id: receiveBatchAsync(int,Duration)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)
  nameWithType: IMessageReceiver.receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)
  overload: com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 297
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously receives a maximum of maxMessageCount <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from Azure Service Bus with server wait time.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Collection<IMessage>> receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)
    parameters:
    - id: maxMessageCount
      type: f75371fa
      description: <p>The maximum number of messages that will be received. </p>
    - id: serverWaitTime
      type: e02a2de0
      description: <p>The time the client waits for receiving a message before it times out. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
      description: <p>a CompletableFuture representing the pending receive. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessage(long)
  id: receiveDeferredMessage(long)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receiveDeferredMessage(long sequenceNumber)
  nameWithType: IMessageReceiver.receiveDeferredMessage(long sequenceNumber)
  fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessage(long sequenceNumber)
  overload: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessage*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 226
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Receives a deferred <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref>. Deferred messages can only be received by using sequence number.</p>

    <p></p>
  syntax:
    content: public IMessage receiveDeferredMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>The <xref uid="com.microsoft.azure.servicebus._message.getSequenceNumber()" data-throw-if-not-resolved="false">Message#getSequenceNumber()</xref>. </p>
    return:
      type: com.microsoft.azure.servicebus._i_message
      description: <p>The received <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> or null if there is no message for given sequence number. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if receive failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageAsync(long)
  id: receiveDeferredMessageAsync(long)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receiveDeferredMessageAsync(long sequenceNumber)
  nameWithType: IMessageReceiver.receiveDeferredMessageAsync(long sequenceNumber)
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageAsync(long sequenceNumber)
  overload: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 280
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously receives a specific deferred <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> identified by sequence number.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<IMessage> receiveDeferredMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>The sequence number of the message that will be received. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>a CompletableFuture representing the pending receive. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatch(Collection<Long>)
  id: receiveDeferredMessageBatch(Collection<Long>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
  nameWithType: IMessageReceiver.receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
  overload: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 257
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Receives a batch of deferred <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref>.</p>

    <p></p>
  syntax:
    content: public Collection<IMessage> receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
    parameters:
    - id: sequenceNumbers
      type: f936a554
      description: <p>The sequence numbers of desired deferred messages. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>List of messages received. Returns null if no message is found. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if receive failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatchAsync(Collection<Long>)
  id: receiveDeferredMessageBatchAsync(Collection<Long>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
  nameWithType: IMessageReceiver.receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
  overload: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 305
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously receives a set of deferred <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from the entity.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Collection<IMessage>> receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
    parameters:
    - id: sequenceNumbers
      type: f936a554
      description: <p>The sequence numbers of the message that will be received. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
      description: <p>a CompletableFuture representing the pending receive. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.renewMessageLock(IMessage)
  id: renewMessageLock(IMessage)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: renewMessageLock(IMessage message)
  nameWithType: IMessageReceiver.renewMessageLock(IMessage message)
  fullName: Instant com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(IMessage message)
  overload: com.microsoft.azure.servicebus._i_message_receiver.renewMessageLock*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 329
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid="com.microsoft.azure.servicebus._receive_mode.PEEKLOCK" data-throw-if-not-resolved="false">ReceiveMode#PEEKLOCK</xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is renewed by the entity's LockDuration.</p>

    <p></p>
  syntax:
    content: public Instant renewMessageLock(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus._i_message
      description: <p>The <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to be renewed </p>
    return:
      type: 328f8254
      description: <p>The new locked until UTC time. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if renew failed </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.renewMessageLockAsync(IMessage)
  id: renewMessageLockAsync(IMessage)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: renewMessageLockAsync(IMessage message)
  nameWithType: IMessageReceiver.renewMessageLockAsync(IMessage message)
  fullName: CompletableFuture<Instant> com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(IMessage message)
  overload: com.microsoft.azure.servicebus._i_message_receiver.renewMessageLockAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 313
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Instant> renewMessageLockAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus._i_message
      description: <p>The <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to be renewed </p>
    return:
      type: 6666b360
      description: <p>a CompletableFuture representing the pending renew. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.setPrefetchCount(int)
  id: setPrefetchCount(int)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  langs:
  - java
  name: setPrefetchCount(int prefetchCount)
  nameWithType: IMessageReceiver.setPrefetchCount(int prefetchCount)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.setPrefetchCount(int prefetchCount)
  overload: com.microsoft.azure.servicebus._i_message_receiver.setPrefetchCount*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageReceiver.java
    startLine: 350
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Set the prefetch count of the receiver. Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive. Setting a non-zero value prefetches PrefetchCount number of messages. Setting the value to zero turns prefetch off. For RECEIVEANDDELETE mode, the default value is 0. For PEEKLOCK mode, the default value is 100. </p>

    <p>The value cannot be set until the receiver is created.</p>

    <p></p>
  syntax:
    content: public void setPrefetchCount(int prefetchCount)
    parameters:
    - id: prefetchCount
      type: f75371fa
      description: <p>The desired prefetch count. </p>
  exceptions:
  - type: 73fec9fb
    description: <p>if sets the value failed </p>
references:
- uid: com.microsoft.azure.servicebus._i_message_receiver.getReceiveMode*
  name: getReceiveMode
  nameWithType: IMessageReceiver.getReceiveMode
  fullName: ReceiveMode com.microsoft.azure.servicebus.IMessageReceiver.getReceiveMode
  package: com.microsoft.azure.servicebus
- uid: 8256ba40
  spec.java:
  - name: InterruptedException
    fullName: InterruptedException
- uid: 73fec9fb
  spec.java:
  - name: ServiceBusException
    fullName: ServiceBusException
- uid: add9545a
  spec.java:
  - name: UUID
    fullName: UUID
- uid: com.microsoft.azure.servicebus._i_message_receiver.abandon*
  name: abandon
  nameWithType: IMessageReceiver.abandon
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.abandon
  package: com.microsoft.azure.servicebus
- uid: e7b06046
  spec.java:
  - name: Map<String, Object>
    fullName: Map<String, Object>
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.servicebus._i_message_receiver.abandonAsync*
  name: abandonAsync
  nameWithType: IMessageReceiver.abandonAsync
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.complete*
  name: complete
  nameWithType: IMessageReceiver.complete
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.complete
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.completeAsync*
  name: completeAsync
  nameWithType: IMessageReceiver.completeAsync
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.completeAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.defer*
  name: defer
  nameWithType: IMessageReceiver.defer
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.defer
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.deferAsync*
  name: deferAsync
  nameWithType: IMessageReceiver.deferAsync
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deferAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetter*
  name: deadLetter
  nameWithType: IMessageReceiver.deadLetter
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter
  package: com.microsoft.azure.servicebus
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync*
  name: deadLetterAsync
  nameWithType: IMessageReceiver.deadLetterAsync
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.receive*
  name: receive
  nameWithType: IMessageReceiver.receive
  fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receive
  package: com.microsoft.azure.servicebus
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessage*
  name: receiveDeferredMessage
  nameWithType: IMessageReceiver.receiveDeferredMessage
  fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessage
  package: com.microsoft.azure.servicebus
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
  spec.java:
  - name: Collection<
    fullName: Collection<
  - uid: com.microsoft.azure.servicebus._i_message
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
    href: com.microsoft.azure.servicebus._i_message.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatch*
  name: receiveBatch
  nameWithType: IMessageReceiver.receiveBatch
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch
  package: com.microsoft.azure.servicebus
- uid: f936a554
  spec.java:
  - name: Collection<Long>
    fullName: Collection<Long>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatch*
  name: receiveDeferredMessageBatch
  nameWithType: IMessageReceiver.receiveDeferredMessageBatch
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatch
  package: com.microsoft.azure.servicebus
- uid: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: com.microsoft.azure.servicebus._i_message
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
    href: com.microsoft.azure.servicebus._i_message.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveAsync*
  name: receiveAsync
  nameWithType: IMessageReceiver.receiveAsync
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageAsync*
  name: receiveDeferredMessageAsync
  nameWithType: IMessageReceiver.receiveDeferredMessageAsync
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageAsync
  package: com.microsoft.azure.servicebus
- uid: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
  spec.java:
  - name: CompletableFuture<Collection<
    fullName: CompletableFuture<Collection<
  - uid: com.microsoft.azure.servicebus._i_message
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
    href: com.microsoft.azure.servicebus._i_message.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync*
  name: receiveBatchAsync
  nameWithType: IMessageReceiver.receiveBatchAsync
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatchAsync*
  name: receiveDeferredMessageBatchAsync
  nameWithType: IMessageReceiver.receiveDeferredMessageBatchAsync
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatchAsync
  package: com.microsoft.azure.servicebus
- uid: 6666b360
  spec.java:
  - name: CompletableFuture<Instant>
    fullName: CompletableFuture<Instant>
- uid: com.microsoft.azure.servicebus._i_message_receiver.renewMessageLockAsync*
  name: renewMessageLockAsync
  nameWithType: IMessageReceiver.renewMessageLockAsync
  fullName: CompletableFuture<Instant> com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync
  package: com.microsoft.azure.servicebus
- uid: 328f8254
  spec.java:
  - name: Instant
    fullName: Instant
- uid: com.microsoft.azure.servicebus._i_message_receiver.renewMessageLock*
  name: renewMessageLock
  nameWithType: IMessageReceiver.renewMessageLock
  fullName: Instant com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.getPrefetchCount*
  name: getPrefetchCount
  nameWithType: IMessageReceiver.getPrefetchCount
  fullName: int com.microsoft.azure.servicebus.IMessageReceiver.getPrefetchCount
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.setPrefetchCount*
  name: setPrefetchCount
  nameWithType: IMessageReceiver.setPrefetchCount
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.setPrefetchCount
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_closeable.close()
  parent: com.microsoft.azure.servicebus._i_closeable
  href: com.microsoft.azure.servicebus._i_closeable.yml
  name: close()
  nameWithType: ICloseable.close()
  fullName: void com.microsoft.azure.servicebus.ICloseable.close()
  type: Method
  summary: <p>Synchronously closes and disposes any resources associated with this object. Calling this method is equivalent of calling . This method blocks until this object is closed. </p>
  syntax:
    content: public void close()
- uid: com.microsoft.azure.servicebus._i_closeable.closeAsync()
  parent: com.microsoft.azure.servicebus._i_closeable
  href: com.microsoft.azure.servicebus._i_closeable.yml
  name: closeAsync()
  nameWithType: ICloseable.closeAsync()
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.ICloseable.closeAsync()
  type: Method
  summary: <p>Closes and disposes any resources associated with this object. An object cannot be used after it is closed. This is an asynchronous method that returns a CompletableFuture immediately. This object is completely closed when the returned CompletableFuture is completed. </p>
  syntax:
    content: public CompletableFuture<Void> closeAsync()
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the closing of this object. </p>
- uid: com.microsoft.azure.servicebus._i_message_entity_client.getEntityPath()
  parent: com.microsoft.azure.servicebus._i_message_entity_client
  href: com.microsoft.azure.servicebus._i_message_entity_client.yml
  name: getEntityPath()
  nameWithType: IMessageEntityClient.getEntityPath()
  fullName: String com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  type: Method
  summary: >-
    <p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>

    <p></p>
  syntax:
    content: public String getEntityPath()
    return:
      type: "26831127"
      description: <p>path of the entity this client is connecting to </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peek()
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peek()
  nameWithType: IMessageBrowser.peek()
  fullName: IMessage com.microsoft.azure.servicebus.IMessageBrowser.peek()
  type: Method
  summary: >-
    <p>reads next the active message without changing the state of the receiver or the message source. The first call to <xref uid="com.microsoft.azure.servicebus._i_message_browser.peek()" data-throw-if-not-resolved="false">IMessageBrowser#peek()</xref> fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.</p>

    <p></p>
  syntax:
    content: public IMessage peek()
    return:
      type: com.microsoft.azure.servicebus._i_message
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peek(long)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peek(long fromSequenceNumber)
  nameWithType: IMessageBrowser.peek(long fromSequenceNumber)
  fullName: IMessage com.microsoft.azure.servicebus.IMessageBrowser.peek(long fromSequenceNumber)
  type: Method
  summary: >-
    <p>Reads next the active message without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public IMessage peek(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    return:
      type: com.microsoft.azure.servicebus._i_message
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekAsync()
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekAsync()
  nameWithType: IMessageBrowser.peekAsync()
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
  type: Method
  summary: >-
    <p>Asynchronously reads the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<IMessage> peekAsync()
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekAsync(long)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekAsync(long fromSequenceNumber)
  nameWithType: IMessageBrowser.peekAsync(long fromSequenceNumber)
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long fromSequenceNumber)
  type: Method
  summary: >-
    <p>Asynchronously reads next the active message without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<IMessage> peekAsync(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>CompletableFuture that returns <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked. </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekBatch(int)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekBatch(int messageCount)
  nameWithType: IMessageBrowser.peekBatch(int messageCount)
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int messageCount)
  type: Method
  summary: >-
    <p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public Collection<IMessage> peekBatch(int messageCount)
    parameters:
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>Batch of <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekBatch(long,int)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekBatch(long fromSequenceNumber, int messageCount)
  nameWithType: IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)
  type: Method
  summary: >-
    <p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public Collection<IMessage> peekBatch(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>Batch of <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(int)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekBatchAsync(int messageCount)
  nameWithType: IMessageBrowser.peekBatchAsync(int messageCount)
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int messageCount)
  type: Method
  summary: >-
    <p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(int messageCount)
    parameters:
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
      description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked. </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(long,int)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekBatchAsync(long fromSequenceNumber, int messageCount)
  nameWithType: IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)
  type: Method
  summary: >-
    <p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
      description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked. </p>
- uid: com.microsoft.azure.servicebus._i_message_entity_client
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._i_message_entity_client.yml
  name: IMessageEntityClient
  nameWithType: IMessageEntityClient
  fullName: com.microsoft.azure.servicebus.IMessageEntityClient
  type: Interface
  summary: >-
    <p>Represents a messaging client to an Azure Service Bus entity.</p>

    <p></p>
  syntax:
    content: public interface IMessageEntityClient extends ICloseable
- uid: com.microsoft.azure.servicebus._i_message_browser
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: IMessageBrowser
  nameWithType: IMessageBrowser
  fullName: com.microsoft.azure.servicebus.IMessageBrowser
  type: Interface
  summary: <p>Represents a message browser that can browse messages from Azure Service Bus. </p>
  syntax:
    content: public interface IMessageBrowser
- uid: com.microsoft.azure.servicebus._i_message_session
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._i_message_session.yml
  name: IMessageSession
  nameWithType: IMessageSession
  fullName: com.microsoft.azure.servicebus.IMessageSession
  type: Interface
  summary: >-
    <p>Describes a Session object. <xref uid="com.microsoft.azure.servicebus._i_message_session" data-throw-if-not-resolved="false">IMessageSession</xref> can be used to perform operations on sessions. </p>

    <p>Service Bus Sessions, also called 'Groups' in the AMQP 1.0 protocol, are unbounded sequences of related messages. ServiceBus guarantees ordering of messages in a session. </p>

    <p>Any sender can create a session when submitting messages into a Topic or Queue by setting the <xref uid="" data-throw-if-not-resolved="false">Message#sessionId</xref> property on <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to some application defined unique identifier. At the AMQP 1.0 protocol level, this value maps to the group-id property. </p>

    <p>Sessions come into existence when there is at least one message with the session's SessionId in the Queue or Topic subscription. Once a Session exists, there is no defined moment or gesture for when the session expires or disappears. </p>
  syntax:
    content: public interface IMessageSession
- uid: com.microsoft.azure.servicebus._message_receiver
- uid: com.microsoft.azure.servicebus._receive_mode
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._receive_mode.yml
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: com.microsoft.azure.servicebus.ReceiveMode
  type: Enum
  summary: >-
    <p>Enumeration to represent the two receive modes Azure Service Bus supports.</p>

    <p></p>
  syntax:
    content: public enum ReceiveMode
- uid: com.microsoft.azure.servicebus.primitives._service_bus_exception
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives._service_bus_exception.yml
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
  type: Class
  summary: <p>This is the base exception that service bus will generate for all error cases. </p>
  syntax:
    content: public class ServiceBusException
- uid: com.microsoft.azure.servicebus._message
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._message.yml
  name: Message
  nameWithType: Message
  fullName: com.microsoft.azure.servicebus.Message
  type: Class
  syntax:
    content: public class Message
- uid: com.microsoft.azure.servicebus._message.getLockToken()
  parent: com.microsoft.azure.servicebus._message
  href: com.microsoft.azure.servicebus._message.yml
  name: getLockToken()
  nameWithType: Message.getLockToken()
  fullName: UUID com.microsoft.azure.servicebus.Message.getLockToken()
  type: Method
  summary: >-
    <p>Gets the lock token of this message, if this message is received using <xref uid="com.microsoft.azure.servicebus._receive_mode.PEEKLOCK" data-throw-if-not-resolved="false">ReceiveMode#PEEKLOCK</xref> mode. This token is used to complete or abandon or deadletter or defer this message.</p>

    <p></p>
  syntax:
    content: public UUID getLockToken()
    return:
      type: add9545a
      description: <p>lock token of this message if this message is received using PEEKLOCK mode. Otherwise it returns a token of all zeroes. </p>
- uid: com.microsoft.azure.servicebus._i_message
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._i_message.yml
  name: IMessage
  nameWithType: IMessage
  fullName: com.microsoft.azure.servicebus.IMessage
  type: Interface
  summary: >-
    <p>Represents a message that is exchanged between Azure Service Bus and clients.</p>

    <p></p>
  syntax:
    content: public interface IMessage
- uid: com.microsoft.azure.servicebus._message.getSequenceNumber()
  parent: com.microsoft.azure.servicebus._message
  href: com.microsoft.azure.servicebus._message.yml
  name: getSequenceNumber()
  nameWithType: Message.getSequenceNumber()
  fullName: long com.microsoft.azure.servicebus.Message.getSequenceNumber()
  type: Method
  summary: >-
    <p>Get the sequence number of this message. Azure Service Bus assigns a unique sequence number to every message enqueued in an entity.</p>

    <p></p>
  syntax:
    content: public long getSequenceNumber()
    return:
      type: 0364520f
      description: <p>sequence number of this message </p>
- uid: com.microsoft.azure.servicebus._receive_mode.PEEKLOCK
  parent: com.microsoft.azure.servicebus._receive_mode
  href: com.microsoft.azure.servicebus._receive_mode.yml
  name: PEEKLOCK
  nameWithType: ReceiveMode.PEEKLOCK
  fullName: com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK
  type: Field
  summary: <p>In this mode, received message is not deleted from the queue or subscription, instead it is temporarily locked to the receiver, making it invisible to other receivers. Then the service waits for one of the three events <itemizedlist><listitem><p>If the receiver processes the message successfully, it calls  and the message will be deleted. </p></listitem><listitem><p>If the receiver decides that it can't process the message successfully, it calls  and the message will be unlocked and made available to other receivers. </p></listitem><listitem><p>If the receiver wants to defer the processing of the message to a later point in time, it calls  and the message will be deferred. A deferred can only be received by its sequence number. </p></listitem><listitem><p>If the receiver wants to dead-letter the message, it calls  and the message will be moved to a special sub-queue called deadletter queue. </p></listitem><listitem><p>If the receiver calls neither of these methods within a configurable period of time (by default, 60 seconds), the service assumes the receiver has failed. In this case, it behaves as if the receiver had called , making the message available to other receivers </p></listitem></itemizedlist></p>
  syntax:
    content: public PEEKLOCK
