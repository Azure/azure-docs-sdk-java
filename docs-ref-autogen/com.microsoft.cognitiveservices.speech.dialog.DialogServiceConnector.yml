### YamlMime:JavaType
constructors:
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.DialogServiceConnector(DialogServiceConfig config)
  name: DialogServiceConnector(DialogServiceConfig config)
  nameWithType: DialogServiceConnector.DialogServiceConnector(DialogServiceConfig config)
  parameters:
  - description: <p>Dialog service connector configuration. </p>
    name: config
    type: <xref href="com.microsoft.cognitiveservices.speech.dialog.DialogServiceConfig?alt=com.microsoft.cognitiveservices.speech.dialog.DialogServiceConfig&text=DialogServiceConfig" data-throw-if-not-resolved="False"/>
  summary: <p>Builds a DialogServiceConnector with audio from default microphone input </p>
  syntax: public DialogServiceConnector(DialogServiceConfig config)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.DialogServiceConnector(DialogServiceConfig)
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.DialogServiceConnector(DialogServiceConfig config, AudioConfig audioConfig)
  name: DialogServiceConnector(DialogServiceConfig config, AudioConfig audioConfig)
  nameWithType: DialogServiceConnector.DialogServiceConnector(DialogServiceConfig config, AudioConfig audioConfig)
  parameters:
  - description: <p>Dialog service connector configuration. </p>
    name: config
    type: <xref href="com.microsoft.cognitiveservices.speech.dialog.DialogServiceConfig?alt=com.microsoft.cognitiveservices.speech.dialog.DialogServiceConfig&text=DialogServiceConfig" data-throw-if-not-resolved="False"/>
  - description: <p>An optional audio input configuration associated with the recognizer </p>
    name: audioConfig
    type: <xref href="com.microsoft.cognitiveservices.speech.audio.AudioConfig?alt=com.microsoft.cognitiveservices.speech.audio.AudioConfig&text=AudioConfig" data-throw-if-not-resolved="False"/>
  summary: <p>Builds a DialogServiceConnector </p>
  syntax: public DialogServiceConnector(DialogServiceConfig config, AudioConfig audioConfig)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.DialogServiceConnector(DialogServiceConfig,AudioConfig)
fields:
- field:
    type: EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.dialog.ActivityReceivedEventArgs?alt=com.microsoft.cognitiveservices.speech.dialog.ActivityReceivedEventArgs&text=ActivityReceivedEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.activityReceived
  name: activityReceived
  nameWithType: DialogServiceConnector.activityReceived
  summary: <p>Defines event handler for the activity received event. </p>
  syntax: public EventHandlerImpl<ActivityReceivedEventArgs> activityReceived= new EventHandlerImpl<ActivityReceivedEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.activityReceived
- field:
    type: EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.SpeechRecognitionCanceledEventArgs?alt=com.microsoft.cognitiveservices.speech.SpeechRecognitionCanceledEventArgs&text=SpeechRecognitionCanceledEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.canceled
  name: canceled
  nameWithType: DialogServiceConnector.canceled
  summary: <p>Defines event handler for the canceled event. </p>
  syntax: public EventHandlerImpl<SpeechRecognitionCanceledEventArgs> canceled= new EventHandlerImpl<SpeechRecognitionCanceledEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.canceled
- field:
    type: EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.SpeechRecognitionEventArgs?alt=com.microsoft.cognitiveservices.speech.SpeechRecognitionEventArgs&text=SpeechRecognitionEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.recognized
  name: recognized
  nameWithType: DialogServiceConnector.recognized
  summary: <p>Defines event handler for the recognized event. </p>
  syntax: public EventHandlerImpl<SpeechRecognitionEventArgs> recognized= new EventHandlerImpl<SpeechRecognitionEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.recognized
- field:
    type: EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.SpeechRecognitionEventArgs?alt=com.microsoft.cognitiveservices.speech.SpeechRecognitionEventArgs&text=SpeechRecognitionEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.recognizing
  name: recognizing
  nameWithType: DialogServiceConnector.recognizing
  summary: <p>Defines event handler for the recognizing event. </p>
  syntax: public EventHandlerImpl<SpeechRecognitionEventArgs> recognizing= new EventHandlerImpl<SpeechRecognitionEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.recognizing
- field:
    type: EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.SessionEventArgs?alt=com.microsoft.cognitiveservices.speech.SessionEventArgs&text=SessionEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.sessionStarted
  name: sessionStarted
  nameWithType: DialogServiceConnector.sessionStarted
  summary: <p>Defines event handler for the session start event. </p>
  syntax: public EventHandlerImpl<SessionEventArgs> sessionStarted= new EventHandlerImpl<SessionEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.sessionStarted
- field:
    type: EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.SessionEventArgs?alt=com.microsoft.cognitiveservices.speech.SessionEventArgs&text=SessionEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.sessionStopped
  name: sessionStopped
  nameWithType: DialogServiceConnector.sessionStopped
  summary: <p>Defines event handler for the session stop event. </p>
  syntax: public EventHandlerImpl<SessionEventArgs> sessionStopped= new EventHandlerImpl<SessionEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.sessionStopped
- field:
    type: EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.RecognitionEventArgs?alt=com.microsoft.cognitiveservices.speech.RecognitionEventArgs&text=RecognitionEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.speechEndDetected
  name: speechEndDetected
  nameWithType: DialogServiceConnector.speechEndDetected
  summary: <p>Defines event handler for the speech end detection event. </p>
  syntax: public EventHandlerImpl<RecognitionEventArgs> speechEndDetected= new EventHandlerImpl<RecognitionEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.speechEndDetected
- field:
    type: EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.RecognitionEventArgs?alt=com.microsoft.cognitiveservices.speech.RecognitionEventArgs&text=RecognitionEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.speechStartDetected
  name: speechStartDetected
  nameWithType: DialogServiceConnector.speechStartDetected
  summary: <p>Defines event handler for the speech start detection event. </p>
  syntax: public EventHandlerImpl<RecognitionEventArgs> speechStartDetected= new EventHandlerImpl<RecognitionEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.speechStartDetected
- field:
    type: EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.dialog.TurnStatusReceivedEventArgs?alt=com.microsoft.cognitiveservices.speech.dialog.TurnStatusReceivedEventArgs&text=TurnStatusReceivedEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.turnStatusReceived
  name: turnStatusReceived
  nameWithType: DialogServiceConnector.turnStatusReceived
  summary: <p>Defines event handler for the turn status received event. </p>
  syntax: public EventHandlerImpl<TurnStatusReceivedEventArgs> turnStatusReceived= new EventHandlerImpl<TurnStatusReceivedEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.turnStatusReceived
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.close()
  name: close()
  nameWithType: DialogServiceConnector.close()
  summary: '<p>Dispose of associated resources. Note: close() must be called in order to release underlying resources held by the object. </p>'
  syntax: public void close()
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.close()
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.connectAsync()
  name: connectAsync()
  nameWithType: DialogServiceConnector.connectAsync()
  returns:
    description: <p>A task representing the asynchronous operation that connects to the service. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Connects with the service. </p>
  syntax: public Future<Void> connectAsync()
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.connectAsync()
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.disconnectAsync()
  name: disconnectAsync()
  nameWithType: DialogServiceConnector.disconnectAsync()
  returns:
    description: <p>A task representing the asynchronous operation that disconnects from the service. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Disconnects from the service. </p>
  syntax: public Future<Void> disconnectAsync()
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.disconnectAsync()
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.getAuthorizationToken()
  name: getAuthorizationToken()
  nameWithType: DialogServiceConnector.getAuthorizationToken()
  returns:
    description: <p>Authorization token. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the authorization token used to communicate with the service. </p>
  syntax: public String getAuthorizationToken()
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.getAuthorizationToken()
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.getProperties()
  name: getProperties()
  nameWithType: DialogServiceConnector.getProperties()
  returns:
    description: <p>The collection of properties and their values defined for this DialogServiceConnector. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.PropertyCollection?alt=com.microsoft.cognitiveservices.speech.PropertyCollection&text=PropertyCollection" data-throw-if-not-resolved="False"/>
  summary: <p>The collection of properties and their values defined for this DialogServiceConnector. </p>
  syntax: public PropertyCollection getProperties()
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.getProperties()
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.listenOnceAsync()
  name: listenOnceAsync()
  nameWithType: DialogServiceConnector.listenOnceAsync()
  returns:
    description: <p>A task representing the asynchronous operation that starts a one shot listening session. </p>
    type: Future&lt;<xref href="com.microsoft.cognitiveservices.speech.SpeechRecognitionResult?alt=com.microsoft.cognitiveservices.speech.SpeechRecognitionResult&text=SpeechRecognitionResult" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Starts a listening session that will terminate after the first utterance. </p>
  syntax: public Future<SpeechRecognitionResult> listenOnceAsync()
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.listenOnceAsync()
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.sendActivityAsync(final String activity)
  name: sendActivityAsync(final String activity)
  nameWithType: DialogServiceConnector.sendActivityAsync(final String activity)
  parameters:
  - description: <p>Activity to be sent. </p>
    name: activity
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the asynchronous operation that sends an activity to the backing dialog. </p>
    type: <xref href="Future%3CString%3E?alt=Future%3CString%3E&text=Future%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Sends an activity to the backing dialog. </p>
  syntax: public Future<String> sendActivityAsync(final String activity)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.sendActivityAsync(final String)
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.setAuthorizationToken(String token)
  name: setAuthorizationToken(String token)
  nameWithType: DialogServiceConnector.setAuthorizationToken(String token)
  parameters:
  - description: <p>Authorization token. </p>
    name: token
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: '<p>Sets the authorization token used to communicate with the service. Note: The caller needs to ensure that the authorization token is valid. Before the authorization token expires, the caller needs to refresh it by calling this setter with a new valid token. Otherwise, the recognizer will encounter errors during recognition. </p>'
  syntax: public void setAuthorizationToken(String token)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.setAuthorizationToken(String)
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.setSpeechActivityTemplate(final String activityTemplate)
  name: setSpeechActivityTemplate(final String activityTemplate)
  nameWithType: DialogServiceConnector.setSpeechActivityTemplate(final String activityTemplate)
  parameters:
  - description: <p>The JSON payload to be merged into generated activity messages. </p>
    name: activityTemplate
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the JSON template that will be provided to the speech service for the next conversation. The service will attempt to merge this template into all activities sent to the dialog backend, whether originated by the client with SendActivityAsync or generated by the service, as is the case with speech-to-text results. </p>
  syntax: public void setSpeechActivityTemplate(final String activityTemplate)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.setSpeechActivityTemplate(final String)
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.startKeywordRecognitionAsync(final KeywordRecognitionModel model)
  name: startKeywordRecognitionAsync(final KeywordRecognitionModel model)
  nameWithType: DialogServiceConnector.startKeywordRecognitionAsync(final KeywordRecognitionModel model)
  parameters:
  - description: <p>The keyword recognition model that specifies the keyword to be recognized. </p>
    name: model
    type: final <xref href="com.microsoft.cognitiveservices.speech.KeywordRecognitionModel?alt=com.microsoft.cognitiveservices.speech.KeywordRecognitionModel&text=KeywordRecognitionModel" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the asynchronous operation that starts keyword recognition. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Initiates keyword recognition. </p>
  syntax: public Future<Void> startKeywordRecognitionAsync(final KeywordRecognitionModel model)
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.startKeywordRecognitionAsync(final KeywordRecognitionModel)
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.stopKeywordRecognitionAsync()
  name: stopKeywordRecognitionAsync()
  nameWithType: DialogServiceConnector.stopKeywordRecognitionAsync()
  returns:
    description: <p>A task representing the asynchronous operation that stops keyword recognition. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Stop keyword recognition. </p>
  syntax: public Future<Void> stopKeywordRecognitionAsync()
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.stopKeywordRecognitionAsync()
- fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.stopListeningAsync()
  name: stopListeningAsync()
  nameWithType: DialogServiceConnector.stopListeningAsync()
  returns:
    description: <p>A task representing the asynchronous operation that stops an active listening session. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Requests that an active listening operation immediately finish, interrupting any ongoing speaking, and provide a result reflecting whatever audio data has been captured so far. </p>
  syntax: public Future<Void> stopListeningAsync()
  uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector.stopListeningAsync()
nameWithType: DialogServiceConnector
syntax: public class DialogServiceConnector
type: class
uid: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector
fullName: com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector
name: DialogServiceConnector
package: com.microsoft.cognitiveservices.speech.dialog
summary: '<p>Class that defines a DialogServiceConnector. Note: close() must be called in order to release underlying resources held by the object. </p>'
metadata: {}
