### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
  id: "WrappedKey"
  parent: "com.azure.storage.blob.specialized.cryptography"
  children:
  - "com.azure.storage.blob.specialized.cryptography.WrappedKey.WrappedKey()"
  - "com.azure.storage.blob.specialized.cryptography.WrappedKey.WrappedKey(java.lang.String,byte[],java.lang.String)"
  - "com.azure.storage.blob.specialized.cryptography.WrappedKey.getAlgorithm()"
  - "com.azure.storage.blob.specialized.cryptography.WrappedKey.getEncryptedKey()"
  - "com.azure.storage.blob.specialized.cryptography.WrappedKey.getKeyId()"
  - "com.azure.storage.blob.specialized.cryptography.WrappedKey.setAlgorithm(java.lang.String)"
  - "com.azure.storage.blob.specialized.cryptography.WrappedKey.setEncryptedKey(byte[])"
  - "com.azure.storage.blob.specialized.cryptography.WrappedKey.setKeyId(java.lang.String)"
  langs:
  - "java"
  name: "WrappedKey"
  nameWithType: "WrappedKey"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
  type: "Class"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Represents the envelope key details stored on the service."
  syntax:
    content: "final class WrappedKey"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.WrappedKey()"
  id: "WrappedKey()"
  parent: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
  langs:
  - "java"
  name: "WrappedKey()"
  nameWithType: "WrappedKey.WrappedKey()"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.WrappedKey()"
  overload: "com.azure.storage.blob.specialized.cryptography.WrappedKey.WrappedKey*"
  type: "Constructor"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Initializes a new instance of the <xref uid=\"com.azure.storage.blob.specialized.cryptography.WrappedKey\" data-throw-if-not-resolved=\"false\">WrappedKey</xref> class."
  syntax:
    content: " WrappedKey()"
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.WrappedKey(java.lang.String,byte[],java.lang.String)"
  id: "WrappedKey(java.lang.String,byte[],java.lang.String)"
  parent: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
  langs:
  - "java"
  name: "WrappedKey(String keyId, byte[] encryptedKey, String algorithm)"
  nameWithType: "WrappedKey.WrappedKey(String keyId, byte[] encryptedKey, String algorithm)"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.WrappedKey(String keyId, byte[] encryptedKey, String algorithm)"
  overload: "com.azure.storage.blob.specialized.cryptography.WrappedKey.WrappedKey*"
  type: "Constructor"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Initializes a new instance of the <xref uid=\"com.azure.storage.blob.specialized.cryptography.WrappedKey\" data-throw-if-not-resolved=\"false\">WrappedKey</xref> class using the specified key id, encrypted key and the algorithm."
  syntax:
    content: " WrappedKey(String keyId, byte[] encryptedKey, String algorithm)"
    parameters:
    - id: "keyId"
      type: "java.lang.String"
      description: "The key identifier string."
    - id: "encryptedKey"
      type: "byte[]"
      description: "The encrypted content encryption key."
    - id: "algorithm"
      type: "java.lang.String"
      description: "The algorithm used for wrapping."
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getAlgorithm()"
  id: "getAlgorithm()"
  parent: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
  langs:
  - "java"
  name: "getAlgorithm()"
  nameWithType: "WrappedKey.getAlgorithm()"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getAlgorithm()"
  overload: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getAlgorithm*"
  type: "Method"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Gets the algorithm used for wrapping."
  syntax:
    content: " String getAlgorithm()"
    return:
      type: "java.lang.String"
      description: "The algorithm used for wrapping."
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getEncryptedKey()"
  id: "getEncryptedKey()"
  parent: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
  langs:
  - "java"
  name: "getEncryptedKey()"
  nameWithType: "WrappedKey.getEncryptedKey()"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getEncryptedKey()"
  overload: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getEncryptedKey*"
  type: "Method"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Gets the encrypted content encryption key."
  syntax:
    content: " byte[] getEncryptedKey()"
    return:
      type: "byte[]"
      description: "The encrypted content encryption key."
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getKeyId()"
  id: "getKeyId()"
  parent: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
  langs:
  - "java"
  name: "getKeyId()"
  nameWithType: "WrappedKey.getKeyId()"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getKeyId()"
  overload: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getKeyId*"
  type: "Method"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Gets the key identifier. This identifier is used to identify the key that is used to wrap/unwrap the content encryption key."
  syntax:
    content: " String getKeyId()"
    return:
      type: "java.lang.String"
      description: "The key identifier string."
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setAlgorithm(java.lang.String)"
  id: "setAlgorithm(java.lang.String)"
  parent: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
  langs:
  - "java"
  name: "setAlgorithm(String algorithm)"
  nameWithType: "WrappedKey.setAlgorithm(String algorithm)"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setAlgorithm(String algorithm)"
  overload: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setAlgorithm*"
  type: "Method"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Sets the algorithm used for wrapping."
  syntax:
    content: " WrappedKey setAlgorithm(String algorithm)"
    parameters:
    - id: "algorithm"
      type: "java.lang.String"
      description: "The algorithm used for wrapping."
    return:
      type: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
      description: "this"
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setEncryptedKey(byte[])"
  id: "setEncryptedKey(byte[])"
  parent: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
  langs:
  - "java"
  name: "setEncryptedKey(byte[] encryptedKey)"
  nameWithType: "WrappedKey.setEncryptedKey(byte[] encryptedKey)"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setEncryptedKey(byte[] encryptedKey)"
  overload: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setEncryptedKey*"
  type: "Method"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Sets the encrypted content encryption key."
  syntax:
    content: " WrappedKey setEncryptedKey(byte[] encryptedKey)"
    parameters:
    - id: "encryptedKey"
      type: "byte[]"
      description: "The encrypted content encryption key."
    return:
      type: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
      description: "this"
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setKeyId(java.lang.String)"
  id: "setKeyId(java.lang.String)"
  parent: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
  langs:
  - "java"
  name: "setKeyId(String keyId)"
  nameWithType: "WrappedKey.setKeyId(String keyId)"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setKeyId(String keyId)"
  overload: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setKeyId*"
  type: "Method"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Sets the key identifier. This identifier is used to identify the key that is used to wrap/unwrap the content encryption key."
  syntax:
    content: " WrappedKey setKeyId(String keyId)"
    parameters:
    - id: "keyId"
      type: "java.lang.String"
      description: "The key identifier string."
    return:
      type: "com.azure.storage.blob.specialized.cryptography.WrappedKey"
      description: "this"
references:
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.WrappedKey*"
  name: "WrappedKey"
  nameWithType: "WrappedKey.WrappedKey"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.WrappedKey"
  package: "com.azure.storage.blob.specialized.cryptography"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getKeyId*"
  name: "getKeyId"
  nameWithType: "WrappedKey.getKeyId"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getKeyId"
  package: "com.azure.storage.blob.specialized.cryptography"
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getEncryptedKey*"
  name: "getEncryptedKey"
  nameWithType: "WrappedKey.getEncryptedKey"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getEncryptedKey"
  package: "com.azure.storage.blob.specialized.cryptography"
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getAlgorithm*"
  name: "getAlgorithm"
  nameWithType: "WrappedKey.getAlgorithm"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.getAlgorithm"
  package: "com.azure.storage.blob.specialized.cryptography"
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setKeyId*"
  name: "setKeyId"
  nameWithType: "WrappedKey.setKeyId"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setKeyId"
  package: "com.azure.storage.blob.specialized.cryptography"
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setEncryptedKey*"
  name: "setEncryptedKey"
  nameWithType: "WrappedKey.setEncryptedKey"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setEncryptedKey"
  package: "com.azure.storage.blob.specialized.cryptography"
- uid: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setAlgorithm*"
  name: "setAlgorithm"
  nameWithType: "WrappedKey.setAlgorithm"
  fullName: "com.azure.storage.blob.specialized.cryptography.WrappedKey.setAlgorithm"
  package: "com.azure.storage.blob.specialized.cryptography"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
