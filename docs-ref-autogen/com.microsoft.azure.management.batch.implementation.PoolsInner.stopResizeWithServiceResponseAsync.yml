### YamlMime:JavaMember
nameWithType: PoolsInner.stopResizeWithServiceResponseAsync
type: method
members:
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResizeWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  name: stopResizeWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.stopResizeWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.PoolStopResizeHeaders?alt=com.microsoft.azure.management.batch.PoolStopResizeHeaders&text=PoolStopResizeHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolInner, PoolStopResizeHeaders>> stopResizeWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResizeWithServiceResponseAsync(String,String,String)
uid: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResizeWithServiceResponseAsync*
fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResizeWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
name: stopResizeWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
package: com.microsoft.azure.management.batch.implementation
metadata: {}
