### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.StartTask"
fullName: "com.microsoft.azure.batch.protocol.models.StartTask"
name: "StartTask"
nameWithType: "StartTask"
summary: "A Task which is run when a Node joins a Pool in the Azure Batch service, or when the Compute Node is rebooted or reimaged. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class StartTask"
constructors:
- "com.microsoft.azure.batch.protocol.models.StartTask.StartTask()"
methods:
- "com.microsoft.azure.batch.protocol.models.StartTask.commandLine()"
- "com.microsoft.azure.batch.protocol.models.StartTask.containerSettings()"
- "com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings()"
- "com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount()"
- "com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles()"
- "com.microsoft.azure.batch.protocol.models.StartTask.userIdentity()"
- "com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess()"
- "com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine(java.lang.String)"
- "com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)"
- "com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)"
- "com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount(java.lang.Integer)"
- "com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)"
- "com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)"
- "com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess(java.lang.Boolean)"
type: "class"
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:8.0.0
