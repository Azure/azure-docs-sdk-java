### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.models.StartTask
  id: StartTask
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models
  children:
  - com.microsoft.azure.batch.protocol.models.StartTask.StartTask()
  - com.microsoft.azure.batch.protocol.models.StartTask.commandLine()
  - com.microsoft.azure.batch.protocol.models.StartTask.containerSettings()
  - com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings()
  - com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount()
  - com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles()
  - com.microsoft.azure.batch.protocol.models.StartTask.userIdentity()
  - com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess()
  - com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine(java.lang.String)
  - com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)
  - com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)
  - com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount(java.lang.Integer)
  - com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)
  - com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)
  - com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess(java.lang.Boolean)
  langs:
  - java
  name: StartTask
  nameWithType: StartTask
  fullName: com.microsoft.azure.batch.protocol.models.StartTask
  type: Class
  package: com.microsoft.azure.batch.protocol.models
  summary: A Task which is run when a Node joins a Pool in the Azure Batch service, or when the Compute Node is rebooted or reimaged. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
  syntax:
    content: public class StartTask
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.batch.protocol.models.StartTask.StartTask()
  id: StartTask()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: StartTask()
  nameWithType: StartTask.StartTask()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.StartTask()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.StartTask*
  type: Constructor
  package: com.microsoft.azure.batch.protocol.models
  syntax:
    content: public StartTask()
- uid: com.microsoft.azure.batch.protocol.models.StartTask.commandLine()
  id: commandLine()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: commandLine()
  nameWithType: StartTask.commandLine()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.commandLine()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.commandLine*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
  syntax:
    content: public String commandLine()
    return:
      type: java.lang.String
      description: the commandLine value
- uid: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings()
  id: containerSettings()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: containerSettings()
  nameWithType: StartTask.containerSettings()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get when this is specified, all directories recursively below the AZ\_BATCH\_NODE\_ROOT\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ\_BATCH\_NODE\_ROOT\_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
  syntax:
    content: public TaskContainerSettings containerSettings()
    return:
      type: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
      description: the containerSettings value
- uid: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings()
  id: environmentSettings()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: environmentSettings()
  nameWithType: StartTask.environmentSettings()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the environmentSettings value.
  syntax:
    content: public List<EnvironmentSetting> environmentSettings()
    return:
      type: java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>
      description: the environmentSettings value
- uid: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount()
  id: maxTaskRetryCount()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: maxTaskRetryCount()
  nameWithType: StartTask.maxTaskRetryCount()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit.
  syntax:
    content: public Integer maxTaskRetryCount()
    return:
      type: java.lang.Integer
      description: the maxTaskRetryCount value
- uid: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles()
  id: resourceFiles()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: resourceFiles()
  nameWithType: StartTask.resourceFiles()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get files listed under this element are located in the Task's working directory.
  syntax:
    content: public List<ResourceFile> resourceFiles()
    return:
      type: java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>
      description: the resourceFiles value
- uid: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity()
  id: userIdentity()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: userIdentity()
  nameWithType: StartTask.userIdentity()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get if omitted, the Task runs as a non-administrative user unique to the Task.
  syntax:
    content: public UserIdentity userIdentity()
    return:
      type: com.microsoft.azure.batch.protocol.models.UserIdentity
      description: the userIdentity value
- uid: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess()
  id: waitForSuccess()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: waitForSuccess()
  nameWithType: StartTask.waitForSuccess()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get if true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
  syntax:
    content: public Boolean waitForSuccess()
    return:
      type: java.lang.Boolean
      description: the waitForSuccess value
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine(java.lang.String)
  id: withCommandLine(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: withCommandLine(String commandLine)
  nameWithType: StartTask.withCommandLine(String commandLine)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine(String commandLine)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
  syntax:
    content: public StartTask withCommandLine(String commandLine)
    parameters:
    - id: commandLine
      type: java.lang.String
      description: the commandLine value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: the StartTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)
  id: withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: withContainerSettings(TaskContainerSettings containerSettings)
  nameWithType: StartTask.withContainerSettings(TaskContainerSettings containerSettings)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings(TaskContainerSettings containerSettings)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set when this is specified, all directories recursively below the AZ\_BATCH\_NODE\_ROOT\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ\_BATCH\_NODE\_ROOT\_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
  syntax:
    content: public StartTask withContainerSettings(TaskContainerSettings containerSettings)
    parameters:
    - id: containerSettings
      type: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
      description: the containerSettings value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: the StartTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)
  id: withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  nameWithType: StartTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the environmentSettings value.
  syntax:
    content: public StartTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
    parameters:
    - id: environmentSettings
      type: java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>
      description: the environmentSettings value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: the StartTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount(java.lang.Integer)
  id: withMaxTaskRetryCount(java.lang.Integer)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: withMaxTaskRetryCount(Integer maxTaskRetryCount)
  nameWithType: StartTask.withMaxTaskRetryCount(Integer maxTaskRetryCount)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount(Integer maxTaskRetryCount)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit.
  syntax:
    content: public StartTask withMaxTaskRetryCount(Integer maxTaskRetryCount)
    parameters:
    - id: maxTaskRetryCount
      type: java.lang.Integer
      description: the maxTaskRetryCount value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: the StartTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)
  id: withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: withResourceFiles(List<ResourceFile> resourceFiles)
  nameWithType: StartTask.withResourceFiles(List<ResourceFile> resourceFiles)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles(List<ResourceFile> resourceFiles)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set files listed under this element are located in the Task's working directory.
  syntax:
    content: public StartTask withResourceFiles(List<ResourceFile> resourceFiles)
    parameters:
    - id: resourceFiles
      type: java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>
      description: the resourceFiles value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: the StartTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)
  id: withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: withUserIdentity(UserIdentity userIdentity)
  nameWithType: StartTask.withUserIdentity(UserIdentity userIdentity)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity(UserIdentity userIdentity)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set if omitted, the Task runs as a non-administrative user unique to the Task.
  syntax:
    content: public StartTask withUserIdentity(UserIdentity userIdentity)
    parameters:
    - id: userIdentity
      type: com.microsoft.azure.batch.protocol.models.UserIdentity
      description: the userIdentity value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: the StartTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess(java.lang.Boolean)
  id: withWaitForSuccess(java.lang.Boolean)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  langs:
  - java
  name: withWaitForSuccess(Boolean waitForSuccess)
  nameWithType: StartTask.withWaitForSuccess(Boolean waitForSuccess)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess(Boolean waitForSuccess)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set if true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
  syntax:
    content: public StartTask withWaitForSuccess(Boolean waitForSuccess)
    parameters:
    - id: waitForSuccess
      type: java.lang.Boolean
      description: the waitForSuccess value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: the StartTask object itself.
references:
- uid: com.microsoft.azure.batch.protocol.models.StartTask.StartTask*
  name: StartTask
  nameWithType: StartTask.StartTask
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.StartTask
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.batch.protocol.models.StartTask.commandLine*
  name: commandLine
  nameWithType: StartTask.commandLine
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.commandLine
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine*
  name: withCommandLine
  nameWithType: StartTask.withCommandLine
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
  name: TaskContainerSettings
  nameWithType: TaskContainerSettings
  fullName: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
- uid: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings*
  name: containerSettings
  nameWithType: StartTask.containerSettings
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings*
  name: withContainerSettings
  nameWithType: StartTask.withContainerSettings
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.ResourceFile
    name: ResourceFile
    fullName: com.microsoft.azure.batch.protocol.models.ResourceFile
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles*
  name: resourceFiles
  nameWithType: StartTask.resourceFiles
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles*
  name: withResourceFiles
  nameWithType: StartTask.withResourceFiles
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles
  package: com.microsoft.azure.batch.protocol.models
- uid: java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
    name: EnvironmentSetting
    fullName: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings*
  name: environmentSettings
  nameWithType: StartTask.environmentSettings
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings*
  name: withEnvironmentSettings
  nameWithType: StartTask.withEnvironmentSettings
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.UserIdentity
  name: UserIdentity
  nameWithType: UserIdentity
  fullName: com.microsoft.azure.batch.protocol.models.UserIdentity
- uid: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity*
  name: userIdentity
  nameWithType: StartTask.userIdentity
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity*
  name: withUserIdentity
  nameWithType: StartTask.withUserIdentity
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount*
  name: maxTaskRetryCount
  nameWithType: StartTask.maxTaskRetryCount
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount*
  name: withMaxTaskRetryCount
  nameWithType: StartTask.withMaxTaskRetryCount
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess*
  name: waitForSuccess
  nameWithType: StartTask.waitForSuccess
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess*
  name: withWaitForSuccess
  nameWithType: StartTask.withWaitForSuccess
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.microsoft.azure.batch.protocol.models.ResourceFile
  name: ResourceFile
  nameWithType: ResourceFile
  fullName: com.microsoft.azure.batch.protocol.models.ResourceFile
- uid: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
  name: EnvironmentSetting
  nameWithType: EnvironmentSetting
  fullName: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
