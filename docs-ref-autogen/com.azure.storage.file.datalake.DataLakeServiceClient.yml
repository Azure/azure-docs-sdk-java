### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.datalake.DataLakeServiceClient
  id: DataLakeServiceClient
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake
  children:
  - com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystemWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType,com.azure.core.util.Context)
  - com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystem(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)
  - com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  - com.azure.storage.file.datalake.DataLakeServiceClient.getAccountName()
  - com.azure.storage.file.datalake.DataLakeServiceClient.getAccountUrl()
  - com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeServiceClient.getHttpPipeline()
  - com.azure.storage.file.datalake.DataLakeServiceClient.getServiceVersion()
  - com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)
  - com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems()
  - com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions,java.time.Duration)
  langs:
  - java
  name: DataLakeServiceClient
  nameWithType: DataLakeServiceClient
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient
  type: Class
  package: com.azure.storage.file.datalake
  summary: >-
    Client to a storage account. It may only be instantiated through a <xref uid="com.azure.storage.file.datalake.DataLakeServiceClientBuilder" data-throw-if-not-resolved="false">DataLakeServiceClientBuilder</xref>. This class does not hold any state about a particular storage account but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to file systems, files and directories.


    This client contains operations on a data lake service account. Operations on a file system are available on <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemClient" data-throw-if-not-resolved="false">DataLakeFileSystemClient</xref> through <xref uid="com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient(java.lang.String)" data-throw-if-not-resolved="false">#getFileSystemClient(String)</xref>, and operations on a file or directory are available on <xref uid="com.azure.storage.file.datalake.DataLakeFileClient" data-throw-if-not-resolved="false">DataLakeFileClient</xref> and <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryClient" data-throw-if-not-resolved="false">DataLakeDirectoryClient</xref> respectively.
  syntax:
    content: public class DataLakeServiceClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.DataLakeServiceClient(com.azure.storage.file.datalake.DataLakeServiceAsyncClient,com.azure.storage.blob.BlobServiceClient)
  id: DataLakeServiceClient(com.azure.storage.file.datalake.DataLakeServiceAsyncClient,com.azure.storage.blob.BlobServiceClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: DataLakeServiceClient(DataLakeServiceAsyncClient dataLakeServiceAsyncClient, BlobServiceClient blobServiceClient)
  nameWithType: DataLakeServiceClient.DataLakeServiceClient(DataLakeServiceAsyncClient dataLakeServiceAsyncClient, BlobServiceClient blobServiceClient)
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.DataLakeServiceClient(DataLakeServiceAsyncClient dataLakeServiceAsyncClient, BlobServiceClient blobServiceClient)
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.DataLakeServiceClient*
  type: Constructor
  package: com.azure.storage.file.datalake
  summary: Package-private constructor for use by <xref uid="com.azure.storage.file.datalake.DataLakeServiceClientBuilder" data-throw-if-not-resolved="false">DataLakeServiceClientBuilder</xref>.
  syntax:
    content: " DataLakeServiceClient(DataLakeServiceAsyncClient dataLakeServiceAsyncClient, BlobServiceClient blobServiceClient)"
    parameters:
    - id: dataLakeServiceAsyncClient
      type: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
      description: the async data lake service client.
    - id: blobServiceClient
      type: com.azure.storage.blob.BlobServiceClient
      description: the sync blob service client.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem(java.lang.String)
  id: createFileSystem(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: createFileSystem(String fileSystemName)
  nameWithType: DataLakeServiceClient.createFileSystem(String fileSystemName)
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem(String fileSystemName)
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    DataLakeFileSystemClient dataLakeFileSystemClient = client.createFileSystem("fileSystemName");

    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container
  syntax:
    content: public DataLakeFileSystemClient createFileSystem(String fileSystemName)
    parameters:
    - id: fileSystemName
      type: java.lang.String
      description: Name of the file system to create
    return:
      type: com.azure.storage.file.datalake.DataLakeFileSystemClient
      description: The <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemClient" data-throw-if-not-resolved="false">DataLakeFileSystemClient</xref> used to interact with the file system created.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystemWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType,com.azure.core.util.Context)
  id: createFileSystemWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType, Context context)
  nameWithType: DataLakeServiceClient.createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType, Context context)
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType, Context context)
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystemWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Context context = new Context(\"Key\", \"Value\");\n \n DataLakeFileSystemClient dataLakeFileSystemClient = client.createFileSystemWithResponse(\n     \"fileSystemName\",\n     metadata,\n     PublicAccessType.CONTAINER,\n     context).getValue();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  syntax:
    content: public Response<DataLakeFileSystemClient> createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType, Context context)
    parameters:
    - id: fileSystemName
      type: java.lang.String
      description: Name of the file system to create
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the file system.
    - id: accessType
      type: com.azure.storage.file.datalake.models.PublicAccessType
      description: >-
        Specifies how the data in this file system is available to the public. See the
         x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeFileSystemClient>
      description: >-
        A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemClient" data-throw-if-not-resolved="false">DataLakeFileSystemClient</xref>
         used to interact with the file system created.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystem(java.lang.String)
  id: deleteFileSystem(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: deleteFileSystem(String fileSystemName)
  nameWithType: DataLakeServiceClient.deleteFileSystem(String fileSystemName)
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystem(String fileSystemName)
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystem*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Deletes the specified file system in the storage account. If the file system doesn't exist the operation fails. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    try {
         client.deleteFileSystem("fileSystemName");
         System.out.printf("Delete file system completed with status %n");
     } catch (UnsupportedOperationException error) {
         System.out.printf("Delete file system failed: %s%n", error);
     }
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
  syntax:
    content: public void deleteFileSystem(String fileSystemName)
    parameters:
    - id: fileSystemName
      type: java.lang.String
      description: Name of the file system to delete
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)
  id: deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions, Context context)
  nameWithType: DataLakeServiceClient.deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions, Context context)
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions, Context context)
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystemWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Deletes the specified file system in the storage account. If the file system doesn't exist the operation fails. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    Context context = new Context("Key", "Value");
     System.out.printf("Delete file system completed with status %d%n",
         client.deleteFileSystemWithResponse("fileSystemName", new DataLakeRequestConditions(), context)
             .getStatusCode());
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
  syntax:
    content: public Response<Void> deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions, Context context)
    parameters:
    - id: fileSystemName
      type: java.lang.String
      description: Name of the file system to delete
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  id: generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  nameWithType: DataLakeServiceClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\">AccountSasSignatureValues</xref>. Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\">AccountSasSignatureValues</xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to file systems and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n \n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n \n // Client must be authenticated via StorageSharedKeyCredential\n String sas = client.generateAccountSas(sasValues);\n```"
  syntax:
    content: public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
    parameters:
    - id: accountSasSignatureValues
      type: com.azure.storage.common.sas.AccountSasSignatureValues
      description: <xref uid="com.azure.storage.common.sas.AccountSasSignatureValues" data-throw-if-not-resolved="false">AccountSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: getAccountName()
  nameWithType: DataLakeServiceClient.getAccountName()
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getAccountName()
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.getAccountName*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getAccountUrl()
  id: getAccountUrl()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: getAccountUrl()
  nameWithType: DataLakeServiceClient.getAccountUrl()
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getAccountUrl()
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.getAccountUrl*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the URL of the storage account represented by this client.
  syntax:
    content: public String getAccountUrl()
    return:
      type: java.lang.String
      description: the URL.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient(java.lang.String)
  id: getFileSystemClient(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: getFileSystemClient(String fileSystemName)
  nameWithType: DataLakeServiceClient.getFileSystemClient(String fileSystemName)
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient(String fileSystemName)
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Initializes a <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemClient" data-throw-if-not-resolved="false">DataLakeFileSystemClient</xref> object pointing to the specified file system. This method does not create a file system. It simply constructs the URL to the file system and offers access to methods relevant to file systems.


    **Code Samples**


    ```java

    DataLakeFileSystemClient dataLakeFileSystemClient = client.getFileSystemClient("fileSystemName");

    ```
  syntax:
    content: public DataLakeFileSystemClient getFileSystemClient(String fileSystemName)
    parameters:
    - id: fileSystemName
      type: java.lang.String
      description: The name of the file system to point to.
    return:
      type: com.azure.storage.file.datalake.DataLakeFileSystemClient
      description: A <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemClient" data-throw-if-not-resolved="false">DataLakeFileSystemClient</xref> object pointing to the specified file system
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: DataLakeServiceClient.getHttpPipeline()
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getHttpPipeline()
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: DataLakeServiceClient.getServiceVersion()
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getServiceVersion()
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the service version the client is using.
  syntax:
    content: public DataLakeServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.datalake.DataLakeServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)
  id: getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
  nameWithType: DataLakeServiceClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Gets a user delegation key for use with this account's data lake storage. Note: This method call is only valid when using <xref uid="" data-throw-if-not-resolved="false">TokenCredential</xref> in this object's <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref>.


    **Code Samples**


    ```java

    System.out.printf("User delegation key: %s%n",
         client.getUserDelegationKey(delegationKeyStartTime, delegationKeyExpiryTime));
    ```
  syntax:
    content: public UserDelegationKey getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
    parameters:
    - id: start
      type: java.time.OffsetDateTime
      description: Start time for the key's validity. Null indicates immediate start.
    - id: expiry
      type: java.time.OffsetDateTime
      description: Expiration of the key's validity.
    return:
      type: com.azure.storage.file.datalake.models.UserDelegationKey
      description: The user delegation key.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.Duration,com.azure.core.util.Context)
  id: getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)
  nameWithType: DataLakeServiceClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKeyWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Gets a user delegation key for use with this account's data lake storage. Note: This method call is only valid when using <xref uid="" data-throw-if-not-resolved="false">TokenCredential</xref> in this object's <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref>.


    **Code Samples**


    ```java

    System.out.printf("User delegation key: %s%n",
         client.getUserDelegationKeyWithResponse(delegationKeyStartTime, delegationKeyExpiryTime, timeout, context));
    ```
  syntax:
    content: public Response<UserDelegationKey> getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)
    parameters:
    - id: start
      type: java.time.OffsetDateTime
      description: Start time for the key's validity. Null indicates immediate start.
    - id: expiry
      type: java.time.OffsetDateTime
      description: Expiration of the key's validity.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.UserDelegationKey>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the user delegation key.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems()
  id: listFileSystems()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: listFileSystems()
  nameWithType: DataLakeServiceClient.listFileSystems()
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems()
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Returns a lazy loaded list of file systems in this account. The returned <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> can be consumed while new items are automatically retrieved as needed. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.listFileSystems().forEach(fileSystem -> System.out.printf("Name: %s%n", fileSystem.getName()));

    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2
  syntax:
    content: public PagedIterable<FileSystemItem> listFileSystems()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.file.datalake.models.FileSystemItem>
      description: The list of file systems.
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions,java.time.Duration)
  id: listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions,java.time.Duration)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeServiceClient
  langs:
  - java
  name: listFileSystems(ListFileSystemsOptions options, Duration timeout)
  nameWithType: DataLakeServiceClient.listFileSystems(ListFileSystemsOptions options, Duration timeout)
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems(ListFileSystemsOptions options, Duration timeout)
  overload: com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Returns a lazy loaded list of file systems in this account. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> can be consumed while new items are automatically retrieved as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListFileSystemsOptions options = new ListFileSystemsOptions()\n     .setPrefix(\"filSystemNamePrefixToMatch\")\n     .setDetails(new FileSystemListDetails().setRetrieveMetadata(true));\n \n client.listFileSystems(options, timeout).forEach(fileSystem -> System.out.printf(\"Name: %s%n\",\n     fileSystem.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2"
  syntax:
    content: public PagedIterable<FileSystemItem> listFileSystems(ListFileSystemsOptions options, Duration timeout)
    parameters:
    - id: options
      type: com.azure.storage.file.datalake.models.ListFileSystemsOptions
      description: A <xref uid="com.azure.storage.file.datalake.models.ListFileSystemsOptions" data-throw-if-not-resolved="false">ListFileSystemsOptions</xref> which specifies what data should be returned by the service.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.file.datalake.models.FileSystemItem>
      description: The list of file systems.
references:
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  name: DataLakeServiceAsyncClient
  nameWithType: DataLakeServiceAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
- uid: com.azure.storage.blob.BlobServiceClient
  spec.java:
  - uid: com.azure.storage.blob.BlobServiceClient
    name: BlobServiceClient
    fullName: com.azure.storage.blob.BlobServiceClient
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.DataLakeServiceClient*
  name: DataLakeServiceClient
  nameWithType: DataLakeServiceClient.DataLakeServiceClient
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.DataLakeServiceClient
  package: com.azure.storage.file.datalake
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.datalake.DataLakeFileSystemClient
  name: DataLakeFileSystemClient
  nameWithType: DataLakeFileSystemClient
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemClient
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient*
  name: getFileSystemClient
  nameWithType: DataLakeServiceClient.getFileSystemClient
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient
  package: com.azure.storage.file.datalake
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: DataLakeServiceClient.getHttpPipeline
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getHttpPipeline
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeServiceVersion
  name: DataLakeServiceVersion
  nameWithType: DataLakeServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakeServiceVersion
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: DataLakeServiceClient.getServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getServiceVersion
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem*
  name: createFileSystem
  nameWithType: DataLakeServiceClient.createFileSystem
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem
  package: com.azure.storage.file.datalake
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.models.PublicAccessType
  name: PublicAccessType
  nameWithType: PublicAccessType
  fullName: com.azure.storage.file.datalake.models.PublicAccessType
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeFileSystemClient>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeFileSystemClient
    name: DataLakeFileSystemClient
    fullName: com.azure.storage.file.datalake.DataLakeFileSystemClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystemWithResponse*
  name: createFileSystemWithResponse
  nameWithType: DataLakeServiceClient.createFileSystemWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystemWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystem*
  name: deleteFileSystem
  nameWithType: DataLakeServiceClient.deleteFileSystem
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystem
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.DataLakeRequestConditions
  name: DataLakeRequestConditions
  nameWithType: DataLakeRequestConditions
  fullName: com.azure.storage.file.datalake.models.DataLakeRequestConditions
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystemWithResponse*
  name: deleteFileSystemWithResponse
  nameWithType: DataLakeServiceClient.deleteFileSystemWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystemWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getAccountUrl*
  name: getAccountUrl
  nameWithType: DataLakeServiceClient.getAccountUrl
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getAccountUrl
  package: com.azure.storage.file.datalake
- uid: com.azure.core.http.rest.PagedIterable<com.azure.storage.file.datalake.models.FileSystemItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.FileSystemItem
    name: FileSystemItem
    fullName: com.azure.storage.file.datalake.models.FileSystemItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems*
  name: listFileSystems
  nameWithType: DataLakeServiceClient.listFileSystems
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.ListFileSystemsOptions
  name: ListFileSystemsOptions
  nameWithType: ListFileSystemsOptions
  fullName: com.azure.storage.file.datalake.models.ListFileSystemsOptions
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: java.time.OffsetDateTime
  spec.java:
  - uid: java.time.OffsetDateTime
    name: OffsetDateTime
    fullName: java.time.OffsetDateTime
- uid: com.azure.storage.file.datalake.models.UserDelegationKey
  name: UserDelegationKey
  nameWithType: UserDelegationKey
  fullName: com.azure.storage.file.datalake.models.UserDelegationKey
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey*
  name: getUserDelegationKey
  nameWithType: DataLakeServiceClient.getUserDelegationKey
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey
  package: com.azure.storage.file.datalake
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.UserDelegationKey>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.UserDelegationKey
    name: UserDelegationKey
    fullName: com.azure.storage.file.datalake.models.UserDelegationKey
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKeyWithResponse*
  name: getUserDelegationKeyWithResponse
  nameWithType: DataLakeServiceClient.getUserDelegationKeyWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKeyWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.getAccountName*
  name: getAccountName
  nameWithType: DataLakeServiceClient.getAccountName
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.getAccountName
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.common.sas.AccountSasSignatureValues
  spec.java:
  - uid: com.azure.storage.common.sas.AccountSasSignatureValues
    name: AccountSasSignatureValues
    fullName: com.azure.storage.common.sas.AccountSasSignatureValues
- uid: com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas*
  name: generateAccountSas
  nameWithType: DataLakeServiceClient.generateAccountSas
  fullName: com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas
  package: com.azure.storage.file.datalake
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.storage.file.datalake.models.FileSystemItem
  name: FileSystemItem
  nameWithType: FileSystemItem
  fullName: com.azure.storage.file.datalake.models.FileSystemItem
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
