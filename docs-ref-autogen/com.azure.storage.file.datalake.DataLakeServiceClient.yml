### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakeServiceClient"
fullName: "com.azure.storage.file.datalake.DataLakeServiceClient"
name: "DataLakeServiceClient"
nameWithType: "DataLakeServiceClient"
summary: "Client to a storage account. It may only be instantiated through a <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceClientBuilder\" data-throw-if-not-resolved=\"false\">DataLakeServiceClientBuilder</xref>. This class does not hold any state about a particular storage account but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to file systems, files and directories.\n\nThis client contains operations on a data lake service account. Operations on a file system are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\">DataLakeFileSystemClient</xref> through <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient(java.lang.String)\" data-throw-if-not-resolved=\"false\">#getFileSystemClient(String)</xref>, and operations on a file or directory are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\">DataLakeFileClient</xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\">DataLakeDirectoryClient</xref> respectively."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DataLakeServiceClient"
methods:
- "com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystemWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType,com.azure.core.util.Context)"
- "com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystem(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
- "com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)"
- "com.azure.storage.file.datalake.DataLakeServiceClient.getAccountName()"
- "com.azure.storage.file.datalake.DataLakeServiceClient.getAccountUrl()"
- "com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeServiceClient.getHttpPipeline()"
- "com.azure.storage.file.datalake.DataLakeServiceClient.getServiceVersion()"
- "com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)"
- "com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems()"
- "com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions,java.time.Duration)"
type: "class"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.2.0
