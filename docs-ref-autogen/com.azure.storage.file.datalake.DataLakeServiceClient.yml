### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakeServiceClient"
fullName: "com.azure.storage.file.datalake.DataLakeServiceClient"
name: "DataLakeServiceClient"
nameWithType: "DataLakeServiceClient"
summary: "Client to a storage account."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DataLakeServiceClient"
methods:
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystem(String fileSystemName)"
  name: "createFileSystem(String fileSystemName)"
  nameWithType: "DataLakeServiceClient.createFileSystem(String fileSystemName)"
  summary: "Creates a new file system within a storage account."
  parameters:
  - description: "Name of the file system to create"
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileSystemClient createFileSystem(String fileSystemName)"
  desc: "Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeFileSystemClient dataLakeFileSystemClient = client.createFileSystem(\"fileSystemName\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref> used to interact with the file system created."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemClient&text=DataLakeFileSystemClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystemWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType, Context context)"
  name: "createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType, Context context)"
  nameWithType: "DataLakeServiceClient.createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType, Context context)"
  summary: "Creates a new file system within a storage account."
  parameters:
  - description: "Name of the file system to create"
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the file system. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies how the data in this file system is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PublicAccessType?alt=com.azure.storage.file.datalake.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataLakeFileSystemClient> createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType, Context context)"
  desc: "Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Context context = new Context(\"Key\", \"Value\");\n\n DataLakeFileSystemClient dataLakeFileSystemClient = client.createFileSystemWithResponse(\n     \"fileSystemName\",\n     metadata,\n     PublicAccessType.CONTAINER,\n     context).getValue();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref>\n used to interact with the file system created."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemClient&text=DataLakeFileSystemClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystem(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystem(String fileSystemName)"
  name: "deleteFileSystem(String fileSystemName)"
  nameWithType: "DataLakeServiceClient.deleteFileSystem(String fileSystemName)"
  summary: "Deletes the specified file system in the storage account."
  parameters:
  - description: "Name of the file system to delete"
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteFileSystem(String fileSystemName)"
  desc: "Deletes the specified file system in the storage account. If the file system doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\ntry {\n     client.deleteFileSystem(\"fileSystemName\");\n     System.out.printf(\"Delete file system completed with status %n\");\n } catch (UnsupportedOperationException error) {\n     System.out.printf(\"Delete file system failed: %s%n\", error);\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions, Context context)"
  name: "deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions, Context context)"
  nameWithType: "DataLakeServiceClient.deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions, Context context)"
  summary: "Deletes the specified file system in the storage account."
  parameters:
  - description: "Name of the file system to delete"
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions, Context context)"
  desc: "Deletes the specified file system in the storage account. If the file system doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n System.out.printf(\"Delete file system completed with status %d%n\",\n     client.deleteFileSystemWithResponse(\"fileSystemName\", new DataLakeRequestConditions(), context)\n         .getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A response containing status code and HTTP headers"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  name: "generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  nameWithType: "DataLakeServiceClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>"
    name: "accountSasSignatureValues"
    type: "<xref href=\"com.azure.storage.common.sas.AccountSasSignatureValues?alt=com.azure.storage.common.sas.AccountSasSignatureValues&text=AccountSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  desc: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>.\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to file systems and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n\n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n\n // Client must be authenticated via StorageSharedKeyCredential\n String sas = client.generateAccountSas(sasValues);\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  name: "generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  nameWithType: "DataLakeServiceClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>"
    name: "accountSasSignatureValues"
    type: "<xref href=\"com.azure.storage.common.sas.AccountSasSignatureValues?alt=com.azure.storage.common.sas.AccountSasSignatureValues&text=AccountSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  desc: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>.\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to file systems and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n\n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n\n // Client must be authenticated via StorageSharedKeyCredential\n String sas = client.generateAccountSas(sasValues, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.getAccountName()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "DataLakeServiceClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.getAccountUrl()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.getAccountUrl()"
  name: "getAccountUrl()"
  nameWithType: "DataLakeServiceClient.getAccountUrl()"
  summary: "Gets the URL of the storage account represented by this client."
  syntax: "public String getAccountUrl()"
  desc: "Gets the URL of the storage account represented by this client."
  returns:
    description: "the URL."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient(String fileSystemName)"
  name: "getFileSystemClient(String fileSystemName)"
  nameWithType: "DataLakeServiceClient.getFileSystemClient(String fileSystemName)"
  summary: "Initializes a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref> object pointing to the specified file system."
  parameters:
  - description: "The name of the file system to point to."
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileSystemClient getFileSystemClient(String fileSystemName)"
  desc: "Initializes a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref> object pointing to the specified file system. This method does not create a file system. It simply constructs the URL to the file system and offers access to methods relevant to file systems.\n\n**Code Samples**\n\n```java\nDataLakeFileSystemClient dataLakeFileSystemClient = client.getFileSystemClient(\"fileSystemName\");\n```"
  returns:
    description: "A <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref> object pointing to the specified file system"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemClient&text=DataLakeFileSystemClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.getHttpPipeline()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "DataLakeServiceClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.getProperties()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.getProperties()"
  name: "getProperties()"
  nameWithType: "DataLakeServiceClient.getProperties()"
  summary: "Returns the resource's metadata and properties."
  syntax: "public DataLakeServiceProperties getProperties()"
  desc: "Returns the resource's metadata and properties.\n\n**Code Samples**\n\n```java\nDataLakeServiceProperties properties = client.getProperties();\n\n System.out.printf(\"Hour metrics enabled: %b, Minute metrics enabled: %b%n\",\n     properties.getHourMetrics().isEnabled(),\n     properties.getMinuteMetrics().isEnabled());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-properties"
  returns:
    description: "The resource properties and metadata."
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeServiceProperties?alt=com.azure.storage.file.datalake.models.DataLakeServiceProperties&text=DataLakeServiceProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.getPropertiesWithResponse(Duration timeout, Context context)"
  name: "getPropertiesWithResponse(Duration timeout, Context context)"
  nameWithType: "DataLakeServiceClient.getPropertiesWithResponse(Duration timeout, Context context)"
  summary: "Returns the resource's metadata and properties."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataLakeServiceProperties> getPropertiesWithResponse(Duration timeout, Context context)"
  desc: "Returns the resource's metadata and properties.\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n properties = client.getPropertiesWithResponse(timeout, context).getValue();\n\n System.out.printf(\"Hour metrics enabled: %b, Minute metrics enabled: %b%n\",\n     properties.getHourMetrics().isEnabled(),\n     properties.getMinuteMetrics().isEnabled());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-properties"
  returns:
    description: "A response containing the resource properties and metadata."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.DataLakeServiceProperties?alt=com.azure.storage.file.datalake.models.DataLakeServiceProperties&text=DataLakeServiceProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.getServiceVersion()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "DataLakeServiceClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public DataLakeServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeServiceVersion?alt=com.azure.storage.file.datalake.DataLakeServiceVersion&text=DataLakeServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  name: "getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  nameWithType: "DataLakeServiceClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  summary: "Gets a user delegation key for use with this account's data lake storage."
  parameters:
  - description: "Start time for the key's validity. Null indicates immediate start."
    name: "start"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "Expiration of the key's validity."
    name: "expiry"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public UserDelegationKey getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  desc: "Gets a user delegation key for use with this account's data lake storage. Note: This method call is only valid when using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> in this object's <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref>.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"User delegation key: %s%n\",\n     client.getUserDelegationKey(delegationKeyStartTime, delegationKeyExpiryTime));\n```"
  returns:
    description: "The user delegation key."
    type: "<xref href=\"com.azure.storage.file.datalake.models.UserDelegationKey?alt=com.azure.storage.file.datalake.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)"
  name: "getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)"
  nameWithType: "DataLakeServiceClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)"
  summary: "Gets a user delegation key for use with this account's data lake storage."
  parameters:
  - description: "Start time for the key's validity. Null indicates immediate start."
    name: "start"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "Expiration of the key's validity."
    name: "expiry"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<UserDelegationKey> getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)"
  desc: "Gets a user delegation key for use with this account's data lake storage. Note: This method call is only valid when using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> in this object's <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref>.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"User delegation key: %s%n\",\n     client.getUserDelegationKeyWithResponse(delegationKeyStartTime, delegationKeyExpiryTime, timeout, context));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the user delegation key."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.UserDelegationKey?alt=com.azure.storage.file.datalake.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems()"
  name: "listFileSystems()"
  nameWithType: "DataLakeServiceClient.listFileSystems()"
  summary: "Returns a lazy loaded list of file systems in this account."
  syntax: "public PagedIterable<FileSystemItem> listFileSystems()"
  desc: "Returns a lazy loaded list of file systems in this account. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed while new items are automatically retrieved as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listFileSystems().forEach(fileSystem -> System.out.printf(\"Name: %s%n\", fileSystem.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2"
  returns:
    description: "The list of file systems."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.FileSystemItem?alt=com.azure.storage.file.datalake.models.FileSystemItem&text=FileSystemItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions,java.time.Duration)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.listFileSystems(ListFileSystemsOptions options, Duration timeout)"
  name: "listFileSystems(ListFileSystemsOptions options, Duration timeout)"
  nameWithType: "DataLakeServiceClient.listFileSystems(ListFileSystemsOptions options, Duration timeout)"
  summary: "Returns a lazy loaded list of file systems in this account."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.file.datalake.models.ListFileSystemsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListFileSystemsOptions\"></xref> which specifies what data should be returned by the service.\n If iterating by page, the page size passed to byPage methods such as\n <xref uid=\"com.azure.core.http.rest.PagedIterable.iterableByPage*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable#iterableByPage(int)\"></xref> will be preferred over the value set on these options."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.models.ListFileSystemsOptions?alt=com.azure.storage.file.datalake.models.ListFileSystemsOptions&text=ListFileSystemsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<FileSystemItem> listFileSystems(ListFileSystemsOptions options, Duration timeout)"
  desc: "Returns a lazy loaded list of file systems in this account. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed while new items are automatically retrieved as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListFileSystemsOptions options = new ListFileSystemsOptions()\n     .setPrefix(\"filSystemNamePrefixToMatch\")\n     .setDetails(new FileSystemListDetails().setRetrieveMetadata(true));\n\n client.listFileSystems(options, timeout).forEach(fileSystem -> System.out.printf(\"Name: %s%n\",\n     fileSystem.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2"
  returns:
    description: "The list of file systems."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.FileSystemItem?alt=com.azure.storage.file.datalake.models.FileSystemItem&text=FileSystemItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.setProperties(com.azure.storage.file.datalake.models.DataLakeServiceProperties)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.setProperties(DataLakeServiceProperties properties)"
  name: "setProperties(DataLakeServiceProperties properties)"
  nameWithType: "DataLakeServiceClient.setProperties(DataLakeServiceProperties properties)"
  summary: "Sets properties for a storage account's Data<wbr>Lake service endpoint."
  parameters:
  - description: "Configures the service."
    name: "properties"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeServiceProperties?alt=com.azure.storage.file.datalake.models.DataLakeServiceProperties&text=DataLakeServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setProperties(DataLakeServiceProperties properties)"
  desc: "Sets properties for a storage account's DataLake service endpoint. For more information, see the [Azure Docs][]. Note that setting the default service version has no effect when using this client because this client explicitly sets the version header on each request, overriding the default.\n\nThis method checks to ensure the properties being sent follow the specifications indicated in the Azure Docs. If CORS policies are set, CORS parameters that are not set default to the empty string.\n\n**Code Samples**\n\n```java\nDataLakeRetentionPolicy loggingRetentionPolicy = new DataLakeRetentionPolicy().setEnabled(true).setDays(3);\n DataLakeRetentionPolicy metricsRetentionPolicy = new DataLakeRetentionPolicy().setEnabled(true).setDays(1);\n\n DataLakeServiceProperties properties = new DataLakeServiceProperties()\n     .setLogging(new DataLakeAnalyticsLogging()\n         .setWrite(true)\n         .setDelete(true)\n         .setRetentionPolicy(loggingRetentionPolicy))\n     .setHourMetrics(new DataLakeMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy))\n     .setMinuteMetrics(new DataLakeMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy));\n\n try {\n     client.setProperties(properties);\n     System.out.printf(\"Setting properties completed%n\");\n } catch (UnsupportedOperationException error) {\n     System.out.printf(\"Setting properties failed: %s%n\", error);\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-service-properties"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.setPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeServiceProperties,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.setPropertiesWithResponse(DataLakeServiceProperties properties, Duration timeout, Context context)"
  name: "setPropertiesWithResponse(DataLakeServiceProperties properties, Duration timeout, Context context)"
  nameWithType: "DataLakeServiceClient.setPropertiesWithResponse(DataLakeServiceProperties properties, Duration timeout, Context context)"
  summary: "Sets properties for a storage account's Data<wbr>Lake service endpoint."
  parameters:
  - description: "Configures the service."
    name: "properties"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeServiceProperties?alt=com.azure.storage.file.datalake.models.DataLakeServiceProperties&text=DataLakeServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> setPropertiesWithResponse(DataLakeServiceProperties properties, Duration timeout, Context context)"
  desc: "Sets properties for a storage account's DataLake service endpoint. For more information, see the [Azure Docs][]. Note that setting the default service version has no effect when using this client because this client explicitly sets the version header on each request, overriding the default.\n\nThis method checks to ensure the properties being sent follow the specifications indicated in the Azure Docs. If CORS policies are set, CORS parameters that are not set default to the empty string.\n\n**Code Samples**\n\n```java\nloggingRetentionPolicy = new DataLakeRetentionPolicy().setEnabled(true).setDays(3);\n metricsRetentionPolicy = new DataLakeRetentionPolicy().setEnabled(true).setDays(1);\n\n properties = new DataLakeServiceProperties()\n     .setLogging(new DataLakeAnalyticsLogging()\n         .setWrite(true)\n         .setDelete(true)\n         .setRetentionPolicy(loggingRetentionPolicy))\n     .setHourMetrics(new DataLakeMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy))\n     .setMinuteMetrics(new DataLakeMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy));\n\n Context context = new Context(\"Key\", \"Value\");\n\n System.out.printf(\"Setting properties completed with status %d%n\",\n     client.setPropertiesWithResponse(properties, timeout, context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-service-properties"
  returns:
    description: "The storage account properties."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.undeleteFileSystem(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.undeleteFileSystem(String deletedFileSystemName, String deletedFileSystemVersion)"
  name: "undeleteFileSystem(String deletedFileSystemName, String deletedFileSystemVersion)"
  nameWithType: "DataLakeServiceClient.undeleteFileSystem(String deletedFileSystemName, String deletedFileSystemVersion)"
  summary: "Restores a previously deleted file system."
  parameters:
  - description: "The name of the previously deleted file system."
    name: "deletedFileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the previously deleted file system."
    name: "deletedFileSystemVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileSystemClient undeleteFileSystem(String deletedFileSystemName, String deletedFileSystemVersion)"
  desc: "Restores a previously deleted file system. If the file system associated with provided `deletedFileSystemName` already exists, this call will result in a 409 (conflict). This API is only functional if Container Soft Delete is enabled for the storage account associated with the file system.\n\n**Code Samples**\n\n```java\nListFileSystemsOptions listFileSystemsOptions = new ListFileSystemsOptions();\n listFileSystemsOptions.getDetails().setRetrieveDeleted(true);\n client.listFileSystems(listFileSystemsOptions, null).forEach(\n     deletedFileSystem -> {\n         DataLakeFileSystemClient fileSystemClient = client.undeleteFileSystem(\n             deletedFileSystem.getName(), deletedFileSystem.getVersion());\n     }\n );\n```"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref> used to interact with the restored file system."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemClient&text=DataLakeFileSystemClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceClient.undeleteFileSystemWithResponse(com.azure.storage.file.datalake.options.FileSystemUndeleteOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceClient.undeleteFileSystemWithResponse(FileSystemUndeleteOptions options, Duration timeout, Context context)"
  name: "undeleteFileSystemWithResponse(FileSystemUndeleteOptions options, Duration timeout, Context context)"
  nameWithType: "DataLakeServiceClient.undeleteFileSystemWithResponse(FileSystemUndeleteOptions options, Duration timeout, Context context)"
  summary: "Restores a previously deleted file system."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.FileSystemUndeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileSystemUndeleteOptions\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.FileSystemUndeleteOptions?alt=com.azure.storage.file.datalake.options.FileSystemUndeleteOptions&text=FileSystemUndeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataLakeFileSystemClient> undeleteFileSystemWithResponse(FileSystemUndeleteOptions options, Duration timeout, Context context)"
  desc: "Restores a previously deleted file system. The restored file system will be renamed to the `destinationFileSystemName` if provided in `options`. Otherwise `deletedFileSystemName` is used as destination file system name. If the file system associated with provided `destinationFileSystemName` already exists, this call will result in a 409 (conflict). This API is only functional if Container Soft Delete is enabled for the storage account associated with the file system.\n\n**Code Samples**\n\n```java\nListFileSystemsOptions listFileSystemsOptions = new ListFileSystemsOptions();\n listFileSystemsOptions.getDetails().setRetrieveDeleted(true);\n client.listFileSystems(listFileSystemsOptions, null).forEach(\n     deletedFileSystem -> {\n         DataLakeFileSystemClient fileSystemClient = client.undeleteFileSystemWithResponse(\n             new FileSystemUndeleteOptions(deletedFileSystem.getName(), deletedFileSystem.getVersion()), timeout,\n             context).getValue();\n     }\n );\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref>\n used to interact with the restored file system."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemClient&text=DataLakeFileSystemClient\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Client to a storage account. It may only be instantiated through a <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceClientBuilder\"></xref>. This class does not hold any state about a particular storage account but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to file systems, files and directories.\n\nThis client contains operations on a data lake service account. Operations on a file system are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref> through <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceClient.getFileSystemClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getFileSystemClient(String)\"></xref>, and operations on a file or directory are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref> respectively."
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.12.0
