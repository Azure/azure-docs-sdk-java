### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.JobPreparationTask"
fullName: "com.microsoft.azure.batch.protocol.models.JobPreparationTask"
name: "JobPreparationTask"
nameWithType: "JobPreparationTask"
summary: "A Job Preparation Task to run before any Tasks of the Job on any given Compute Node. You can use Job Preparation to prepare a Node to run Tasks for the Job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the Tasks in the Job. The Job Preparation Task can download these common resource files to the shared location on the Node. (AZ\\_BATCH\\_NODE\\_ROOT\\_DIR\\\\shared), or starting a local service on the Node so that all Tasks of that Job can communicate with it. If the Job Preparation Task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run Tasks of this Job on the Node. The Compute Node remains ineligible to run Tasks of this Job until it is reimaged. The Compute Node remains active and can be used for other Jobs. The Job Preparation Task can run multiple times on the same Node. Therefore, you should write the Job Preparation Task to handle re-execution. If the Node is rebooted, the Job Preparation Task is run again on the Compute Node before scheduling any other Task of the Job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation Task did not previously complete. If the Node is reimaged, the Job Preparation Task is run again before scheduling any Task of the Job. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class JobPreparationTask"
constructors:
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.JobPreparationTask()"
methods:
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.commandLine()"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.constraints()"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.containerSettings()"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.environmentSettings()"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.id()"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.rerunOnNodeRebootAfterSuccess()"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.resourceFiles()"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.userIdentity()"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.waitForSuccess()"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.withCommandLine(java.lang.String)"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.withConstraints(com.microsoft.azure.batch.protocol.models.TaskConstraints)"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.withId(java.lang.String)"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.withRerunOnNodeRebootAfterSuccess(java.lang.Boolean)"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)"
- "com.microsoft.azure.batch.protocol.models.JobPreparationTask.withWaitForSuccess(java.lang.Boolean)"
type: "class"
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:8.0.0
