### YamlMime:JavaType
uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient"
fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient"
name: "ConfidentialLedgerAsyncClient"
nameWithType: "ConfidentialLedgerAsyncClient"
summary: "Initializes a new instance of the asynchronous Confidential<wbr>Ledger<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ConfidentialLedgerAsyncClient"
methods:
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.createLedgerEntryWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.createLedgerEntryWithResponse(BinaryData entry, RequestOptions requestOptions)"
  name: "createLedgerEntryWithResponse(BinaryData entry, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.createLedgerEntryWithResponse(BinaryData entry, RequestOptions requestOptions)"
  summary: "A collection id may optionally be specified."
  parameters:
  - description: "Ledger entry."
    name: "entry"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createLedgerEntryWithResponse(BinaryData entry, RequestOptions requestOptions)"
  desc: "A collection id may optionally be specified.\n\n**Query Parameters**\n\n    | ------------ | ------ | -------- | ------------------ |\n    | Name         | Type   | Required | Description        |\n    | collectionId | String | No       | The collection id. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     contents: String (Required)\n     collectionId: String (Optional)\n     transactionId: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     collectionId: String (Required)\n }\n```"
  returns:
    description: "returned as a result of a write to the Confidential Ledger, the transaction id in the response indicates\n     when the write will become durable along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.createOrUpdateUserWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.createOrUpdateUserWithResponse(String userId, BinaryData userDetails, RequestOptions requestOptions)"
  name: "createOrUpdateUserWithResponse(String userId, BinaryData userDetails, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.createOrUpdateUserWithResponse(String userId, BinaryData userDetails, RequestOptions requestOptions)"
  summary: "A JSON merge patch is applied for existing users."
  parameters:
  - description: "The user id, either an AAD object ID or certificate fingerprint."
    name: "userId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Details about a Confidential Ledger user."
    name: "userDetails"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateUserWithResponse(String userId, BinaryData userDetails, RequestOptions requestOptions)"
  desc: "A JSON merge patch is applied for existing users.\n\n**Request Body Schema**\n\n```java\n{\n     assignedRole: String(Administrator/Contributor/Reader) (Required)\n     userId: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     assignedRole: String(Administrator/Contributor/Reader) (Required)\n     userId: String (Optional)\n }\n```"
  returns:
    description: "details about a Confidential Ledger user along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.deleteUserWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.deleteUserWithResponse(String userId, RequestOptions requestOptions)"
  name: "deleteUserWithResponse(String userId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.deleteUserWithResponse(String userId, RequestOptions requestOptions)"
  summary: "Deletes a user from the Confidential Ledger."
  parameters:
  - description: "The user id, either an AAD object ID or certificate fingerprint."
    name: "userId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteUserWithResponse(String userId, RequestOptions requestOptions)"
  desc: "Deletes a user from the Confidential Ledger."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getConstitutionWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getConstitutionWithResponse(RequestOptions requestOptions)"
  name: "getConstitutionWithResponse(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.getConstitutionWithResponse(RequestOptions requestOptions)"
  summary: "The constitution is a script that assesses and applies proposals from consortium members."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getConstitutionWithResponse(RequestOptions requestOptions)"
  desc: "The constitution is a script that assesses and applies proposals from consortium members.\n\n**Response Body Schema**\n\n```java\n{\n     digest: String (Required)\n     script: String (Required)\n }\n```"
  returns:
    description: "the governance script for the application along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getCurrentLedgerEntryWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getCurrentLedgerEntryWithResponse(RequestOptions requestOptions)"
  name: "getCurrentLedgerEntryWithResponse(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.getCurrentLedgerEntryWithResponse(RequestOptions requestOptions)"
  summary: "A collection id may optionally be specified."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getCurrentLedgerEntryWithResponse(RequestOptions requestOptions)"
  desc: "A collection id may optionally be specified.\n\n**Query Parameters**\n\n    | ------------ | ------ | -------- | ------------------ |\n    | Name         | Type   | Required | Description        |\n    | collectionId | String | No       | The collection id. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     contents: String (Required)\n     collectionId: String (Optional)\n     transactionId: String (Optional)\n }\n```"
  returns:
    description: "an entry in the ledger along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getEnclaveQuotesWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getEnclaveQuotesWithResponse(RequestOptions requestOptions)"
  name: "getEnclaveQuotesWithResponse(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.getEnclaveQuotesWithResponse(RequestOptions requestOptions)"
  summary: "A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getEnclaveQuotesWithResponse(RequestOptions requestOptions)"
  desc: "A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.\n\n**Response Body Schema**\n\n```java\n{\n     currentNodeId: String (Required)\n     enclaveQuotes (Required): {\n         String (Required): {\n             nodeId: String (Required)\n             mrenclave: String (Optional)\n             quoteVersion: String (Required)\n             raw: String (Required)\n         }\n     }\n }\n```"
  returns:
    description: "information about the enclaves running the Confidential Ledger along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n     completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getLedgerEntryWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  name: "getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  summary: "To return older ledger entries, the relevant sections of the ledger must be read from disk and validated."
  parameters:
  - description: "Identifies a write transaction."
    name: "transactionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  desc: "To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the response, or if the loading is still ongoing.\n\n**Query Parameters**\n\n    | ------------ | ------ | -------- | ------------------ |\n    | Name         | Type   | Required | Description        |\n    | collectionId | String | No       | The collection id. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     state: String(Loading/Ready) (Required)\n     entry (Optional): {\n         contents: String (Required)\n         collectionId: String (Optional)\n         transactionId: String (Optional)\n     }\n }\n```"
  returns:
    description: "the result of querying for a ledger entry from an older transaction id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n     successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getReceiptWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  name: "getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  summary: "Gets a receipt certifying ledger contents at a particular transaction id."
  parameters:
  - description: "Identifies a write transaction."
    name: "transactionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  desc: "Gets a receipt certifying ledger contents at a particular transaction id.\n\n**Response Body Schema**\n\n```java\n{\n     receipt (Optional): {\n         cert: String (Optional)\n         leaf: String (Optional)\n         leafComponents (Optional): {\n             claimsDigest: String (Optional)\n             commitEvidence: String (Optional)\n             writeSetDigest: String (Optional)\n         }\n         nodeId: String (Required)\n         proof (Required): [\n              (Required){\n                 left: String (Optional)\n                 right: String (Optional)\n             }\n         ]\n         root: String (Optional)\n         serviceEndorsements (Optional): [\n             String (Optional)\n         ]\n         signature: String (Required)\n     }\n     state: String(Loading/Ready) (Required)\n     transactionId: String (Required)\n }\n```"
  returns:
    description: "a receipt certifying ledger contents at a particular transaction id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n     successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getTransactionStatusWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getTransactionStatusWithResponse(String transactionId, RequestOptions requestOptions)"
  name: "getTransactionStatusWithResponse(String transactionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.getTransactionStatusWithResponse(String transactionId, RequestOptions requestOptions)"
  summary: "Gets the status of an entry identified by a transaction id."
  parameters:
  - description: "Identifies a write transaction."
    name: "transactionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTransactionStatusWithResponse(String transactionId, RequestOptions requestOptions)"
  desc: "Gets the status of an entry identified by a transaction id.\n\n**Response Body Schema**\n\n```java\n{\n     state: String(Committed/Pending) (Required)\n     transactionId: String (Required)\n }\n```"
  returns:
    description: "the status of an entry identified by a transaction id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n     completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getUserWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getUserWithResponse(String userId, RequestOptions requestOptions)"
  name: "getUserWithResponse(String userId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.getUserWithResponse(String userId, RequestOptions requestOptions)"
  summary: "Gets a user."
  parameters:
  - description: "The user id, either an AAD object ID or certificate fingerprint."
    name: "userId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getUserWithResponse(String userId, RequestOptions requestOptions)"
  desc: "Gets a user.\n\n**Response Body Schema**\n\n```java\n{\n     assignedRole: String(Administrator/Contributor/Reader) (Required)\n     userId: String (Optional)\n }\n```"
  returns:
    description: "a user along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.listCollections(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.listCollections(RequestOptions requestOptions)"
  name: "listCollections(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.listCollections(RequestOptions requestOptions)"
  summary: "Collection ids are user-created collections of ledger entries."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listCollections(RequestOptions requestOptions)"
  desc: "Collection ids are user-created collections of ledger entries.\n\n**Response Body Schema**\n\n```java\n{\n     collections (Required): [\n          (Required){\n             collectionId: String (Required)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "paginated collections returned in response to a query as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.listConsortiumMembers(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.listConsortiumMembers(RequestOptions requestOptions)"
  name: "listConsortiumMembers(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.listConsortiumMembers(RequestOptions requestOptions)"
  summary: "Consortium members can manage the Confidential Ledger."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listConsortiumMembers(RequestOptions requestOptions)"
  desc: "Consortium members can manage the Confidential Ledger.\n\n**Response Body Schema**\n\n```java\n{\n     members (Required): [\n          (Required){\n             certificate: String (Required)\n             id: String (Required)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "list of members in the consortium as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.listLedgerEntries(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.listLedgerEntries(RequestOptions requestOptions)"
  name: "listLedgerEntries(RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.listLedgerEntries(RequestOptions requestOptions)"
  summary: "A collection id may optionally be specified."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listLedgerEntries(RequestOptions requestOptions)"
  desc: "A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.\n\n**Query Parameters**\n\n    | ----------------- | ------ | -------- | -------------------------------------------- |\n    | Name              | Type   | Required | Description                                  |\n    | collectionId      | String | No       | The collection id.                           |\n    | fromTransactionId | String | No       | Specify the first transaction ID in a range. |\n    | toTransactionId   | String | No       | Specify the last transaction ID in a range.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     state: String(Loading/Ready) (Required)\n     nextLink: String (Optional)\n     entries (Required): [\n          (Required){\n             contents: String (Required)\n             collectionId: String (Optional)\n             transactionId: String (Optional)\n         }\n     ]\n }\n```"
  returns:
    description: "paginated ledger entries returned in response to a query as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous ConfidentialLedgerClient type."
metadata: {}
package: "com.azure.security.confidentialledger"
artifact: com.azure:azure-security-confidentialledger:1.0.1
