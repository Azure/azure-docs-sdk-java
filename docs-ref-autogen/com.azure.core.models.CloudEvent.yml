### YamlMime:JavaType
uid: "com.azure.core.models.CloudEvent"
fullName: "com.azure.core.models.CloudEvent"
name: "CloudEvent"
nameWithType: "CloudEvent"
summary: "Represents the CloudEvent conforming to the 1.0 schema defined by the [Cloud Native Computing Foundation][].  CloudEvents is a specification for describing event data in common formats to provide interoperability across services, platforms and systems. \n\nSome Azure services, for instance, EventGrid, are compatible with this specification. You can use this class to communicate with these Azure services.\n\nDepending on your scenario, you can either use the constructor <xref uid=\"com.azure.core.models.CloudEvent.CloudEvent(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.models.CloudEventDataFormat,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#CloudEvent(String, String, BinaryData, CloudEventDataFormat, String)\"></xref> to create a CloudEvent, or use the factory method <xref uid=\"com.azure.core.models.CloudEvent.fromString(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#fromString(String)\"></xref> to deserialize CloudEvent instances from a Json String representation of CloudEvents.\n\nIf you have the data payload of a CloudEvent and want to send it out, use the constructor <xref uid=\"com.azure.core.models.CloudEvent.CloudEvent(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.models.CloudEventDataFormat,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#CloudEvent(String, String, BinaryData, CloudEventDataFormat, String)\"></xref> to create it. Then you can serialize the CloudEvent into its Json String representation and send it.\n\n**Create CloudEvent Samples**\n\n```java\n// Use BinaryData.fromBytes() to create data in format CloudEventDataFormat.BYTES\n byte[] exampleBytes = \"Hello World\".getBytes(StandardCharsets.UTF_8);\n CloudEvent cloudEvent = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromBytes(exampleBytes), CloudEventDataFormat.BYTES, \"application/octet-stream\");\n \n // Use BinaryData.fromObject() to create CloudEvent data in format CloudEventDataFormat.JSON\n // From a model class\n User user = new User(\"Stephen\", \"James\");\n CloudEvent cloudEventDataObject = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(user), CloudEventDataFormat.JSON, \"application/json\");\n \n // From a String\n CloudEvent cloudEventDataStr = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(\"Hello World\"), CloudEventDataFormat.JSON, \"text/plain\");\n \n // From an Integer\n CloudEvent cloudEventDataInt = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(1), CloudEventDataFormat.JSON, \"int\");\n \n // From a Boolean\n CloudEvent cloudEventDataBool = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(true), CloudEventDataFormat.JSON, \"bool\");\n \n // From null\n CloudEvent cloudEventDataNull = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(null), CloudEventDataFormat.JSON, \"null\");\n \n // Use BinaryData.fromString() if you have a Json String for the CloudEvent data.\n String jsonStringForData = \"\\\"Hello World\\\"\";  // A json String.\n CloudEvent cloudEventDataJsonStr = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromString(jsonStringForData), CloudEventDataFormat.JSON, \"text/plain\");\n```\n\nOn the contrary, if you receive CloudEvents and have the Json string representation of one or more of CloudEvents, use <xref uid=\"com.azure.core.models.CloudEvent.fromString(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#fromString(String)\"></xref> to deserialize them from the Json string.\n\n**Deserialize CloudEvent Samples**\n\n```java\nList<CloudEvent> cloudEventList = CloudEvent.fromString(cloudEventJsonString);\n CloudEvent cloudEvent = cloudEventList.get(0);\n BinaryData cloudEventData = cloudEvent.getData();\n \n byte[] bytesValue = cloudEventData.toBytes();  // If data payload is in bytes (data_base64 is not null).\n User objectValue = cloudEventData.toObject(User.class);  // If data payload is a User object.\n int intValue = cloudEventData.toObject(Integer.class);  // If data payload is an int.\n boolean boolValue = cloudEventData.toObject(Boolean.class);  // If data payload is boolean.\n String stringValue = cloudEventData.toObject(String.class);  // If data payload is String.\n String jsonStringValue = cloudEventData.toString();  // The data payload represented in Json String.\n```\n\n\n[Cloud Native Computing Foundation]: https://github.com/cloudevents/spec/blob/v1.0.1/spec.md"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CloudEvent"
constructors:
- "com.azure.core.models.CloudEvent.CloudEvent(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.models.CloudEventDataFormat,java.lang.String)"
methods:
- "com.azure.core.models.CloudEvent.addExtensionAttribute(java.lang.String,java.lang.Object)"
- "com.azure.core.models.CloudEvent.fromString(java.lang.String)"
- "com.azure.core.models.CloudEvent.fromString(java.lang.String,boolean)"
- "com.azure.core.models.CloudEvent.getData()"
- "com.azure.core.models.CloudEvent.getDataContentType()"
- "com.azure.core.models.CloudEvent.getDataSchema()"
- "com.azure.core.models.CloudEvent.getExtensionAttributes()"
- "com.azure.core.models.CloudEvent.getId()"
- "com.azure.core.models.CloudEvent.getSource()"
- "com.azure.core.models.CloudEvent.getSubject()"
- "com.azure.core.models.CloudEvent.getTime()"
- "com.azure.core.models.CloudEvent.getType()"
- "com.azure.core.models.CloudEvent.setDataSchema(java.lang.String)"
- "com.azure.core.models.CloudEvent.setId(java.lang.String)"
- "com.azure.core.models.CloudEvent.setSubject(java.lang.String)"
- "com.azure.core.models.CloudEvent.setTime(java.time.OffsetDateTime)"
type: "class"
metadata: {}
package: "com.azure.core.models"
artifact: com.azure:azure-core:1.15.0
