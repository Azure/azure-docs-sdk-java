### YamlMime:JavaMember
nameWithType: RegistryIdentityParser.RegistryIdentityParser
type: constructor
members:
- fullName: com.microsoft.azure.sdk.iot.service.registry.serializers.RegistryIdentityParser.RegistryIdentityParser()
  name: RegistryIdentityParser()
  nameWithType: RegistryIdentityParser.RegistryIdentityParser()
  summary: <p>Empty constructor. </p>
  syntax: public RegistryIdentityParser()
  uid: com.microsoft.azure.sdk.iot.service.registry.serializers.RegistryIdentityParser.RegistryIdentityParser()
- fullName: com.microsoft.azure.sdk.iot.service.registry.serializers.RegistryIdentityParser.RegistryIdentityParser(String json)
  name: RegistryIdentityParser(String json)
  nameWithType: RegistryIdentityParser.RegistryIdentityParser(String json)
  parameters:
  - description: <p>The JSON to build the object from. </p>
    name: json
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>If the provided JSON is<code>nullÂ 

          </code> , empty, or not the expected format. </p>
  summary: >-
    <p>Constructor for a RegistryIdentityParser object that is built from the provided JSON.</p>

    <p></p>
  syntax: public RegistryIdentityParser(String json)
  uid: com.microsoft.azure.sdk.iot.service.registry.serializers.RegistryIdentityParser.RegistryIdentityParser(String)
uid: com.microsoft.azure.sdk.iot.service.registry.serializers.RegistryIdentityParser.RegistryIdentityParser*
fullName: com.microsoft.azure.sdk.iot.service.registry.serializers.RegistryIdentityParser.RegistryIdentityParser
name: RegistryIdentityParser
package: com.microsoft.azure.sdk.iot.service.registry.serializers
metadata: {}
