### YamlMime:JavaMember
uid: "com.azure.core.http.rest.PagedFlux.PagedFlux*"
fullName: "com.azure.core.http.rest.PagedFlux<T>.PagedFlux"
name: "PagedFlux"
nameWithType: "PagedFlux<T>.PagedFlux"
members:
- uid: "com.azure.core.http.rest.PagedFlux.PagedFlux(java.util.function.Function<java.lang.Integer,reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<T>>>)"
  fullName: "com.azure.core.http.rest.PagedFlux<T>.PagedFlux(Function<Integer,Mono<PagedResponse<T>>> firstPageRetriever)"
  name: "PagedFlux(Function<Integer,Mono<PagedResponse<T>>> firstPageRetriever)"
  nameWithType: "PagedFlux<T>.PagedFlux(Function<Integer,Mono<PagedResponse<T>>> firstPageRetriever)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> that consists of only a single page with a given element count.\n\n**Code sample**\n\n```java\n// A function that fetches the single page of data from a source/service.\n Function<Integer, Mono<PagedResponse<Integer>>> singlePageRetriever = pageSize ->\n     getFirstPageWithSize(pageSize);\n \n PagedFlux<Integer> singlePageFluxWithPageSize = new PagedFlux<Integer>(singlePageRetriever);\n```"
  parameters:
  - description: "Function that retrieves the first page."
    name: "firstPageRetriever"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />,<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
  syntax: "public PagedFlux(Function<Integer,Mono<PagedResponse<T>>> firstPageRetriever)"
- uid: "com.azure.core.http.rest.PagedFlux.PagedFlux(java.util.function.Function<java.lang.Integer,reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<T>>>,java.util.function.BiFunction<java.lang.String,java.lang.Integer,reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<T>>>)"
  fullName: "com.azure.core.http.rest.PagedFlux<T>.PagedFlux(Function<Integer,Mono<PagedResponse<T>>> firstPageRetriever, BiFunction<String,Integer,Mono<PagedResponse<T>>> nextPageRetriever)"
  name: "PagedFlux(Function<Integer,Mono<PagedResponse<T>>> firstPageRetriever, BiFunction<String,Integer,Mono<PagedResponse<T>>> nextPageRetriever)"
  nameWithType: "PagedFlux<T>.PagedFlux(Function<Integer,Mono<PagedResponse<T>>> firstPageRetriever, BiFunction<String,Integer,Mono<PagedResponse<T>>> nextPageRetriever)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> that is capable of retrieving multiple pages with of a given page size.\n\n**Code sample**\n\n```java\n// A function that fetches the first page of data from a source/service.\n Function<Integer, Mono<PagedResponse<Integer>>> firstPageRetriever = pageSize -> getFirstPageWithSize(pageSize);\n \n // A function that fetches subsequent pages of data from a source/service given a continuation token.\n BiFunction<String, Integer, Mono<PagedResponse<Integer>>> nextPageRetriever = (continuationToken, pageSize) ->\n     getNextPageWithSize(continuationToken, pageSize);\n \n PagedFlux<Integer> pagedFluxWithPageSize = new PagedFlux<>(firstPageRetriever, nextPageRetriever);\n```"
  parameters:
  - description: "Function that retrieves the first page."
    name: "firstPageRetriever"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />,<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
  - description: "BiFunction that retrieves the next page given a continuation token and page size."
    name: "nextPageRetriever"
    type: "<xref href=\"java.util.function.BiFunction?alt=java.util.function.BiFunction&text=BiFunction\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />,<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
  syntax: "public PagedFlux(Function<Integer,Mono<PagedResponse<T>>> firstPageRetriever, BiFunction<String,Integer,Mono<PagedResponse<T>>> nextPageRetriever)"
- uid: "com.azure.core.http.rest.PagedFlux.PagedFlux(java.util.function.Supplier<reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<T>>>)"
  fullName: "com.azure.core.http.rest.PagedFlux<T>.PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever)"
  name: "PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever)"
  nameWithType: "PagedFlux<T>.PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> that consists of only a single page. This constructor takes a `Supplier` that return the single page of `T`.\n\n**Code sample**\n\n```java\n// A supplier that fetches the first page of data from source/service\n Supplier<Mono<PagedResponse<Integer>>> firstPageRetrieverFunction = () -> getFirstPage();\n \n PagedFlux<Integer> pagedFluxInstance = new PagedFlux<>(firstPageRetrieverFunction,\n     nextPageRetriever);\n```"
  parameters:
  - description: "Supplier that retrieves the first page."
    name: "firstPageRetriever"
    type: "<xref href=\"java.util.function.Supplier?alt=java.util.function.Supplier&text=Supplier\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
  syntax: "public PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever)"
- uid: "com.azure.core.http.rest.PagedFlux.PagedFlux(java.util.function.Supplier<reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<T>>>,java.util.function.Function<java.lang.String,reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<T>>>)"
  fullName: "com.azure.core.http.rest.PagedFlux<T>.PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever, Function<String,Mono<PagedResponse<T>>> nextPageRetriever)"
  name: "PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever, Function<String,Mono<PagedResponse<T>>> nextPageRetriever)"
  nameWithType: "PagedFlux<T>.PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever, Function<String,Mono<PagedResponse<T>>> nextPageRetriever)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>. The constructor takes a `Supplier` and `Function`. The `Supplier` returns the first page of `T`, the `Function` retrieves subsequent pages of `T`.\n\n**Code sample**\n\n```java\n// A supplier that fetches the first page of data from source/service\n Supplier<Mono<PagedResponse<Integer>>> firstPageRetriever = () -> getFirstPage();\n \n // A function that fetches subsequent pages of data from source/service given a continuation token\n Function<String, Mono<PagedResponse<Integer>>> nextPageRetriever =\n     continuationToken -> getNextPage(continuationToken);\n \n PagedFlux<Integer> pagedFlux = new PagedFlux<>(firstPageRetriever,\n     nextPageRetriever);\n```"
  parameters:
  - description: "Supplier that retrieves the first page"
    name: "firstPageRetriever"
    type: "<xref href=\"java.util.function.Supplier?alt=java.util.function.Supplier&text=Supplier\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
  - description: "Function that retrieves the next page given a continuation token"
    name: "nextPageRetriever"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
  syntax: "public PagedFlux(Supplier<Mono<PagedResponse<T>>> firstPageRetriever, Function<String,Mono<PagedResponse<T>>> nextPageRetriever)"
type: "constructor"
metadata: {}
package: "com.azure.core.http.rest"
artifact: com.azure:azure-core:1.15.0
