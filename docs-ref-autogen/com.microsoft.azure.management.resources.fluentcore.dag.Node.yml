### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node
  id: Node
  artifact: com.microsoft.azure:azure-mgmt-resources:1.36.1
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  children:
  - com.microsoft.azure.management.resources.fluentcore.dag.Node.Node(java.lang.String,DataT)
  - com.microsoft.azure.management.resources.fluentcore.dag.Node.addChild(java.lang.String)
  - com.microsoft.azure.management.resources.fluentcore.dag.Node.children()
  - com.microsoft.azure.management.resources.fluentcore.dag.Node.data()
  - com.microsoft.azure.management.resources.fluentcore.dag.Node.hasChildren()
  - com.microsoft.azure.management.resources.fluentcore.dag.Node.key()
  - com.microsoft.azure.management.resources.fluentcore.dag.Node.owner()
  - com.microsoft.azure.management.resources.fluentcore.dag.Node.removeChild(java.lang.String)
  - com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner(com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>)
  langs:
  - java
  name: Node<DataT,NodeT>
  nameWithType: Node<DataT,NodeT>
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>
  type: Class
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: Type represents a node in a <xref uid="com.microsoft.azure.management.resources.fluentcore.dag.Graph" data-throw-if-not-resolved="false">Graph</xref>.
  syntax:
    content: public class Node<DataT,NodeT>
    typeParameters:
    - id: DataT
    - id: NodeT
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.Node(java.lang.String,DataT)
  id: Node(java.lang.String,DataT)
  artifact: com.microsoft.azure:azure-mgmt-resources:1.36.1
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Node
  langs:
  - java
  name: Node(String key, DataT data)
  nameWithType: Node<DataT,NodeT>.Node(String key, DataT data)
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.Node(String key, DataT data)
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Node.Node*
  type: Constructor
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: Creates a graph node.
  syntax:
    content: public Node(String key, DataT data)
    parameters:
    - id: key
      type: java.lang.String
      description: unique id of the node
    - id: data
      type: DataT
      description: data to be stored in the node
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.addChild(java.lang.String)
  id: addChild(java.lang.String)
  artifact: com.microsoft.azure:azure-mgmt-resources:1.36.1
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Node
  langs:
  - java
  name: addChild(String childKey)
  nameWithType: Node<DataT,NodeT>.addChild(String childKey)
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.addChild(String childKey)
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Node.addChild*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  syntax:
    content: public void addChild(String childKey)
    parameters:
    - id: childKey
      type: java.lang.String
      description: add a child (neighbour) of this node
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.children()
  id: children()
  artifact: com.microsoft.azure:azure-mgmt-resources:1.36.1
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Node
  langs:
  - java
  name: children()
  nameWithType: Node<DataT,NodeT>.children()
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.children()
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Node.children*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  syntax:
    content: public List<String> children()
    return:
      type: java.util.List<java.lang.String>
      description: children (neighbours) of this node
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.data()
  id: data()
  artifact: com.microsoft.azure:azure-mgmt-resources:1.36.1
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Node
  langs:
  - java
  name: data()
  nameWithType: Node<DataT,NodeT>.data()
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.data()
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Node.data*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  syntax:
    content: public DataT data()
    return:
      type: DataT
      description: data stored in this node
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.hasChildren()
  id: hasChildren()
  artifact: com.microsoft.azure:azure-mgmt-resources:1.36.1
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Node
  langs:
  - java
  name: hasChildren()
  nameWithType: Node<DataT,NodeT>.hasChildren()
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.hasChildren()
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Node.hasChildren*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  syntax:
    content: public boolean hasChildren()
    return:
      type: boolean
      description: true if this node has any children
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.key()
  id: key()
  artifact: com.microsoft.azure:azure-mgmt-resources:1.36.1
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Node
  langs:
  - java
  name: key()
  nameWithType: Node<DataT,NodeT>.key()
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.key()
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Node.key*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  syntax:
    content: public String key()
    return:
      type: java.lang.String
      description: this node's unique id
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.owner()
  id: owner()
  artifact: com.microsoft.azure:azure-mgmt-resources:1.36.1
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Node
  langs:
  - java
  name: owner()
  nameWithType: Node<DataT,NodeT>.owner()
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.owner()
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Node.owner*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  syntax:
    content: public Graph<DataT,NodeT> owner()
    return:
      type: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>
      description: the owner (container) graph of this node.
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.removeChild(java.lang.String)
  id: removeChild(java.lang.String)
  artifact: com.microsoft.azure:azure-mgmt-resources:1.36.1
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Node
  langs:
  - java
  name: removeChild(String childKey)
  nameWithType: Node<DataT,NodeT>.removeChild(String childKey)
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.removeChild(String childKey)
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Node.removeChild*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  syntax:
    content: public void removeChild(String childKey)
    parameters:
    - id: childKey
      type: java.lang.String
      description: remove child (neighbour) of this node
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner(com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>)
  id: setOwner(com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>)
  artifact: com.microsoft.azure:azure-mgmt-resources:1.36.1
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Node
  langs:
  - java
  name: setOwner(Graph<DataT,NodeT> ownerGraph)
  nameWithType: Node<DataT,NodeT>.setOwner(Graph<DataT,NodeT> ownerGraph)
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.setOwner(Graph<DataT,NodeT> ownerGraph)
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: Sets reference to the graph owning this node.
  syntax:
    content: public void setOwner(Graph<DataT,NodeT> ownerGraph)
    parameters:
    - id: ownerGraph
      type: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>
      description: the owning graph
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: DataT
  spec.java:
  - uid: DataT
    name: DataT
    fullName: DataT
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.Node*
  name: Node
  nameWithType: Node<DataT,NodeT>.Node
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.Node
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.key*
  name: key
  nameWithType: Node<DataT,NodeT>.key
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.key
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.data*
  name: data
  nameWithType: Node<DataT,NodeT>.data
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.data
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.hasChildren*
  name: hasChildren
  nameWithType: Node<DataT,NodeT>.hasChildren
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.hasChildren
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.children*
  name: children
  nameWithType: Node<DataT,NodeT>.children
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.children
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.addChild*
  name: addChild
  nameWithType: Node<DataT,NodeT>.addChild
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.addChild
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.removeChild*
  name: removeChild
  nameWithType: Node<DataT,NodeT>.removeChild
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.removeChild
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>
  spec.java:
  - uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph
    name: Graph
    fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph
  - name: <
    fullName: <
  - uid: DataT
    name: DataT
    fullName: DataT
  - name: ','
    fullName: ','
  - uid: NodeT
    name: NodeT
    fullName: NodeT
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner*
  name: setOwner
  nameWithType: Node<DataT,NodeT>.setOwner
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.setOwner
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.owner*
  name: owner
  nameWithType: Node<DataT,NodeT>.owner
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT>.owner
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: NodeT
  name: NodeT
  nameWithType: NodeT
  fullName: NodeT
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: DataT,NodeT
  name: DataT,NodeT
  nameWithType: DataT,NodeT
  fullName: DataT,NodeT
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph
  name: Graph
  nameWithType: Graph
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph
