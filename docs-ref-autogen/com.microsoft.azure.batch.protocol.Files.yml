### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.Files"
fullName: "com.microsoft.azure.batch.protocol.Files"
name: "Files"
nameWithType: "Files"
summary: "An instance of this class provides access to all the operations defined in Files."
syntax: "public interface Files"
methods:
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String poolId, String nodeId, String filePath)"
  name: "deleteFromComputeNode(String poolId, String nodeId, String filePath)"
  nameWithType: "Files.deleteFromComputeNode(String poolId, String nodeId, String filePath)"
  summary: "Deletes the specified file from the Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deleteFromComputeNode(String poolId, String nodeId, String filePath)"
  desc: "Deletes the specified file from the Compute Node."
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  name: "deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  nameWithType: "Files.deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  summary: "Deletes the specified file from the Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileDeleteFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions&text=FileDeleteFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  desc: "Deletes the specified file from the Compute Node."
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  name: "deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  nameWithType: "Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  summary: "Deletes the specified file from the Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  desc: "Deletes the specified file from the Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)"
  name: "deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)"
  summary: "Deletes the specified file from the Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)"
  desc: "Deletes the specified file from the Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  name: "deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  nameWithType: "Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  summary: "Deletes the specified file from the Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileDeleteFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions&text=FileDeleteFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  desc: "Deletes the specified file from the Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)"
  name: "deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Deletes the specified file from the Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileDeleteFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions&text=FileDeleteFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Deletes the specified file from the Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  name: "deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  nameWithType: "Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  summary: "Deletes the specified file from the Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  desc: "Deletes the specified file from the Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders&text=FileDeleteFromComputeNodeHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  name: "deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  nameWithType: "Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  summary: "Deletes the specified file from the Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to delete the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileDeleteFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions&text=FileDeleteFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)"
  desc: "Deletes the specified file from the Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders&text=FileDeleteFromComputeNodeHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromTask(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromTask(String jobId, String taskId, String filePath)"
  name: "deleteFromTask(String jobId, String taskId, String filePath)"
  nameWithType: "Files.deleteFromTask(String jobId, String taskId, String filePath)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deleteFromTask(String jobId, String taskId, String filePath)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromTask(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  name: "deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  nameWithType: "Files.deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileDeleteFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions&text=FileDeleteFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath)"
  name: "deleteFromTaskAsync(String jobId, String taskId, String filePath)"
  nameWithType: "Files.deleteFromTaskAsync(String jobId, String taskId, String filePath)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)"
  name: "deleteFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  name: "deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  nameWithType: "Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileDeleteFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions&text=FileDeleteFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, ServiceCallback<Void> serviceCallback)"
  name: "deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileDeleteFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions&text=FileDeleteFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  name: "deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  nameWithType: "Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders&text=FileDeleteFromTaskHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  name: "deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  nameWithType: "Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  summary: "Deletes the specified Task file from the Compute Node where the Task ran."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file or directory that you want to delete."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileDeleteFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions&text=FileDeleteFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)"
  desc: "Deletes the specified Task file from the Compute Node where the Task ran."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders?alt=com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders&text=FileDeleteFromTaskHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath)"
  name: "getFromComputeNode(String poolId, String nodeId, String filePath)"
  nameWithType: "Files.getFromComputeNode(String poolId, String nodeId, String filePath)"
  summary: "Returns the content of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract InputStream getFromComputeNode(String poolId, String nodeId, String filePath)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the InputStream object if successful."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  name: "getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  nameWithType: "Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  summary: "Returns the content of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions&text=FileGetFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract InputStream getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the InputStream object if successful."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions,java.io.OutputStream)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)"
  name: "getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)"
  nameWithType: "Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)"
  summary: "Returns the content of the specified compute node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the pool that contains the compute node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the compute node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the compute node file that you want to get the content\n            of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions&text=FileGetFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The OutputStream object which data will be written to if\n            successful."
    name: "outputStream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)"
  desc: "Returns the content of the specified compute node file."
- uid: "com.microsoft.azure.batch.protocol.Files.getFromComputeNode(java.lang.String,java.lang.String,java.lang.String,java.io.OutputStream)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)"
  name: "getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)"
  nameWithType: "Files.getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)"
  summary: "Returns the content of the specified task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the pool that contains the compute node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the compute node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the compute node file that you want to get the content\n            of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The OutputStream object which data will be written to if\n            successful."
    name: "outputStream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)"
  desc: "Returns the content of the specified task file."
- uid: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  name: "getFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  nameWithType: "Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  summary: "Returns the content of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  name: "getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  nameWithType: "Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  summary: "Returns the content of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions&text=FileGetFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.io.InputStream>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, ServiceCallback<InputStream> serviceCallback)"
  name: "getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, ServiceCallback<InputStream> serviceCallback)"
  nameWithType: "Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, ServiceCallback<InputStream> serviceCallback)"
  summary: "Returns the content of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions&text=FileGetFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, ServiceCallback<InputStream> serviceCallback)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.io.InputStream>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<InputStream> serviceCallback)"
  name: "getFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<InputStream> serviceCallback)"
  nameWithType: "Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<InputStream> serviceCallback)"
  summary: "Returns the content of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<InputStream> serviceCallback)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  name: "getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  nameWithType: "Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  summary: "Returns the content of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<InputStream,FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders?alt=com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders&text=FileGetFromComputeNodeHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  name: "getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  nameWithType: "Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  summary: "Returns the content of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions&text=FileGetFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<InputStream,FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)"
  desc: "Returns the content of the specified Compute Node file."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders?alt=com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders&text=FileGetFromComputeNodeHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath)"
  name: "getFromTask(String jobId, String taskId, String filePath)"
  nameWithType: "Files.getFromTask(String jobId, String taskId, String filePath)"
  summary: "Returns the content of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract InputStream getFromTask(String jobId, String taskId, String filePath)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the InputStream object if successful."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  name: "getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  nameWithType: "Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  summary: "Returns the content of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions&text=FileGetFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract InputStream getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the InputStream object if successful."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions,java.io.OutputStream)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)"
  name: "getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)"
  nameWithType: "Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)"
  summary: "Returns the content of the specified task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the job that contains the task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the task whose file you want to retrieve."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the task file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions&text=FileGetFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The OutputStream object which data will be written to if\n            successful."
    name: "outputStream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)"
  desc: "Returns the content of the specified task file."
- uid: "com.microsoft.azure.batch.protocol.Files.getFromTask(java.lang.String,java.lang.String,java.lang.String,java.io.OutputStream)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)"
  name: "getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)"
  nameWithType: "Files.getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)"
  summary: "Returns the content of the specified task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the job that contains the task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the task whose file you want to retrieve."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the task file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The OutputStream object which data will be written to if\n            successful."
    name: "outputStream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)"
  desc: "Returns the content of the specified task file."
- uid: "com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath)"
  name: "getFromTaskAsync(String jobId, String taskId, String filePath)"
  nameWithType: "Files.getFromTaskAsync(String jobId, String taskId, String filePath)"
  summary: "Returns the content of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  name: "getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  nameWithType: "Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  summary: "Returns the content of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions&text=FileGetFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions,com.microsoft.rest.ServiceCallback<java.io.InputStream>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, ServiceCallback<InputStream> serviceCallback)"
  name: "getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, ServiceCallback<InputStream> serviceCallback)"
  nameWithType: "Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, ServiceCallback<InputStream> serviceCallback)"
  summary: "Returns the content of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions&text=FileGetFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, ServiceCallback<InputStream> serviceCallback)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.io.InputStream>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<InputStream> serviceCallback)"
  name: "getFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<InputStream> serviceCallback)"
  nameWithType: "Files.getFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<InputStream> serviceCallback)"
  summary: "Returns the content of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<InputStream> serviceCallback)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  name: "getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  nameWithType: "Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  summary: "Returns the content of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<InputStream,FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders?alt=com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders&text=FileGetFromTaskHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  name: "getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  nameWithType: "Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  summary: "Returns the content of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to retrieve."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the content of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions&text=FileGetFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<InputStream,FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)"
  desc: "Returns the content of the specified Task file."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders?alt=com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders&text=FileGetFromTaskHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)"
  name: "getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)"
  nameWithType: "Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)"
  summary: "Gets the properties of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)"
  desc: "Gets the properties of the specified Compute Node file."
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  name: "getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  nameWithType: "Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  summary: "Gets the properties of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetPropertiesFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions&text=FileGetPropertiesFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  desc: "Gets the properties of the specified Compute Node file."
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  name: "getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  nameWithType: "Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  summary: "Gets the properties of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)"
  desc: "Gets the properties of the specified Compute Node file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  name: "getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  nameWithType: "Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  summary: "Gets the properties of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetPropertiesFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions&text=FileGetPropertiesFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  desc: "Gets the properties of the specified Compute Node file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)"
  name: "getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Gets the properties of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetPropertiesFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions&text=FileGetPropertiesFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Gets the properties of the specified Compute Node file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)"
  name: "getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)"
  summary: "Gets the properties of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, ServiceCallback<Void> serviceCallback)"
  desc: "Gets the properties of the specified Compute Node file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  name: "getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  nameWithType: "Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  summary: "Gets the properties of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,FileGetPropertiesFromComputeNodeHeaders>> getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)"
  desc: "Gets the properties of the specified Compute Node file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders&text=FileGetPropertiesFromComputeNodeHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  name: "getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  nameWithType: "Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  summary: "Gets the properties of the specified Compute Node file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that contains the file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Compute Node file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetPropertiesFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions&text=FileGetPropertiesFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,FileGetPropertiesFromComputeNodeHeaders>> getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)"
  desc: "Gets the properties of the specified Compute Node file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders&text=FileGetPropertiesFromComputeNodeHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String jobId, String taskId, String filePath)"
  name: "getPropertiesFromTask(String jobId, String taskId, String filePath)"
  nameWithType: "Files.getPropertiesFromTask(String jobId, String taskId, String filePath)"
  summary: "Gets the properties of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to get the properties of."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void getPropertiesFromTask(String jobId, String taskId, String filePath)"
  desc: "Gets the properties of the specified Task file."
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  name: "getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  nameWithType: "Files.getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  summary: "Gets the properties of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to get the properties of."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetPropertiesFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions&text=FileGetPropertiesFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  desc: "Gets the properties of the specified Task file."
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)"
  name: "getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)"
  nameWithType: "Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)"
  summary: "Gets the properties of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to get the properties of."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)"
  desc: "Gets the properties of the specified Task file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  name: "getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  nameWithType: "Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  summary: "Gets the properties of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to get the properties of."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetPropertiesFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions&text=FileGetPropertiesFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  desc: "Gets the properties of the specified Task file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, ServiceCallback<Void> serviceCallback)"
  name: "getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Gets the properties of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to get the properties of."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetPropertiesFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions&text=FileGetPropertiesFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Gets the properties of the specified Task file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)"
  name: "getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)"
  summary: "Gets the properties of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to get the properties of."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, ServiceCallback<Void> serviceCallback)"
  desc: "Gets the properties of the specified Task file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  name: "getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  nameWithType: "Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  summary: "Gets the properties of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to get the properties of."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,FileGetPropertiesFromTaskHeaders>> getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)"
  desc: "Gets the properties of the specified Task file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders&text=FileGetPropertiesFromTaskHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  name: "getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  nameWithType: "Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  summary: "Gets the properties of the specified Task file."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose file you want to get the properties of."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to the Task file that you want to get the properties of."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileGetPropertiesFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions&text=FileGetPropertiesFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,FileGetPropertiesFromTaskHeaders>> getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)"
  desc: "Gets the properties of the specified Task file."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders?alt=com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders&text=FileGetPropertiesFromTaskHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNode(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNode(String poolId, String nodeId)"
  name: "listFromComputeNode(String poolId, String nodeId)"
  nameWithType: "Files.listFromComputeNode(String poolId, String nodeId)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<NodeFile> listFromComputeNode(String poolId, String nodeId)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the PagedList&lt;NodeFile&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNode(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNode(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  name: "listFromComputeNode(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  nameWithType: "Files.listFromComputeNode(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to list children of a directory."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions&text=FileListFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<NodeFile> listFromComputeNode(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the PagedList&lt;NodeFile&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(String poolId, String nodeId)"
  name: "listFromComputeNodeAsync(String poolId, String nodeId)"
  nameWithType: "Files.listFromComputeNodeAsync(String poolId, String nodeId)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<NodeFile>> listFromComputeNodeAsync(String poolId, String nodeId)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(String poolId, String nodeId, ListOperationCallback<NodeFile> serviceCallback)"
  name: "listFromComputeNodeAsync(String poolId, String nodeId, ListOperationCallback<NodeFile> serviceCallback)"
  nameWithType: "Files.listFromComputeNodeAsync(String poolId, String nodeId, ListOperationCallback<NodeFile> serviceCallback)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(String poolId, String nodeId, ListOperationCallback<NodeFile> serviceCallback)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  name: "listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  nameWithType: "Files.listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to list children of a directory."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions&text=FileListFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<NodeFile>> listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions, ListOperationCallback<NodeFile> serviceCallback)"
  name: "listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions, ListOperationCallback<NodeFile> serviceCallback)"
  nameWithType: "Files.listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions, ListOperationCallback<NodeFile> serviceCallback)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to list children of a directory."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions&text=FileListFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions, ListOperationCallback<NodeFile> serviceCallback)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(String nextPageLink)"
  name: "listFromComputeNodeNext(String nextPageLink)"
  nameWithType: "Files.listFromComputeNodeNext(String nextPageLink)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<NodeFile> listFromComputeNodeNext(String nextPageLink)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the PagedList&lt;NodeFile&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  name: "listFromComputeNodeNext(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  nameWithType: "Files.listFromComputeNodeNext(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromComputeNodeNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions&text=FileListFromComputeNodeNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<NodeFile> listFromComputeNodeNext(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the PagedList&lt;NodeFile&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(String nextPageLink)"
  name: "listFromComputeNodeNextAsync(String nextPageLink)"
  nameWithType: "Files.listFromComputeNodeNextAsync(String nextPageLink)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<NodeFile>> listFromComputeNodeNextAsync(String nextPageLink)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  name: "listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  nameWithType: "Files.listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromComputeNodeNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions&text=FileListFromComputeNodeNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<NodeFile>> listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  name: "listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  nameWithType: "Files.listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromComputeNodeNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions&text=FileListFromComputeNodeNextOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the ServiceFuture object tracking the Retrofit calls"
    name: "serviceFuture"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  name: "listFromComputeNodeNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  nameWithType: "Files.listFromComputeNodeNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the ServiceFuture object tracking the Retrofit calls"
    name: "serviceFuture"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink)"
  name: "listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink)"
  nameWithType: "Files.listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders&text=FileListFromComputeNodeHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  name: "listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  nameWithType: "Files.listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromComputeNodeNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions&text=FileListFromComputeNodeNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(String nextPageLink, FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders&text=FileListFromComputeNodeHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId)"
  name: "listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId)"
  nameWithType: "Files.listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders&text=FileListFromComputeNodeHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  name: "listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  nameWithType: "Files.listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  summary: "Lists all of the files in Task directories on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node whose files you want to list."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to list children of a directory."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromComputeNodeOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions&text=FileListFromComputeNodeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, Boolean recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions)"
  desc: "Lists all of the files in Task directories on the specified Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders?alt=com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders&text=FileListFromComputeNodeHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTask(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTask(String jobId, String taskId)"
  name: "listFromTask(String jobId, String taskId)"
  nameWithType: "Files.listFromTask(String jobId, String taskId)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<NodeFile> listFromTask(String jobId, String taskId)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the PagedList&lt;NodeFile&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTask(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTask(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  name: "listFromTask(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  nameWithType: "Files.listFromTask(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions&text=FileListFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<NodeFile> listFromTask(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the PagedList&lt;NodeFile&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(String jobId, String taskId)"
  name: "listFromTaskAsync(String jobId, String taskId)"
  nameWithType: "Files.listFromTaskAsync(String jobId, String taskId)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<NodeFile>> listFromTaskAsync(String jobId, String taskId)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(String jobId, String taskId, ListOperationCallback<NodeFile> serviceCallback)"
  name: "listFromTaskAsync(String jobId, String taskId, ListOperationCallback<NodeFile> serviceCallback)"
  nameWithType: "Files.listFromTaskAsync(String jobId, String taskId, ListOperationCallback<NodeFile> serviceCallback)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<NodeFile>> listFromTaskAsync(String jobId, String taskId, ListOperationCallback<NodeFile> serviceCallback)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  name: "listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  nameWithType: "Files.listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions&text=FileListFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<NodeFile>> listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions, ListOperationCallback<NodeFile> serviceCallback)"
  name: "listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions, ListOperationCallback<NodeFile> serviceCallback)"
  nameWithType: "Files.listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions, ListOperationCallback<NodeFile> serviceCallback)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions&text=FileListFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<NodeFile>> listFromTaskAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions, ListOperationCallback<NodeFile> serviceCallback)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskNext(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskNext(String nextPageLink)"
  name: "listFromTaskNext(String nextPageLink)"
  nameWithType: "Files.listFromTaskNext(String nextPageLink)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<NodeFile> listFromTaskNext(String nextPageLink)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the PagedList&lt;NodeFile&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskNext(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskNext(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  name: "listFromTaskNext(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  nameWithType: "Files.listFromTaskNext(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromTaskNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions&text=FileListFromTaskNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<NodeFile> listFromTaskNext(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the PagedList&lt;NodeFile&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(String nextPageLink)"
  name: "listFromTaskNextAsync(String nextPageLink)"
  nameWithType: "Files.listFromTaskNextAsync(String nextPageLink)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<NodeFile>> listFromTaskNextAsync(String nextPageLink)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  name: "listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  nameWithType: "Files.listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromTaskNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions&text=FileListFromTaskNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<NodeFile>> listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  name: "listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  nameWithType: "Files.listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromTaskNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions&text=FileListFromTaskNextOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the ServiceFuture object tracking the Retrofit calls"
    name: "serviceFuture"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<NodeFile>> listFromTaskNextAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.NodeFile>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.NodeFile>)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  name: "listFromTaskNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  nameWithType: "Files.listFromTaskNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the ServiceFuture object tracking the Retrofit calls"
    name: "serviceFuture"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<NodeFile>> listFromTaskNextAsync(String nextPageLink, ServiceFuture<List<NodeFile>> serviceFuture, ListOperationCallback<NodeFile> serviceCallback)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(String nextPageLink)"
  name: "listFromTaskNextWithServiceResponseAsync(String nextPageLink)"
  nameWithType: "Files.listFromTaskNextWithServiceResponseAsync(String nextPageLink)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(String nextPageLink)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders&text=FileListFromTaskHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  name: "listFromTaskNextWithServiceResponseAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  nameWithType: "Files.listFromTaskNextWithServiceResponseAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromTaskNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions&text=FileListFromTaskNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(String nextPageLink, FileListFromTaskNextOptions fileListFromTaskNextOptions)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders&text=FileListFromTaskHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(String jobId, String taskId)"
  name: "listFromTaskWithServiceResponseAsync(String jobId, String taskId)"
  nameWithType: "Files.listFromTaskWithServiceResponseAsync(String jobId, String taskId)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(String jobId, String taskId)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders&text=FileListFromTaskHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.Boolean,com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  name: "listFromTaskWithServiceResponseAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  nameWithType: "Files.listFromTaskWithServiceResponseAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  summary: "Lists the files in a Task's directory on its Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task whose files you want to list."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files."
    name: "recursive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "fileListFromTaskOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions&text=FileListFromTaskOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<NodeFile>,FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(String jobId, String taskId, Boolean recursive, FileListFromTaskOptions fileListFromTaskOptions)"
  desc: "Lists the files in a Task's directory on its Compute Node."
  returns:
    description: "the observable to the PagedList&lt;NodeFile&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders&text=FileListFromTaskHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in Files."
metadata: {}
package: "com.microsoft.azure.batch.protocol"
artifact: com.microsoft.azure:azure-batch:9.0.0
