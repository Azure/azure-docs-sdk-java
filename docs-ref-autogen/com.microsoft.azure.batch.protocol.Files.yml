### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.Files
  id: Files
  parent: com.microsoft.azure.batch.protocol
  children:
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTask(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTask(String,String,String,Boolean,FileDeleteFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String,String,String,FileGetFromComputeNodeOptions,OutputStream)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String,String,String,OutputStream)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions,final ServiceCallback<InputStream>)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String,final ServiceCallback<InputStream>)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getFromTask(String,String,String,FileGetFromTaskOptions,OutputStream)
  - com.microsoft.azure.batch.protocol.Files.getFromTask(String,String,String,OutputStream)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String,FileGetFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String,FileGetFromTaskOptions,final ServiceCallback<InputStream>)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String,final ServiceCallback<InputStream>)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String,String,String,FileGetFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String,String,String,FileGetPropertiesFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNode(final String,final String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNode(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String,final String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String,final String,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(final String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(final String,final FileListFromComputeNodeNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(final String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(final String,final FileListFromComputeNodeNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(final String,final String)
  - com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTask(final String,final String)
  - com.microsoft.azure.batch.protocol.Files.listFromTask(final String,final String,final Boolean,final FileListFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNext(final String)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNext(final String,final FileListFromTaskNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(final String)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(final String,final FileListFromTaskNextOptions)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(final String,final String)
  - com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: Files
  nameWithType: Files
  fullName: com.microsoft.azure.batch.protocol.Files
  type: Interface
  source:
    remote: &o0
      path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
      branch: master
      repo: https://github.com/Azure/azure-batch-sdk-for-java
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 48
  package: com.microsoft.azure.batch.protocol
  summary: "<p>An instance of this class provides access to all the operations defined in Files. </p>"
  syntax:
    content: public interface Files
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String,String,String)
  id: deleteFromComputeNode(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromComputeNode(String poolId, String nodeId, String filePath)
  nameWithType: Files.deleteFromComputeNode(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 543
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified file from the compute node.</p>\r\n<p></p>"
  syntax:
    content: public void deleteFromComputeNode(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file or directory that you want to delete. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  id: deleteFromComputeNode(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: Files.deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 620
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified file from the compute node.</p>\r\n<p></p>"
  syntax:
    content: public void deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file or directory that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String,String,String)
  id: deleteFromComputeNodeAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 577
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified file from the compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file or directory that you want to delete. </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  id: deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 672
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified file from the compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file or directory that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions,final ServiceCallback<Void>)
  id: deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 647
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified file from the compute node.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file or directory that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  id: deleteFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 561
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified file from the compute node.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file or directory that you want to delete. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String,String,String)
  id: deleteFromComputeNodeWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 592
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified file from the compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file or directory that you want to delete. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  id: deleteFromComputeNodeWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 696
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified file from the compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file or directory that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTask(String,String,String)
  id: deleteFromTask(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromTask(String jobId, String taskId, String filePath)
  nameWithType: Files.deleteFromTask(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTask(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 66
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified task file from the compute node where the task ran.</p>\r\n<p></p>"
  syntax:
    content: public void deleteFromTask(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file or directory that you want to delete. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTask(String,String,String,Boolean,FileDeleteFromTaskOptions)
  id: deleteFromTask(String,String,String,Boolean,FileDeleteFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: Files.deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 143
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified task file from the compute node where the task ran.</p>\r\n<p></p>"
  syntax:
    content: public void deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file or directory that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
      description: <p>Additional parameters for the operation </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String,String,String)
  id: deleteFromTaskAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 100
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified task file from the compute node where the task ran.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file or directory that you want to delete. </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  id: deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 194
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified task file from the compute node where the task ran.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file or directory that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions,final ServiceCallback<Void>)
  id: deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 170
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified task file from the compute node where the task ran.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file or directory that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  id: deleteFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 84
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified task file from the compute node where the task ran.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file or directory that you want to delete. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String,String,String)
  id: deleteFromTaskWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 115
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified task file from the compute node where the task ran.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file or directory that you want to delete. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  id: deleteFromTaskWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 218
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes the specified task file from the compute node where the task ran.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file or directory that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String,String,String,FileGetFromComputeNodeOptions,OutputStream)
  id: getFromComputeNode(String,String,String,FileGetFromComputeNodeOptions,OutputStream)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  nameWithType: Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 801
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public void getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    - id: outputStream
      type: 3a09e348
      description: <p>The OutputStream object which data will be written to if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String,String,String,OutputStream)
  id: getFromComputeNode(String,String,String,OutputStream)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  nameWithType: Files.getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 722
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public void getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the content of. </p>
    - id: outputStream
      type: 3a09e348
      description: <p>The OutputStream object which data will be written to if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String)
  id: getFromComputeNodeAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 758
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the content of. </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions)
  id: getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 843
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions,final ServiceCallback<InputStream>)
  id: getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 823
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String,final ServiceCallback<InputStream>)
  id: getFromComputeNodeAsync(String,String,String,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 741
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the content of. </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String,String,String)
  id: getFromComputeNodeWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 774
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the content of. </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaderse7daa122
      description: <p>the observable to the InputStream object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetFromComputeNodeOptions)
  id: getFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  nameWithType: Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 862
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaderse7daa122
      description: <p>the observable to the InputStream object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromTask(String,String,String,FileGetFromTaskOptions,OutputStream)
  id: getFromTask(String,String,String,FileGetFromTaskOptions,OutputStream)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
  nameWithType: Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 316
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public void getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    - id: outputStream
      type: 3a09e348
      description: <p>The OutputStream object which data will be written to if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromTask(String,String,String,OutputStream)
  id: getFromTask(String,String,String,OutputStream)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
  nameWithType: Files.getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 242
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public void getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: outputStream
      type: 3a09e348
      description: <p>The OutputStream object which data will be written to if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String)
  id: getFromTaskAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 276
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String,FileGetFromTaskOptions)
  id: getFromTaskAsync(String,String,String,FileGetFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 355
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String,FileGetFromTaskOptions,final ServiceCallback<InputStream>)
  id: getFromTaskAsync(String,String,String,FileGetFromTaskOptions,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 337
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String,final ServiceCallback<InputStream>)
  id: getFromTaskAsync(String,String,String,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 260
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String,String,String)
  id: getFromTaskWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 291
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaderse7daa122
      description: <p>the observable to the InputStream object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String,String,String,FileGetFromTaskOptions)
  id: getFromTaskWithServiceResponseAsync(String,String,String,FileGetFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  nameWithType: Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 373
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Returns the content of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaderse7daa122
      description: <p>the observable to the InputStream object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String,String,String)
  id: getPropertiesFromComputeNode(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  nameWithType: Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 883
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public void getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  id: getPropertiesFromComputeNode(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 958
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public void getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String,String,String)
  id: getPropertiesFromComputeNodeAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 919
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  id: getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1000
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions,final ServiceCallback<Void>)
  id: getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 980
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  id: getPropertiesFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 902
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String)
  id: getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 935
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  id: getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1019
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified compute node file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String,String,String)
  id: getPropertiesFromTask(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromTask(String jobId, String taskId, String filePath)
  nameWithType: Files.getPropertiesFromTask(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 393
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public void getPropertiesFromTask(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String,String,String,FileGetPropertiesFromTaskOptions)
  id: getPropertiesFromTask(String,String,String,FileGetPropertiesFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: Files.getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 464
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public void getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
      description: <p>Additional parameters for the operation </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String,String,String)
  id: getPropertiesFromTaskAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 427
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  id: getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 504
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions,final ServiceCallback<Void>)
  id: getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 485
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  id: getPropertiesFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 411
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String,String,String)
  id: getPropertiesFromTaskWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 442
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  id: getPropertiesFromTaskWithServiceResponseAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 522
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets the properties of the specified task file.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNode(final String,final String)
  id: listFromComputeNode(final String,final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNode(final String poolId, final String nodeId)
  nameWithType: Files.listFromComputeNode(final String poolId, final String nodeId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNode(final String poolId, final String nodeId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1191
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<NodeFile> listFromComputeNode(final String poolId, final String nodeId)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNode(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  id: listFromComputeNode(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: Files.listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1257
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<NodeFile> listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String,final String)
  id: listFromComputeNodeAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeAsync(final String poolId, final String nodeId)
  nameWithType: Files.listFromComputeNodeAsync(final String poolId, final String nodeId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String poolId, final String nodeId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1221
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  id: listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1297
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions,final ListOperationCallback<NodeFile>)
  id: listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1278
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String,final String,final ListOperationCallback<NodeFile>)
  id: listFromComputeNodeAsync(final String,final String,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1207
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(final String)
  id: listFromComputeNodeNext(final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeNext(final String nextPageLink)
  nameWithType: Files.listFromComputeNodeNext(final String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1456
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<NodeFile> listFromComputeNodeNext(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(final String,final FileListFromComputeNodeNextOptions)
  id: listFromComputeNodeNext(final String,final FileListFromComputeNodeNextOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: Files.listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1514
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<NodeFile> listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String)
  id: listFromComputeNodeNextAsync(final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeNextAsync(final String nextPageLink)
  nameWithType: Files.listFromComputeNodeNextAsync(final String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1484
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions)
  id: listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: Files.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1548
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  id: listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1533
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  id: listFromComputeNodeNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1472
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(final String)
  id: listFromComputeNodeNextWithServiceResponseAsync(final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Files.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1495
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.NodeFile8135b5ebcom.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaderse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(final String,final FileListFromComputeNodeNextOptions)
  id: listFromComputeNodeNextWithServiceResponseAsync(final String,final FileListFromComputeNodeNextOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: Files.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1562
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.NodeFile8135b5ebcom.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaderse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(final String,final String)
  id: listFromComputeNodeWithServiceResponseAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
  nameWithType: Files.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1234
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.NodeFile8135b5ebcom.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaderse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  id: listFromComputeNodeWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: Files.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1315
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the files in task directories on the specified compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.NodeFile8135b5ebcom.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaderse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTask(final String,final String)
  id: listFromTask(final String,final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTask(final String jobId, final String taskId)
  nameWithType: Files.listFromTask(final String jobId, final String taskId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTask(final String jobId, final String taskId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1039
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<NodeFile> listFromTask(final String jobId, final String taskId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTask(final String,final String,final Boolean,final FileListFromTaskOptions)
  id: listFromTask(final String,final String,final Boolean,final FileListFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: Files.listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1107
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<NodeFile> listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String)
  id: listFromTaskAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskAsync(final String jobId, final String taskId)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1069
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskAsync(final String jobId, final String taskId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  id: listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1151
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions,final ListOperationCallback<NodeFile>)
  id: listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1130
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String,final ListOperationCallback<NodeFile>)
  id: listFromTaskAsync(final String,final String,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1055
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNext(final String)
  id: listFromTaskNext(final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskNext(final String nextPageLink)
  nameWithType: Files.listFromTaskNext(final String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNext(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNext*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1333
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<NodeFile> listFromTaskNext(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNext(final String,final FileListFromTaskNextOptions)
  id: listFromTaskNext(final String,final FileListFromTaskNextOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: Files.listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNext*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1391
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<NodeFile> listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String)
  id: listFromTaskNextAsync(final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskNextAsync(final String nextPageLink)
  nameWithType: Files.listFromTaskNextAsync(final String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1361
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskNextAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions)
  id: listFromTaskNextAsync(final String,final FileListFromTaskNextOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: Files.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1425
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  id: listFromTaskNextAsync(final String,final FileListFromTaskNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1410
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  id: listFromTaskNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1349
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(final String)
  id: listFromTaskNextWithServiceResponseAsync(final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Files.listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1372
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.NodeFile8135b5ebcom.microsoft.azure.batch.protocol.models.FileListFromTaskHeaderse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(final String,final FileListFromTaskNextOptions)
  id: listFromTaskNextWithServiceResponseAsync(final String,final FileListFromTaskNextOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: Files.listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1439
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.NodeFile8135b5ebcom.microsoft.azure.batch.protocol.models.FileListFromTaskHeaderse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(final String,final String)
  id: listFromTaskWithServiceResponseAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
  nameWithType: Files.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1082
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.NodeFile8135b5ebcom.microsoft.azure.batch.protocol.models.FileListFromTaskHeaderse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  id: listFromTaskWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.Files
  href: com.microsoft.azure.batch.protocol.Files.yml
  langs:
  - java
  name: listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: Files.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Files.java
    startLine: 1171
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists the files in a task's directory on its compute node.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.NodeFile8135b5ebcom.microsoft.azure.batch.protocol.models.FileListFromTaskHeaderse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
references:
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: c8683d81
  spec.java:
  - name: BatchErrorException
    fullName: BatchErrorException
- uid: 9b2a4515
  spec.java:
  - name: RuntimeException
    fullName: RuntimeException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTask*
  name: deleteFromTask
  nameWithType: Files.deleteFromTask
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTask
  package: com.microsoft.azure.batch.protocol
- uid: 1c186eb5
  spec.java:
  - name: final ServiceCallback<Void>
    fullName: final ServiceCallback<Void>
- uid: aa81d378
  spec.java:
  - name: ServiceFuture<Void>
    fullName: ServiceFuture<Void>
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync*
  name: deleteFromTaskAsync
  nameWithType: Files.deleteFromTaskAsync
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync
  package: com.microsoft.azure.batch.protocol
- uid: dcd884b2
  spec.java:
  - name: Observable<Void>
    fullName: Observable<Void>
- uid: 6738ce59com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders
    name: FileDeleteFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders
    href: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync*
  name: deleteFromTaskWithServiceResponseAsync
  nameWithType: Files.deleteFromTaskWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: 866c2227
  spec.java:
  - name: Boolean
    fullName: Boolean
- uid: 3a09e348
  spec.java:
  - name: OutputStream
    fullName: OutputStream
- uid: com.microsoft.azure.batch.protocol.Files.getFromTask*
  name: getFromTask
  nameWithType: Files.getFromTask
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTask
  package: com.microsoft.azure.batch.protocol
- uid: 0377aee2
  spec.java:
  - name: final ServiceCallback<InputStream>
    fullName: final ServiceCallback<InputStream>
- uid: 8601070c
  spec.java:
  - name: ServiceFuture<InputStream>
    fullName: ServiceFuture<InputStream>
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
  name: getFromTaskAsync
  nameWithType: Files.getFromTaskAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync
  package: com.microsoft.azure.batch.protocol
- uid: 3ab19265
  spec.java:
  - name: Observable<InputStream>
    fullName: Observable<InputStream>
- uid: 2af956f9com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<InputStream, '
    fullName: 'Observable<ServiceResponseWithHeaders<InputStream, '
  - uid: com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders
    name: FileGetFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders
    href: com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync*
  name: getFromTaskWithServiceResponseAsync
  nameWithType: Files.getFromTaskWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask*
  name: getPropertiesFromTask
  nameWithType: Files.getPropertiesFromTask
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync*
  name: getPropertiesFromTaskAsync
  nameWithType: Files.getPropertiesFromTaskAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync
  package: com.microsoft.azure.batch.protocol
- uid: 6738ce59com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders
    name: FileGetPropertiesFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders
    href: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync*
  name: getPropertiesFromTaskWithServiceResponseAsync
  nameWithType: Files.getPropertiesFromTaskWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode*
  name: deleteFromComputeNode
  nameWithType: Files.deleteFromComputeNode
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync*
  name: deleteFromComputeNodeAsync
  nameWithType: Files.deleteFromComputeNodeAsync
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol
- uid: 6738ce59com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders
    name: FileDeleteFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders
    href: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync*
  name: deleteFromComputeNodeWithServiceResponseAsync
  nameWithType: Files.deleteFromComputeNodeWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode*
  name: getFromComputeNode
  nameWithType: Files.getFromComputeNode
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
  name: getFromComputeNodeAsync
  nameWithType: Files.getFromComputeNodeAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol
- uid: 2af956f9com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<InputStream, '
    fullName: 'Observable<ServiceResponseWithHeaders<InputStream, '
  - uid: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders
    name: FileGetFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders
    href: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync*
  name: getFromComputeNodeWithServiceResponseAsync
  nameWithType: Files.getFromComputeNodeWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode*
  name: getPropertiesFromComputeNode
  nameWithType: Files.getPropertiesFromComputeNode
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync*
  name: getPropertiesFromComputeNodeAsync
  nameWithType: Files.getPropertiesFromComputeNodeAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol
- uid: 6738ce59com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders
    name: FileGetPropertiesFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders
    href: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync*
  name: getPropertiesFromComputeNodeWithServiceResponseAsync
  nameWithType: Files.getPropertiesFromComputeNodeWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: 3d93591e
  spec.java:
  - name: final String
    fullName: final String
- uid: 36b27be0com.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
  spec.java:
  - name: PagedList<
    fullName: PagedList<
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models.NodeFile.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Files.listFromTask*
  name: listFromTask
  nameWithType: Files.listFromTask
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTask
  package: com.microsoft.azure.batch.protocol
- uid: 3c4303efcom.microsoft.azure.batch.protocol.models.NodeFilea08ddfce
  spec.java:
  - name: final ListOperationCallback<
    fullName: final ListOperationCallback<
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models.NodeFile.yml
  - name: '>'
    fullName: '>'
- uid: b7698b59com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
  spec.java:
  - name: ServiceFuture<List<
    fullName: ServiceFuture<List<
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models.NodeFile.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
  name: listFromTaskAsync
  nameWithType: Files.listFromTaskAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync
  package: com.microsoft.azure.batch.protocol
- uid: 32da0907com.microsoft.azure.batch.protocol.models.NodeFilee7daa122
  spec.java:
  - name: Observable<Page<
    fullName: Observable<Page<
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models.NodeFile.yml
  - name: '>>'
    fullName: '>>'
- uid: 442ed5e5com.microsoft.azure.batch.protocol.models.NodeFile8135b5ebcom.microsoft.azure.batch.protocol.models.FileListFromTaskHeaderse7daa122
  spec.java:
  - name: Observable<ServiceResponseWithHeaders<Page<
    fullName: Observable<ServiceResponseWithHeaders<Page<
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models.NodeFile.yml
  - name: '>, '
    fullName: '>, '
  - uid: com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders
    name: FileListFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders
    href: com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync*
  name: listFromTaskWithServiceResponseAsync
  nameWithType: Files.listFromTaskWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: 2ec468d1
  spec.java:
  - name: final Boolean
    fullName: final Boolean
- uid: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
    name: FileListFromTaskOptions
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
    href: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions.yml
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNode*
  name: listFromComputeNode
  nameWithType: Files.listFromComputeNode
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNode
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync*
  name: listFromComputeNodeAsync
  nameWithType: Files.listFromComputeNodeAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol
- uid: 442ed5e5com.microsoft.azure.batch.protocol.models.NodeFile8135b5ebcom.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaderse7daa122
  spec.java:
  - name: Observable<ServiceResponseWithHeaders<Page<
    fullName: Observable<ServiceResponseWithHeaders<Page<
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models.NodeFile.yml
  - name: '>, '
    fullName: '>, '
  - uid: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders
    name: FileListFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders
    href: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync*
  name: listFromComputeNodeWithServiceResponseAsync
  nameWithType: Files.listFromComputeNodeWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
    name: FileListFromComputeNodeOptions
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
    href: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions.yml
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNext*
  name: listFromTaskNext
  nameWithType: Files.listFromTaskNext
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNext
  package: com.microsoft.azure.batch.protocol
- uid: bd82102acom.microsoft.azure.batch.protocol.models.NodeFilee7daa122
  spec.java:
  - name: final ServiceFuture<List<
    fullName: final ServiceFuture<List<
  - uid: com.microsoft.azure.batch.protocol.models.NodeFile
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models.NodeFile.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync*
  name: listFromTaskNextAsync
  nameWithType: Files.listFromTaskNextAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync*
  name: listFromTaskNextWithServiceResponseAsync
  nameWithType: Files.listFromTaskNextWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
    name: FileListFromTaskNextOptions
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
    href: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions.yml
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext*
  name: listFromComputeNodeNext
  nameWithType: Files.listFromComputeNodeNext
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync*
  name: listFromComputeNodeNextAsync
  nameWithType: Files.listFromComputeNodeNextAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync*
  name: listFromComputeNodeNextWithServiceResponseAsync
  nameWithType: Files.listFromComputeNodeNextWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: 93de0ef9com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
    name: FileListFromComputeNodeNextOptions
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
    href: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions.yml
- uid: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders.yml
  name: FileDeleteFromTaskHeaders
  nameWithType: FileDeleteFromTaskHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders
  type: Class
  summary: "<p>Defines headers for DeleteFromTask operation. </p>"
  syntax:
    content: public class FileDeleteFromTaskHeaders
- uid: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions.yml
  name: FileDeleteFromTaskOptions
  nameWithType: FileDeleteFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
  type: Class
  summary: "<p>Additional parameters for deleteFromTask operation. </p>"
  syntax:
    content: public class FileDeleteFromTaskOptions
- uid: com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders.yml
  name: FileGetFromTaskHeaders
  nameWithType: FileGetFromTaskHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders
  type: Class
  summary: "<p>Defines headers for GetFromTask operation. </p>"
  syntax:
    content: public class FileGetFromTaskHeaders
- uid: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions.yml
  name: FileGetFromTaskOptions
  nameWithType: FileGetFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
  type: Class
  summary: "<p>Additional parameters for getFromTask operation. </p>"
  syntax:
    content: public class FileGetFromTaskOptions
- uid: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders.yml
  name: FileGetPropertiesFromTaskHeaders
  nameWithType: FileGetPropertiesFromTaskHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders
  type: Class
  summary: "<p>Defines headers for GetPropertiesFromTask operation. </p>"
  syntax:
    content: public class FileGetPropertiesFromTaskHeaders
- uid: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions.yml
  name: FileGetPropertiesFromTaskOptions
  nameWithType: FileGetPropertiesFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
  type: Class
  summary: "<p>Additional parameters for getPropertiesFromTask operation. </p>"
  syntax:
    content: public class FileGetPropertiesFromTaskOptions
- uid: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders.yml
  name: FileDeleteFromComputeNodeHeaders
  nameWithType: FileDeleteFromComputeNodeHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders
  type: Class
  summary: "<p>Defines headers for DeleteFromComputeNode operation. </p>"
  syntax:
    content: public class FileDeleteFromComputeNodeHeaders
- uid: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions.yml
  name: FileDeleteFromComputeNodeOptions
  nameWithType: FileDeleteFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
  type: Class
  summary: "<p>Additional parameters for deleteFromComputeNode operation. </p>"
  syntax:
    content: public class FileDeleteFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders.yml
  name: FileGetFromComputeNodeHeaders
  nameWithType: FileGetFromComputeNodeHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders
  type: Class
  summary: "<p>Defines headers for GetFromComputeNode operation. </p>"
  syntax:
    content: public class FileGetFromComputeNodeHeaders
- uid: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions.yml
  name: FileGetFromComputeNodeOptions
  nameWithType: FileGetFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
  type: Class
  summary: "<p>Additional parameters for getFromComputeNode operation. </p>"
  syntax:
    content: public class FileGetFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders.yml
  name: FileGetPropertiesFromComputeNodeHeaders
  nameWithType: FileGetPropertiesFromComputeNodeHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders
  type: Class
  summary: "<p>Defines headers for GetPropertiesFromComputeNode operation. </p>"
  syntax:
    content: public class FileGetPropertiesFromComputeNodeHeaders
- uid: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions.yml
  name: FileGetPropertiesFromComputeNodeOptions
  nameWithType: FileGetPropertiesFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
  type: Class
  summary: "<p>Additional parameters for getPropertiesFromComputeNode operation. </p>"
  syntax:
    content: public class FileGetPropertiesFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol.models.NodeFile
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.NodeFile.yml
  name: NodeFile
  nameWithType: NodeFile
  fullName: com.microsoft.azure.batch.protocol.models.NodeFile
  type: Class
  summary: "<p>Information about a file or directory on a compute node. </p>"
  syntax:
    content: public class NodeFile
- uid: com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders.yml
  name: FileListFromTaskHeaders
  nameWithType: FileListFromTaskHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders
  type: Class
  summary: "<p>Defines headers for ListFromTask operation. </p>"
  syntax:
    content: public class FileListFromTaskHeaders
- uid: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions.yml
  name: FileListFromTaskOptions
  nameWithType: FileListFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
  type: Class
  summary: "<p>Additional parameters for listFromTask operation. </p>"
  syntax:
    content: public class FileListFromTaskOptions
- uid: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders.yml
  name: FileListFromComputeNodeHeaders
  nameWithType: FileListFromComputeNodeHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders
  type: Class
  summary: "<p>Defines headers for ListFromComputeNode operation. </p>"
  syntax:
    content: public class FileListFromComputeNodeHeaders
- uid: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions.yml
  name: FileListFromComputeNodeOptions
  nameWithType: FileListFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
  type: Class
  summary: "<p>Additional parameters for listFromComputeNode operation. </p>"
  syntax:
    content: public class FileListFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions.yml
  name: FileListFromTaskNextOptions
  nameWithType: FileListFromTaskNextOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
  type: Class
  summary: "<p>Additional parameters for listFromTaskNext operation. </p>"
  syntax:
    content: public class FileListFromTaskNextOptions
- uid: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions.yml
  name: FileListFromComputeNodeNextOptions
  nameWithType: FileListFromComputeNodeNextOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
  type: Class
  summary: "<p>Additional parameters for listFromComputeNodeNext operation. </p>"
  syntax:
    content: public class FileListFromComputeNodeNextOptions
