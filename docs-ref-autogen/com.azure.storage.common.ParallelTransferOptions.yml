### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.common.ParallelTransferOptions"
  id: "ParallelTransferOptions"
  parent: "com.azure.storage.common"
  children:
  - "com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions(java.lang.Integer,java.lang.Integer,com.azure.storage.common.ProgressReceiver,java.lang.Integer)"
  - "com.azure.storage.common.ParallelTransferOptions.getBlockSize()"
  - "com.azure.storage.common.ParallelTransferOptions.getMaxSingleUploadSize()"
  - "com.azure.storage.common.ParallelTransferOptions.getNumBuffers()"
  - "com.azure.storage.common.ParallelTransferOptions.getProgressReceiver()"
  langs:
  - "java"
  name: "ParallelTransferOptions"
  nameWithType: "ParallelTransferOptions"
  fullName: "com.azure.storage.common.ParallelTransferOptions"
  type: "Class"
  package: "com.azure.storage.common"
  summary: "This class contains configuration used to parallelize data transfer operations. Note that not all values are used by every method which accepts this type. Please refer to the javadoc on specific methods for these cases."
  syntax:
    content: "public final class ParallelTransferOptions"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions(java.lang.Integer,java.lang.Integer,com.azure.storage.common.ProgressReceiver,java.lang.Integer)"
  id: "ParallelTransferOptions(java.lang.Integer,java.lang.Integer,com.azure.storage.common.ProgressReceiver,java.lang.Integer)"
  parent: "com.azure.storage.common.ParallelTransferOptions"
  langs:
  - "java"
  name: "ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)"
  nameWithType: "ParallelTransferOptions.ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)"
  fullName: "com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)"
  overload: "com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions*"
  type: "Constructor"
  package: "com.azure.storage.common"
  summary: "Creates a new <xref uid=\"com.azure.storage.common.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\">ParallelTransferOptions</xref> with default parameters applied."
  syntax:
    content: "public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)"
    parameters:
    - id: "blockSize"
      type: "java.lang.Integer"
      description: "The block size.\n For upload, The block size is the size of each block that will be staged. This value also determines the number\n of requests that need to be made. This parameter also determines the size that each buffer uses when buffering\n is required and consequently amount of memory consumed by such methods may be up to blockSize * numBuffers.\n For download to file, the block size is the size of each data chunk returned from the service.\n For both applications, If block size is large, upload will make fewer network calls, but each\n individual call will send more data and will therefore take longer."
    - id: "numBuffers"
      type: "java.lang.Integer"
      description: "For buffered upload only, the number of buffers is the maximum number of buffers this method\n should allocate. Memory will be allocated lazily as needed. Must be at least two. Typically, the larger the\n number of buffers, the more parallel, and thus faster, the upload portion  of this operation will be.\n The amount of memory consumed by methods using this value may be up to blockSize * numBuffers."
    - id: "progressReceiver"
      type: "com.azure.storage.common.ProgressReceiver"
      description: "<xref uid=\"com.azure.storage.common.ProgressReceiver\" data-throw-if-not-resolved=\"false\">ProgressReceiver</xref>"
    - id: "maxSingleUploadSize"
      type: "java.lang.Integer"
      description: "If the size of the data is less than or equal to this value, it will be uploaded in a\n single put rather than broken up into chunks. If the data is uploaded in a single shot, the block size will be\n ignored. Some constraints to consider are that more requests cost more, but several small or mid-sized requests\n may sometimes perform better. In the case of buffered upload, up to this amount of data may be buffered before\n any data is sent. Must be greater than 0. May be null to accept default behavior, which is the maximum value the\n service accepts for uploading in a single requests, which varies depending on the service."
- uid: "com.azure.storage.common.ParallelTransferOptions.getBlockSize()"
  id: "getBlockSize()"
  parent: "com.azure.storage.common.ParallelTransferOptions"
  langs:
  - "java"
  name: "getBlockSize()"
  nameWithType: "ParallelTransferOptions.getBlockSize()"
  fullName: "com.azure.storage.common.ParallelTransferOptions.getBlockSize()"
  overload: "com.azure.storage.common.ParallelTransferOptions.getBlockSize*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Gets the block size (chunk size) to transfer at a time."
  syntax:
    content: "public Integer getBlockSize()"
    return:
      type: "java.lang.Integer"
      description: "The block size."
- uid: "com.azure.storage.common.ParallelTransferOptions.getMaxSingleUploadSize()"
  id: "getMaxSingleUploadSize()"
  parent: "com.azure.storage.common.ParallelTransferOptions"
  langs:
  - "java"
  name: "getMaxSingleUploadSize()"
  nameWithType: "ParallelTransferOptions.getMaxSingleUploadSize()"
  fullName: "com.azure.storage.common.ParallelTransferOptions.getMaxSingleUploadSize()"
  overload: "com.azure.storage.common.ParallelTransferOptions.getMaxSingleUploadSize*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Gets the value above which the upload will be broken into blocks and parallelized."
  syntax:
    content: "public Integer getMaxSingleUploadSize()"
    return:
      type: "java.lang.Integer"
      description: "The threshold value."
- uid: "com.azure.storage.common.ParallelTransferOptions.getNumBuffers()"
  id: "getNumBuffers()"
  parent: "com.azure.storage.common.ParallelTransferOptions"
  langs:
  - "java"
  name: "getNumBuffers()"
  nameWithType: "ParallelTransferOptions.getNumBuffers()"
  fullName: "com.azure.storage.common.ParallelTransferOptions.getNumBuffers()"
  overload: "com.azure.storage.common.ParallelTransferOptions.getNumBuffers*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Gets the number of buffers being used for a transfer operation."
  syntax:
    content: "public Integer getNumBuffers()"
    return:
      type: "java.lang.Integer"
      description: "The number of buffers."
- uid: "com.azure.storage.common.ParallelTransferOptions.getProgressReceiver()"
  id: "getProgressReceiver()"
  parent: "com.azure.storage.common.ParallelTransferOptions"
  langs:
  - "java"
  name: "getProgressReceiver()"
  nameWithType: "ParallelTransferOptions.getProgressReceiver()"
  fullName: "com.azure.storage.common.ParallelTransferOptions.getProgressReceiver()"
  overload: "com.azure.storage.common.ParallelTransferOptions.getProgressReceiver*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Gets the Progress receiver for parallel reporting"
  syntax:
    content: "public ProgressReceiver getProgressReceiver()"
    return:
      type: "com.azure.storage.common.ProgressReceiver"
      description: "The progress reporter"
references:
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.azure.storage.common.ProgressReceiver"
  name: "ProgressReceiver"
  nameWithType: "ProgressReceiver"
  fullName: "com.azure.storage.common.ProgressReceiver"
- uid: "com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions*"
  name: "ParallelTransferOptions"
  nameWithType: "ParallelTransferOptions.ParallelTransferOptions"
  fullName: "com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.ParallelTransferOptions.getBlockSize*"
  name: "getBlockSize"
  nameWithType: "ParallelTransferOptions.getBlockSize"
  fullName: "com.azure.storage.common.ParallelTransferOptions.getBlockSize"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.ParallelTransferOptions.getNumBuffers*"
  name: "getNumBuffers"
  nameWithType: "ParallelTransferOptions.getNumBuffers"
  fullName: "com.azure.storage.common.ParallelTransferOptions.getNumBuffers"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.ParallelTransferOptions.getProgressReceiver*"
  name: "getProgressReceiver"
  nameWithType: "ParallelTransferOptions.getProgressReceiver"
  fullName: "com.azure.storage.common.ParallelTransferOptions.getProgressReceiver"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.ParallelTransferOptions.getMaxSingleUploadSize*"
  name: "getMaxSingleUploadSize"
  nameWithType: "ParallelTransferOptions.getMaxSingleUploadSize"
  fullName: "com.azure.storage.common.ParallelTransferOptions.getMaxSingleUploadSize"
  package: "com.azure.storage.common"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
