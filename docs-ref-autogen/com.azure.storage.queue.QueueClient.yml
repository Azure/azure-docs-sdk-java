### YamlMime:ManagedReference
items:
- uid: com.azure.storage.queue.QueueClient
  id: QueueClient
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue
  children:
  - com.azure.storage.queue.QueueClient.clearMessages()
  - com.azure.storage.queue.QueueClient.clearMessagesWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.queue.QueueClient.create()
  - com.azure.storage.queue.QueueClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.queue.QueueClient.delete()
  - com.azure.storage.queue.QueueClient.deleteMessage(java.lang.String,java.lang.String)
  - com.azure.storage.queue.QueueClient.deleteMessageWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.queue.QueueClient.deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.queue.QueueClient.generateSas(com.azure.storage.queue.sas.QueueServiceSasSignatureValues)
  - com.azure.storage.queue.QueueClient.getAccessPolicy()
  - com.azure.storage.queue.QueueClient.getAccountName()
  - com.azure.storage.queue.QueueClient.getHttpPipeline()
  - com.azure.storage.queue.QueueClient.getProperties()
  - com.azure.storage.queue.QueueClient.getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.queue.QueueClient.getQueueName()
  - com.azure.storage.queue.QueueClient.getQueueUrl()
  - com.azure.storage.queue.QueueClient.getServiceVersion()
  - com.azure.storage.queue.QueueClient.peekMessage()
  - com.azure.storage.queue.QueueClient.peekMessages(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.queue.QueueClient.receiveMessage()
  - com.azure.storage.queue.QueueClient.receiveMessages(java.lang.Integer)
  - com.azure.storage.queue.QueueClient.receiveMessages(java.lang.Integer,java.time.Duration,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.queue.QueueClient.sendMessage(java.lang.String)
  - com.azure.storage.queue.QueueClient.sendMessageWithResponse(java.lang.String,java.time.Duration,java.time.Duration,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.queue.QueueClient.setAccessPolicy(java.util.List<com.azure.storage.queue.models.QueueSignedIdentifier>)
  - com.azure.storage.queue.QueueClient.setAccessPolicyWithResponse(java.util.List<com.azure.storage.queue.models.QueueSignedIdentifier>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.queue.QueueClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.queue.QueueClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.queue.QueueClient.updateMessage(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)
  - com.azure.storage.queue.QueueClient.updateMessageWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,java.time.Duration,com.azure.core.util.Context)
  langs:
  - java
  name: QueueClient
  nameWithType: QueueClient
  fullName: com.azure.storage.queue.QueueClient
  type: Class
  package: com.azure.storage.queue
  summary: >-
    This class provides a client that contains all the operations for interacting with a queue in Azure Storage Queue. Operations allowed by the client are creating and deleting the queue, retrieving and updating metadata and access policies of the queue, and enqueuing, dequeuing, peeking, updating, and deleting messages.


    **Instantiating an Synchronous Queue Client**


    ```java

    QueueClient client = new QueueClientBuilder()
         .connectionString("connectionstring")
         .endpoint("endpoint")
         .buildClient();
    ```


    View <xref uid="com.azure.storage.queue.QueueClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the client.
  syntax:
    content: public final class QueueClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.queue.QueueClient.QueueClient(com.azure.storage.queue.QueueAsyncClient)
  id: QueueClient(com.azure.storage.queue.QueueAsyncClient)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: QueueClient(QueueAsyncClient client)
  nameWithType: QueueClient.QueueClient(QueueAsyncClient client)
  fullName: com.azure.storage.queue.QueueClient.QueueClient(QueueAsyncClient client)
  overload: com.azure.storage.queue.QueueClient.QueueClient*
  type: Constructor
  package: com.azure.storage.queue
  summary: Creates a QueueClient that wraps a QueueAsyncClient and blocks requests.
  syntax:
    content: " QueueClient(QueueAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.storage.queue.QueueAsyncClient
      description: QueueAsyncClient that is used to send requests
- uid: com.azure.storage.queue.QueueClient.clearMessages()
  id: clearMessages()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: clearMessages()
  nameWithType: QueueClient.clearMessages()
  fullName: com.azure.storage.queue.QueueClient.clearMessages()
  overload: com.azure.storage.queue.QueueClient.clearMessages*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Deletes all messages in the queue.


    **Code Samples**


    Clear the messages


    ```java

    client.clearMessages();
     System.out.println("Clearing messages completed.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/clear-messages
  syntax:
    content: public void clearMessages()
- uid: com.azure.storage.queue.QueueClient.clearMessagesWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: clearMessagesWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: clearMessagesWithResponse(Duration timeout, Context context)
  nameWithType: QueueClient.clearMessagesWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.clearMessagesWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.clearMessagesWithResponse*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Deletes all messages in the queue.


    **Code Samples**


    Clear the messages


    ```java

    Response<Void> response = client.clearMessagesWithResponse(Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("Clearing messages completed with status code %d", response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/clear-messages
  syntax:
    content: public Response<Void> clearMessagesWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.queue.QueueClient.create()
  id: create()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: create()
  nameWithType: QueueClient.create()
  fullName: com.azure.storage.queue.QueueClient.create()
  overload: com.azure.storage.queue.QueueClient.create*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Creates a new queue.


    **Code Samples**


    Create a queue


    ```java

    client.create();
     System.out.println("Complete creating queue.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4
  syntax:
    content: public void create()
- uid: com.azure.storage.queue.QueueClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  id: createWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: createWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  nameWithType: QueueClient.createWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.createWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.createWithResponse*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Creates a new queue.


    **Code Samples**


    Create a queue with metadata "queue:metadataMap"


    ```java

    Response<Void> response = client.createWithResponse(Collections.singletonMap("queue", "metadataMap"),
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Complete creating queue with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4
  syntax:
    content: public Response<Void> createWithResponse(Map<String,String> metadata, Duration timeout, Context context)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the queue
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.queue.QueueClient.delete()
  id: delete()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: delete()
  nameWithType: QueueClient.delete()
  fullName: com.azure.storage.queue.QueueClient.delete()
  overload: com.azure.storage.queue.QueueClient.delete*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Permanently deletes the queue.


    **Code Samples**


    Delete a queue


    ```java

    client.delete();
     System.out.println("Complete deleting the queue.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3
  syntax:
    content: public void delete()
- uid: com.azure.storage.queue.QueueClient.deleteMessage(java.lang.String,java.lang.String)
  id: deleteMessage(java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: deleteMessage(String messageId, String popReceipt)
  nameWithType: QueueClient.deleteMessage(String messageId, String popReceipt)
  fullName: com.azure.storage.queue.QueueClient.deleteMessage(String messageId, String popReceipt)
  overload: com.azure.storage.queue.QueueClient.deleteMessage*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Deletes the specified message in the queue


    **Code Samples**


    Delete the first message


    ```java

    QueueMessageItem queueMessageItem = client.receiveMessage();
     client.deleteMessage(queueMessageItem.getMessageId(), queueMessageItem.getPopReceipt());
     System.out.println("Complete deleting the message.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-message2
  syntax:
    content: public void deleteMessage(String messageId, String popReceipt)
    parameters:
    - id: messageId
      type: java.lang.String
      description: Id of the message to deleted
    - id: popReceipt
      type: java.lang.String
      description: Unique identifier that must match for the message to be deleted
- uid: com.azure.storage.queue.QueueClient.deleteMessageWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: deleteMessageWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: deleteMessageWithResponse(String messageId, String popReceipt, Duration timeout, Context context)
  nameWithType: QueueClient.deleteMessageWithResponse(String messageId, String popReceipt, Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.deleteMessageWithResponse(String messageId, String popReceipt, Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.deleteMessageWithResponse*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Deletes the specified message in the queue


    **Code Samples**


    Delete the first message


    ```java

    QueueMessageItem queueMessageItem = client.receiveMessage();
     Response<Void> response = client.deleteMessageWithResponse(queueMessageItem.getMessageId(),
         queueMessageItem.getPopReceipt(), Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Complete deleting the message with status code " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-message2
  syntax:
    content: public Response<Void> deleteMessageWithResponse(String messageId, String popReceipt, Duration timeout, Context context)
    parameters:
    - id: messageId
      type: java.lang.String
      description: Id of the message to deleted
    - id: popReceipt
      type: java.lang.String
      description: Unique identifier that must match for the message to be deleted
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.queue.QueueClient.deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: deleteWithResponse(Duration timeout, Context context)
  nameWithType: QueueClient.deleteWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.deleteWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.deleteWithResponse*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Permanently deletes the queue.


    **Code Samples**


    Delete a queue


    ```java

    Response<Void> response = client.deleteWithResponse(Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Complete deleting the queue with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3
  syntax:
    content: public Response<Void> deleteWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.queue.QueueClient.generateSas(com.azure.storage.queue.sas.QueueServiceSasSignatureValues)
  id: generateSas(com.azure.storage.queue.sas.QueueServiceSasSignatureValues)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)
  nameWithType: QueueClient.generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)
  fullName: com.azure.storage.queue.QueueClient.generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)
  overload: com.azure.storage.queue.QueueClient.generateSas*
  type: Method
  package: com.azure.storage.queue
  summary: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">QueueServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">QueueServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n QueueSasPermission permission = new QueueSasPermission().setReadPermission(true);\n \n QueueServiceSasSignatureValues values = new QueueServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: public String generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)
    parameters:
    - id: queueServiceSasSignatureValues
      type: com.azure.storage.queue.sas.QueueServiceSasSignatureValues
      description: <xref uid="com.azure.storage.queue.sas.QueueServiceSasSignatureValues" data-throw-if-not-resolved="false">QueueServiceSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.queue.QueueClient.getAccessPolicy()
  id: getAccessPolicy()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: getAccessPolicy()
  nameWithType: QueueClient.getAccessPolicy()
  fullName: com.azure.storage.queue.QueueClient.getAccessPolicy()
  overload: com.azure.storage.queue.QueueClient.getAccessPolicy*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Retrieves stored access policies specified on the queue.


    **Code Samples**


    List the stored access policies


    ```java

    for (QueueSignedIdentifier permission : client.getAccessPolicy()) {
         System.out.printf("Access policy %s allows these permissions: %s", permission.getId(),
             permission.getAccessPolicy().getPermissions());
     }
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-acl
  syntax:
    content: public PagedIterable<QueueSignedIdentifier> getAccessPolicy()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.queue.models.QueueSignedIdentifier>
      description: The stored access policies specified on the queue.
- uid: com.azure.storage.queue.QueueClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: getAccountName()
  nameWithType: QueueClient.getAccountName()
  fullName: com.azure.storage.queue.QueueClient.getAccountName()
  overload: com.azure.storage.queue.QueueClient.getAccountName*
  type: Method
  package: com.azure.storage.queue
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.queue.QueueClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: QueueClient.getHttpPipeline()
  fullName: com.azure.storage.queue.QueueClient.getHttpPipeline()
  overload: com.azure.storage.queue.QueueClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.queue
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.queue.QueueClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: getProperties()
  nameWithType: QueueClient.getProperties()
  fullName: com.azure.storage.queue.QueueClient.getProperties()
  overload: com.azure.storage.queue.QueueClient.getProperties*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Retrieves metadata and approximate message count of the queue.


    **Code Samples**


    Get the properties of the queue


    ```java

    QueueProperties properties = client.getProperties();
     System.out.printf("Metadata: %s, Approximate message count: %d", properties.getMetadata(),
         properties.getApproximateMessagesCount());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-metadata
  syntax:
    content: public QueueProperties getProperties()
    return:
      type: com.azure.storage.queue.models.QueueProperties
      description: >-
        A response containing a <xref uid="com.azure.storage.queue.models.QueueProperties" data-throw-if-not-resolved="false">QueueProperties</xref> value which contains the metadata and approximate
         messages count of the queue.
- uid: com.azure.storage.queue.QueueClient.getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: getPropertiesWithResponse(Duration timeout, Context context)
  nameWithType: QueueClient.getPropertiesWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.getPropertiesWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Retrieves metadata and approximate message count of the queue.


    **Code Samples**


    Get the properties of the queue


    ```java

    QueueProperties properties = client.getPropertiesWithResponse(Duration.ofSeconds(1),
         new Context(key1, value1)).getValue();
     System.out.printf("Metadata: %s, Approximate message count: %d", properties.getMetadata(),
         properties.getApproximateMessagesCount());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-metadata
  syntax:
    content: public Response<QueueProperties> getPropertiesWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.queue.models.QueueProperties>
      description: >-
        A response containing a <xref uid="com.azure.storage.queue.models.QueueProperties" data-throw-if-not-resolved="false">QueueProperties</xref> value which contains the metadata and approximate
         messages count of the queue.
- uid: com.azure.storage.queue.QueueClient.getQueueName()
  id: getQueueName()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: getQueueName()
  nameWithType: QueueClient.getQueueName()
  fullName: com.azure.storage.queue.QueueClient.getQueueName()
  overload: com.azure.storage.queue.QueueClient.getQueueName*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Get the queue name of the client.


    **Code Samples**


    ```java

    String queueName = client.getQueueName();
     System.out.println("The name of the queue is " + queueName);
    ```
  syntax:
    content: public String getQueueName()
    return:
      type: java.lang.String
      description: The name of the queue.
- uid: com.azure.storage.queue.QueueClient.getQueueUrl()
  id: getQueueUrl()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: getQueueUrl()
  nameWithType: QueueClient.getQueueUrl()
  fullName: com.azure.storage.queue.QueueClient.getQueueUrl()
  overload: com.azure.storage.queue.QueueClient.getQueueUrl*
  type: Method
  package: com.azure.storage.queue
  syntax:
    content: public String getQueueUrl()
    return:
      type: java.lang.String
      description: the URL of the storage queue.
- uid: com.azure.storage.queue.QueueClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: QueueClient.getServiceVersion()
  fullName: com.azure.storage.queue.QueueClient.getServiceVersion()
  overload: com.azure.storage.queue.QueueClient.getServiceVersion*
  type: Method
  package: com.azure.storage.queue
  summary: Gets the service version the client is using.
  syntax:
    content: public QueueServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.queue.QueueServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.queue.QueueClient.peekMessage()
  id: peekMessage()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: peekMessage()
  nameWithType: QueueClient.peekMessage()
  fullName: com.azure.storage.queue.QueueClient.peekMessage()
  overload: com.azure.storage.queue.QueueClient.peekMessage*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Peeks the first message in the queue. Peeked messages don't contain the necessary information needed to interact with the message nor will it hide messages from other operations on the queue.


    **Code Samples**


    Peek the first message


    ```java

    PeekedMessageItem peekedMessageItem = client.peekMessage();
     System.out.println("Complete peeking the message: " + peekedMessageItem.getMessageText());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/peek-messages
  syntax:
    content: public PeekedMessageItem peekMessage()
    return:
      type: com.azure.storage.queue.models.PeekedMessageItem
      description: A <xref uid="com.azure.storage.queue.models.PeekedMessageItem" data-throw-if-not-resolved="false">PeekedMessageItem</xref> that contains metadata about the message.
- uid: com.azure.storage.queue.QueueClient.peekMessages(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)
  id: peekMessages(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: peekMessages(Integer maxMessages, Duration timeout, Context context)
  nameWithType: QueueClient.peekMessages(Integer maxMessages, Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.peekMessages(Integer maxMessages, Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.peekMessages*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Peek messages from the front of the queue up to the maximum number of messages. Peeked messages don't contain the necessary information needed to interact with the message nor will it hide messages from other operations on the queue.


    **Code Samples**


    Peek up to the first five messages


    ```java

    client.peekMessages(5, Duration.ofSeconds(1), new Context(key1, value1)).forEach(
         peekMessage -> System.out.printf("Peeked message %s has been received %d times",
             peekMessage.getMessageId(), peekMessage.getDequeueCount())
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/peek-messages
  syntax:
    content: public PagedIterable<PeekedMessageItem> peekMessages(Integer maxMessages, Duration timeout, Context context)
    parameters:
    - id: maxMessages
      type: java.lang.Integer
      description: >-
        Optional. Maximum number of messages to peek, if there are less messages exist in the queue
         than requested all the messages will be peeked. If left empty only 1 message will be peeked, the allowed range is
         1 to 32 messages.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.queue.models.PeekedMessageItem>
      description: >-
        Up to <code>maxMessages</code> <xref uid="com.azure.storage.queue.models.PeekedMessageItem" data-throw-if-not-resolved="false">PeekedMessages</xref> from the queue. Each PeekedMessage
         contains metadata about the message.
- uid: com.azure.storage.queue.QueueClient.receiveMessage()
  id: receiveMessage()
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: receiveMessage()
  nameWithType: QueueClient.receiveMessage()
  fullName: com.azure.storage.queue.QueueClient.receiveMessage()
  overload: com.azure.storage.queue.QueueClient.receiveMessage*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Retrieves the first message in the queue and hides it from other operations for 30 seconds.


    **Code Samples**


    Receive a message


    ```java

    QueueMessageItem queueMessageItem = client.receiveMessage();
     System.out.println("Complete receiving the message: " + queueMessageItem.getMessageId());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages
  syntax:
    content: public QueueMessageItem receiveMessage()
    return:
      type: com.azure.storage.queue.models.QueueMessageItem
      description: >-
        The first <xref uid="com.azure.storage.queue.models.QueueMessageItem" data-throw-if-not-resolved="false">MessageItem</xref> in the queue, it contains
         <xref uid="com.azure.storage.queue.models.QueueMessageItem.getMessageId()" data-throw-if-not-resolved="false">messageId</xref> and
         <xref uid="com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()" data-throw-if-not-resolved="false">popReceipt</xref> used to interact with the message,
         additionally it contains other metadata about the message.
- uid: com.azure.storage.queue.QueueClient.receiveMessages(java.lang.Integer)
  id: receiveMessages(java.lang.Integer)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: receiveMessages(Integer maxMessages)
  nameWithType: QueueClient.receiveMessages(Integer maxMessages)
  fullName: com.azure.storage.queue.QueueClient.receiveMessages(Integer maxMessages)
  overload: com.azure.storage.queue.QueueClient.receiveMessages*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Retrieves up to the maximum number of messages from the queue and hides them from other operations for 30 seconds.


    **Code Samples**


    Receive up to 5 messages


    ```java

    for (QueueMessageItem message : client.receiveMessages(5)) {
         System.out.printf("Received %s and it becomes visible at %s",
             message.getMessageId(), message.getTimeNextVisible());
     }
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages
  syntax:
    content: public PagedIterable<QueueMessageItem> receiveMessages(Integer maxMessages)
    parameters:
    - id: maxMessages
      type: java.lang.Integer
      description: >-
        Optional. Maximum number of messages to get, if there are less messages exist in the queue
         than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed
         range is 1 to 32 messages.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.queue.models.QueueMessageItem>
      description: >-
        Up to <code>maxMessages</code> <xref uid="com.azure.storage.queue.models.QueueMessageItem" data-throw-if-not-resolved="false">ReceiveMessageItem</xref> from the queue.
         Each ReceiveMessageItem contains <xref uid="com.azure.storage.queue.models.QueueMessageItem.getMessageId()" data-throw-if-not-resolved="false">messageId</xref> and
         <xref uid="com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()" data-throw-if-not-resolved="false">popReceipt</xref>
         used to interact with the message and other metadata about the message.
- uid: com.azure.storage.queue.QueueClient.receiveMessages(java.lang.Integer,java.time.Duration,java.time.Duration,com.azure.core.util.Context)
  id: receiveMessages(java.lang.Integer,java.time.Duration,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: receiveMessages(Integer maxMessages, Duration visibilityTimeout, Duration timeout, Context context)
  nameWithType: QueueClient.receiveMessages(Integer maxMessages, Duration visibilityTimeout, Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.receiveMessages(Integer maxMessages, Duration visibilityTimeout, Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.receiveMessages*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Retrieves up to the maximum number of messages from the queue and hides them from other operations for the timeout period.


    **Code Samples**


    Receive up to 5 messages and give them a 60 second timeout period


    ```java

    for (QueueMessageItem message : client.receiveMessages(5, Duration.ofSeconds(60),
         Duration.ofSeconds(1), new Context(key1, value1))) {
         System.out.printf("Received %s and it becomes visible at %s",
             message.getMessageId(), message.getTimeNextVisible());
     }
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages
  syntax:
    content: public PagedIterable<QueueMessageItem> receiveMessages(Integer maxMessages, Duration visibilityTimeout, Duration timeout, Context context)
    parameters:
    - id: maxMessages
      type: java.lang.Integer
      description: >-
        Optional. Maximum number of messages to get, if there are less messages exist in the queue
         than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed
         range is 1 to 32 messages.
    - id: visibilityTimeout
      type: java.time.Duration
      description: >-
        Optional. The timeout period for how long the message is invisible in the queue. If left
         empty the received messages will be invisible for 30 seconds. The timeout must be between 1 second and 7 days.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.queue.models.QueueMessageItem>
      description: >-
        Up to <code>maxMessages</code> <xref uid="com.azure.storage.queue.models.QueueMessageItem" data-throw-if-not-resolved="false">DequeuedMessages</xref> from the queue. Each DeqeuedMessage
         contains <xref uid="com.azure.storage.queue.models.QueueMessageItem.getMessageId()" data-throw-if-not-resolved="false">messageId</xref> and
         <xref uid="com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()" data-throw-if-not-resolved="false">popReceipt</xref>
         used to interact with the message and other metadata about the message.
- uid: com.azure.storage.queue.QueueClient.sendMessage(java.lang.String)
  id: sendMessage(java.lang.String)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: sendMessage(String messageText)
  nameWithType: QueueClient.sendMessage(String messageText)
  fullName: com.azure.storage.queue.QueueClient.sendMessage(String messageText)
  overload: com.azure.storage.queue.QueueClient.sendMessage*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Sends a message that has a time-to-live of 7 days and is instantly visible.


    **Code Samples**


    Sends a message of "Hello, Azure"


    ```java

    SendMessageResult response = client.sendMessage("hello msg");
     System.out.println("Complete enqueuing the message with message Id" + response.getMessageId());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-message
  syntax:
    content: public SendMessageResult sendMessage(String messageText)
    parameters:
    - id: messageText
      type: java.lang.String
      description: Message text
    return:
      type: com.azure.storage.queue.models.SendMessageResult
      description: >-
        A <xref uid="com.azure.storage.queue.models.SendMessageResult" data-throw-if-not-resolved="false">SendMessageResult</xref> value that contains the <xref uid="com.azure.storage.queue.models.SendMessageResult.getMessageId()" data-throw-if-not-resolved="false">messageId</xref>
         and <xref uid="com.azure.storage.queue.models.SendMessageResult.getPopReceipt()" data-throw-if-not-resolved="false">popReceipt</xref> that are used to interact with the message
         and other metadata about the enqueued message.
- uid: com.azure.storage.queue.QueueClient.sendMessageWithResponse(java.lang.String,java.time.Duration,java.time.Duration,java.time.Duration,com.azure.core.util.Context)
  id: sendMessageWithResponse(java.lang.String,java.time.Duration,java.time.Duration,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive, Duration timeout, Context context)
  nameWithType: QueueClient.sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive, Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive, Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.sendMessageWithResponse*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Sends a message with a given time-to-live and a timeout period where the message is invisible in the queue.


    **Code Samples**


    Add a message of "Hello, Azure" that has a timeout of 5 seconds


    ```java

    SendMessageResult sentMessageItem = client.sendMessageWithResponse("Hello, Azure",
         Duration.ofSeconds(5), null, Duration.ofSeconds(1), new Context(key1, value1)).getValue();
     System.out.printf("Message %s expires at %s", sentMessageItem.getMessageId(),
         sentMessageItem.getExpirationTime());
    ```


    Add a message of "Goodbye, Azure" that has a time to live of 5 seconds


    ```java

    SendMessageResult enqueuedMessage = client.sendMessageWithResponse("Goodbye, Azure",
         null, Duration.ofSeconds(5), Duration.ofSeconds(1), new Context(key1, value1)).getValue();
     System.out.printf("Message %s expires at %s", enqueuedMessage.getMessageId(),
         enqueuedMessage.getExpirationTime());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-message
  syntax:
    content: public Response<SendMessageResult> sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive, Duration timeout, Context context)
    parameters:
    - id: messageText
      type: java.lang.String
      description: Message text
    - id: visibilityTimeout
      type: java.time.Duration
      description: >-
        Optional. The timeout period for how long the message is invisible in the queue. If
         unset the value will default to 0 and the message will be instantly visible. The timeout must be between 0
         seconds and 7 days.
    - id: timeToLive
      type: java.time.Duration
      description: >-
        Optional. How long the message will stay alive in the queue. If unset the value will default to
         7 days, if -1 is passed the message will not expire. The time to live must be -1 or any positive number.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.queue.models.SendMessageResult>
      description: >-
        A response containing the <xref uid="com.azure.storage.queue.models.SendMessageResult" data-throw-if-not-resolved="false">SendMessageResult</xref> value that contains the
         <xref uid="com.azure.storage.queue.models.SendMessageResult.getMessageId()" data-throw-if-not-resolved="false">messageId</xref> and
         <xref uid="com.azure.storage.queue.models.SendMessageResult.getPopReceipt()" data-throw-if-not-resolved="false">popReceipt</xref> that are used to
         interact with the message and other metadata about the enqueued message.
- uid: com.azure.storage.queue.QueueClient.setAccessPolicy(java.util.List<com.azure.storage.queue.models.QueueSignedIdentifier>)
  id: setAccessPolicy(java.util.List<com.azure.storage.queue.models.QueueSignedIdentifier>)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: setAccessPolicy(List<QueueSignedIdentifier> permissions)
  nameWithType: QueueClient.setAccessPolicy(List<QueueSignedIdentifier> permissions)
  fullName: com.azure.storage.queue.QueueClient.setAccessPolicy(List<QueueSignedIdentifier> permissions)
  overload: com.azure.storage.queue.QueueClient.setAccessPolicy*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Sets stored access policies on the queue.


    **Code Samples**


    Set a read only stored access policy


    ```java

    QueueAccessPolicy accessPolicy = new QueueAccessPolicy().setPermissions("r")
         .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))
         .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));
     QueueSignedIdentifier permission = new QueueSignedIdentifier().setId("mypolicy").setAccessPolicy(accessPolicy);
     client.setAccessPolicy(Collections.singletonList(permission));
     System.out.println("Setting access policies completed.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl
  syntax:
    content: public void setAccessPolicy(List<QueueSignedIdentifier> permissions)
    parameters:
    - id: permissions
      type: java.util.List<com.azure.storage.queue.models.QueueSignedIdentifier>
      description: Access policies to set on the queue
- uid: com.azure.storage.queue.QueueClient.setAccessPolicyWithResponse(java.util.List<com.azure.storage.queue.models.QueueSignedIdentifier>,java.time.Duration,com.azure.core.util.Context)
  id: setAccessPolicyWithResponse(java.util.List<com.azure.storage.queue.models.QueueSignedIdentifier>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: setAccessPolicyWithResponse(List<QueueSignedIdentifier> permissions, Duration timeout, Context context)
  nameWithType: QueueClient.setAccessPolicyWithResponse(List<QueueSignedIdentifier> permissions, Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.setAccessPolicyWithResponse(List<QueueSignedIdentifier> permissions, Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.setAccessPolicyWithResponse*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Sets stored access policies on the queue.


    **Code Samples**


    Set a read only stored access policy


    ```java

    QueueAccessPolicy accessPolicy = new QueueAccessPolicy().setPermissions("r")
         .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))
         .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));
     QueueSignedIdentifier permission = new QueueSignedIdentifier().setId("mypolicy").setAccessPolicy(accessPolicy);
     Response<Void> response = client.setAccessPolicyWithResponse(Collections.singletonList(permission),
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("Setting access policies completed with status code %d", response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl
  syntax:
    content: public Response<Void> setAccessPolicyWithResponse(List<QueueSignedIdentifier> permissions, Duration timeout, Context context)
    parameters:
    - id: permissions
      type: java.util.List<com.azure.storage.queue.models.QueueSignedIdentifier>
      description: Access policies to set on the queue
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.queue.QueueClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: QueueClient.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.queue.QueueClient.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.queue.QueueClient.setMetadata*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Sets the metadata of the queue. Passing in a `null` value for metadata will clear the metadata associated with the queue.


    **Code Samples**


    Set the queue's metadata to "queue:metadataMap"


    ```java

    client.setMetadata(Collections.singletonMap("queue", "metadataMap"));
     System.out.println("Setting metadata completed.");
    ```


    Clear the queue's metadata


    ```java

    client.setMetadata(null);
     System.out.println("Clearing metadata completed.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-metadata
  syntax:
    content: public void setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to set on the queue
- uid: com.azure.storage.queue.QueueClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  nameWithType: QueueClient.setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Sets the metadata of the queue. Passing in a `null` value for metadata will clear the metadata associated with the queue.


    **Code Samples**


    Set the queue's metadata to "queue:metadataMap"


    ```java

    client.setMetadataWithResponse(Collections.singletonMap("queue", "metadataMap"),
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Setting metadata completed.");
    ```


    Clear the queue's metadata


    ```java

    Response<Void> response = client.setMetadataWithResponse(null, Duration.ofSeconds(1),
         new Context(key1, value1));
     System.out.printf("Clearing metadata completed with status code %d", response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-metadata
  syntax:
    content: public Response<Void> setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to set on the queue
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.queue.QueueClient.updateMessage(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)
  id: updateMessage(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)
  nameWithType: QueueClient.updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)
  fullName: com.azure.storage.queue.QueueClient.updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)
  overload: com.azure.storage.queue.QueueClient.updateMessage*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Updates the specific message in the queue with a new message and resets the visibility timeout.


    **Code Samples**


    Dequeue the first message and update it to "Hello again, Azure" and hide it for 5 seconds


    ```java

    QueueMessageItem queueMessageItem = client.receiveMessage();
     UpdateMessageResult result = client.updateMessage(queueMessageItem.getMessageId(),
         queueMessageItem.getPopReceipt(), "newText", null);
     System.out.println("Complete updating the message with the receipt " + result.getPopReceipt());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/update-message
  syntax:
    content: public UpdateMessageResult updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)
    parameters:
    - id: messageId
      type: java.lang.String
      description: Id of the message to update
    - id: popReceipt
      type: java.lang.String
      description: Unique identifier that must match for the message to be updated
    - id: messageText
      type: java.lang.String
      description: Updated value for the message
    - id: visibilityTimeout
      type: java.time.Duration
      description: >-
        The timeout period for how long the message is invisible in the queue in seconds. The
         timeout period must be between 1 second and 7 days.
    return:
      type: com.azure.storage.queue.models.UpdateMessageResult
      description: >-
        A <xref uid="com.azure.storage.queue.models.UpdateMessageResult" data-throw-if-not-resolved="false">UpdateMessageResult</xref> that contains the new
         <xref uid="com.azure.storage.queue.models.UpdateMessageResult.getPopReceipt()" data-throw-if-not-resolved="false">popReceipt</xref> to interact with the message,
         additionally contains the updated metadata about the message.
- uid: com.azure.storage.queue.QueueClient.updateMessageWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,java.time.Duration,com.azure.core.util.Context)
  id: updateMessageWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-queue:12.6.0
  parent: com.azure.storage.queue.QueueClient
  langs:
  - java
  name: updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout, Duration timeout, Context context)
  nameWithType: QueueClient.updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout, Duration timeout, Context context)
  fullName: com.azure.storage.queue.QueueClient.updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout, Duration timeout, Context context)
  overload: com.azure.storage.queue.QueueClient.updateMessageWithResponse*
  type: Method
  package: com.azure.storage.queue
  summary: >-
    Updates the specific message in the queue with a new message and resets the visibility timeout.


    **Code Samples**


    Dequeue the first message and update it to "Hello again, Azure" and hide it for 5 seconds


    ```java

    QueueMessageItem queueMessageItem = client.receiveMessage();
     Response<UpdateMessageResult> response = client.updateMessageWithResponse(queueMessageItem.getMessageId(),
         queueMessageItem.getPopReceipt(), "newText", null, Duration.ofSeconds(1),
         new Context(key1, value1));
     System.out.println("Complete updating the message with status code " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/update-message
  syntax:
    content: public Response<UpdateMessageResult> updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout, Duration timeout, Context context)
    parameters:
    - id: messageId
      type: java.lang.String
      description: Id of the message to update
    - id: popReceipt
      type: java.lang.String
      description: Unique identifier that must match for the message to be updated
    - id: messageText
      type: java.lang.String
      description: Updated value for the message
    - id: visibilityTimeout
      type: java.time.Duration
      description: >-
        The timeout period for how long the message is invisible in the queue in seconds. The
         timeout period must be between 1 second and 7 days.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.queue.models.UpdateMessageResult>
      description: >-
        A response containing the <xref uid="com.azure.storage.queue.models.UpdateMessageResult" data-throw-if-not-resolved="false">UpdateMessageResult</xref> that contains the new <xref uid="com.azure.storage.queue.models.UpdateMessageResult.getPopReceipt()" data-throw-if-not-resolved="false">popReceipt</xref> to interact with the message, additionally contains the updated
         metadata about the message.
references:
- uid: com.azure.storage.queue.QueueAsyncClient
  name: QueueAsyncClient
  nameWithType: QueueAsyncClient
  fullName: com.azure.storage.queue.QueueAsyncClient
- uid: com.azure.storage.queue.QueueClient.QueueClient*
  name: QueueClient
  nameWithType: QueueClient.QueueClient
  fullName: com.azure.storage.queue.QueueClient.QueueClient
  package: com.azure.storage.queue
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.queue.QueueClient.getQueueUrl*
  name: getQueueUrl
  nameWithType: QueueClient.getQueueUrl
  fullName: com.azure.storage.queue.QueueClient.getQueueUrl
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueServiceVersion
  name: QueueServiceVersion
  nameWithType: QueueServiceVersion
  fullName: com.azure.storage.queue.QueueServiceVersion
- uid: com.azure.storage.queue.QueueClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: QueueClient.getServiceVersion
  fullName: com.azure.storage.queue.QueueClient.getServiceVersion
  package: com.azure.storage.queue
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.queue.QueueClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: QueueClient.getHttpPipeline
  fullName: com.azure.storage.queue.QueueClient.getHttpPipeline
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.create*
  name: create
  nameWithType: QueueClient.create
  fullName: com.azure.storage.queue.QueueClient.create
  package: com.azure.storage.queue
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.queue.QueueClient.createWithResponse*
  name: createWithResponse
  nameWithType: QueueClient.createWithResponse
  fullName: com.azure.storage.queue.QueueClient.createWithResponse
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.delete*
  name: delete
  nameWithType: QueueClient.delete
  fullName: com.azure.storage.queue.QueueClient.delete
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: QueueClient.deleteWithResponse
  fullName: com.azure.storage.queue.QueueClient.deleteWithResponse
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.models.QueueProperties
  name: QueueProperties
  nameWithType: QueueProperties
  fullName: com.azure.storage.queue.models.QueueProperties
- uid: com.azure.storage.queue.QueueClient.getProperties*
  name: getProperties
  nameWithType: QueueClient.getProperties
  fullName: com.azure.storage.queue.QueueClient.getProperties
  package: com.azure.storage.queue
- uid: com.azure.core.http.rest.Response<com.azure.storage.queue.models.QueueProperties>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.queue.models.QueueProperties
    name: QueueProperties
    fullName: com.azure.storage.queue.models.QueueProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.queue.QueueClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: QueueClient.getPropertiesWithResponse
  fullName: com.azure.storage.queue.QueueClient.getPropertiesWithResponse
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.setMetadata*
  name: setMetadata
  nameWithType: QueueClient.setMetadata
  fullName: com.azure.storage.queue.QueueClient.setMetadata
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.setMetadataWithResponse*
  name: setMetadataWithResponse
  nameWithType: QueueClient.setMetadataWithResponse
  fullName: com.azure.storage.queue.QueueClient.setMetadataWithResponse
  package: com.azure.storage.queue
- uid: com.azure.core.http.rest.PagedIterable<com.azure.storage.queue.models.QueueSignedIdentifier>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.storage.queue.models.QueueSignedIdentifier
    name: QueueSignedIdentifier
    fullName: com.azure.storage.queue.models.QueueSignedIdentifier
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.queue.QueueClient.getAccessPolicy*
  name: getAccessPolicy
  nameWithType: QueueClient.getAccessPolicy
  fullName: com.azure.storage.queue.QueueClient.getAccessPolicy
  package: com.azure.storage.queue
- uid: java.util.List<com.azure.storage.queue.models.QueueSignedIdentifier>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.storage.queue.models.QueueSignedIdentifier
    name: QueueSignedIdentifier
    fullName: com.azure.storage.queue.models.QueueSignedIdentifier
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.queue.QueueClient.setAccessPolicy*
  name: setAccessPolicy
  nameWithType: QueueClient.setAccessPolicy
  fullName: com.azure.storage.queue.QueueClient.setAccessPolicy
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.setAccessPolicyWithResponse*
  name: setAccessPolicyWithResponse
  nameWithType: QueueClient.setAccessPolicyWithResponse
  fullName: com.azure.storage.queue.QueueClient.setAccessPolicyWithResponse
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.clearMessages*
  name: clearMessages
  nameWithType: QueueClient.clearMessages
  fullName: com.azure.storage.queue.QueueClient.clearMessages
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.clearMessagesWithResponse*
  name: clearMessagesWithResponse
  nameWithType: QueueClient.clearMessagesWithResponse
  fullName: com.azure.storage.queue.QueueClient.clearMessagesWithResponse
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.models.SendMessageResult
  name: SendMessageResult
  nameWithType: SendMessageResult
  fullName: com.azure.storage.queue.models.SendMessageResult
- uid: com.azure.storage.queue.QueueClient.sendMessage*
  name: sendMessage
  nameWithType: QueueClient.sendMessage
  fullName: com.azure.storage.queue.QueueClient.sendMessage
  package: com.azure.storage.queue
- uid: com.azure.core.http.rest.Response<com.azure.storage.queue.models.SendMessageResult>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.queue.models.SendMessageResult
    name: SendMessageResult
    fullName: com.azure.storage.queue.models.SendMessageResult
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.queue.QueueClient.sendMessageWithResponse*
  name: sendMessageWithResponse
  nameWithType: QueueClient.sendMessageWithResponse
  fullName: com.azure.storage.queue.QueueClient.sendMessageWithResponse
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.models.QueueMessageItem
  name: QueueMessageItem
  nameWithType: QueueMessageItem
  fullName: com.azure.storage.queue.models.QueueMessageItem
- uid: com.azure.storage.queue.QueueClient.receiveMessage*
  name: receiveMessage
  nameWithType: QueueClient.receiveMessage
  fullName: com.azure.storage.queue.QueueClient.receiveMessage
  package: com.azure.storage.queue
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: com.azure.core.http.rest.PagedIterable<com.azure.storage.queue.models.QueueMessageItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.storage.queue.models.QueueMessageItem
    name: QueueMessageItem
    fullName: com.azure.storage.queue.models.QueueMessageItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.queue.QueueClient.receiveMessages*
  name: receiveMessages
  nameWithType: QueueClient.receiveMessages
  fullName: com.azure.storage.queue.QueueClient.receiveMessages
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.models.PeekedMessageItem
  name: PeekedMessageItem
  nameWithType: PeekedMessageItem
  fullName: com.azure.storage.queue.models.PeekedMessageItem
- uid: com.azure.storage.queue.QueueClient.peekMessage*
  name: peekMessage
  nameWithType: QueueClient.peekMessage
  fullName: com.azure.storage.queue.QueueClient.peekMessage
  package: com.azure.storage.queue
- uid: com.azure.core.http.rest.PagedIterable<com.azure.storage.queue.models.PeekedMessageItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.storage.queue.models.PeekedMessageItem
    name: PeekedMessageItem
    fullName: com.azure.storage.queue.models.PeekedMessageItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.queue.QueueClient.peekMessages*
  name: peekMessages
  nameWithType: QueueClient.peekMessages
  fullName: com.azure.storage.queue.QueueClient.peekMessages
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.models.UpdateMessageResult
  name: UpdateMessageResult
  nameWithType: UpdateMessageResult
  fullName: com.azure.storage.queue.models.UpdateMessageResult
- uid: com.azure.storage.queue.QueueClient.updateMessage*
  name: updateMessage
  nameWithType: QueueClient.updateMessage
  fullName: com.azure.storage.queue.QueueClient.updateMessage
  package: com.azure.storage.queue
- uid: com.azure.core.http.rest.Response<com.azure.storage.queue.models.UpdateMessageResult>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.queue.models.UpdateMessageResult
    name: UpdateMessageResult
    fullName: com.azure.storage.queue.models.UpdateMessageResult
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.queue.QueueClient.updateMessageWithResponse*
  name: updateMessageWithResponse
  nameWithType: QueueClient.updateMessageWithResponse
  fullName: com.azure.storage.queue.QueueClient.updateMessageWithResponse
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.deleteMessage*
  name: deleteMessage
  nameWithType: QueueClient.deleteMessage
  fullName: com.azure.storage.queue.QueueClient.deleteMessage
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.deleteMessageWithResponse*
  name: deleteMessageWithResponse
  nameWithType: QueueClient.deleteMessageWithResponse
  fullName: com.azure.storage.queue.QueueClient.deleteMessageWithResponse
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.getQueueName*
  name: getQueueName
  nameWithType: QueueClient.getQueueName
  fullName: com.azure.storage.queue.QueueClient.getQueueName
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.QueueClient.getAccountName*
  name: getAccountName
  nameWithType: QueueClient.getAccountName
  fullName: com.azure.storage.queue.QueueClient.getAccountName
  package: com.azure.storage.queue
- uid: com.azure.storage.queue.sas.QueueServiceSasSignatureValues
  name: QueueServiceSasSignatureValues
  nameWithType: QueueServiceSasSignatureValues
  fullName: com.azure.storage.queue.sas.QueueServiceSasSignatureValues
- uid: com.azure.storage.queue.QueueClient.generateSas*
  name: generateSas
  nameWithType: QueueClient.generateSas
  fullName: com.azure.storage.queue.QueueClient.generateSas
  package: com.azure.storage.queue
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.storage.queue.models.QueueSignedIdentifier
  name: QueueSignedIdentifier
  nameWithType: QueueSignedIdentifier
  fullName: com.azure.storage.queue.models.QueueSignedIdentifier
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
