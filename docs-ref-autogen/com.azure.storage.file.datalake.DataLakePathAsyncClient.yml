### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  id: "DataLakePathAsyncClient"
  parent: "com.azure.storage.file.datalake"
  children:
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathResourceType,com.azure.storage.blob.specialized.BlockBlobAsyncClient)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.blockBlobAsyncClient"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.buildMetadataString(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.create()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathResourceType,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.dataLakeStorage"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.deleteWithResponse(java.lang.Boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getBlockBlobAsyncClient()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectName()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectPath()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathAsyncClient(java.lang.String,java.lang.String)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathUrl()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.pathName"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.pathResourceType"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.prepareBuilderReplacePath(java.lang.String,java.lang.String)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.renameWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)"
  - "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  langs:
  - "java"
  name: "DataLakePathAsyncClient"
  nameWithType: "DataLakePathAsyncClient"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  type: "Class"
  package: "com.azure.storage.file.datalake"
  summary: "This class provides a client that contains all operations that apply to any path object."
  syntax:
    content: "public class DataLakePathAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathResourceType,com.azure.storage.blob.specialized.BlockBlobAsyncClient)"
  id: "DataLakePathAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathResourceType,com.azure.storage.blob.specialized.BlockBlobAsyncClient)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "DataLakePathAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String pathName, PathResourceType pathResourceType, BlockBlobAsyncClient blockBlobAsyncClient)"
  nameWithType: "DataLakePathAsyncClient.DataLakePathAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String pathName, PathResourceType pathResourceType, BlockBlobAsyncClient blockBlobAsyncClient)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String pathName, PathResourceType pathResourceType, BlockBlobAsyncClient blockBlobAsyncClient)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake"
  summary: "Package-private constructor for use by <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder\" data-throw-if-not-resolved=\"false\">DataLakePathClientBuilder</xref>."
  syntax:
    content: " DataLakePathAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String pathName, PathResourceType pathResourceType, BlockBlobAsyncClient blockBlobAsyncClient)"
    parameters:
    - id: "pipeline"
      type: "com.azure.core.http.HttpPipeline"
      description: "The pipeline used to send and receive service requests."
    - id: "url"
      type: "java.lang.String"
      description: "The endpoint where to send service requests."
    - id: "serviceVersion"
      type: "com.azure.storage.file.datalake.DataLakeServiceVersion"
      description: "The version of the service to receive requests."
    - id: "accountName"
      type: "java.lang.String"
      description: "The storage account name."
    - id: "fileSystemName"
      type: "java.lang.String"
      description: "The file system name."
    - id: "pathName"
      type: "java.lang.String"
      description: "The path name."
    - id: "pathResourceType"
      type: "com.azure.storage.file.datalake.implementation.models.PathResourceType"
    - id: "blockBlobAsyncClient"
      type: "com.azure.storage.blob.specialized.BlockBlobAsyncClient"
      description: "The underlying <xref uid=\"\" data-throw-if-not-resolved=\"false\">BlobContainerAsyncClient</xref>"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.blockBlobAsyncClient"
  id: "blockBlobAsyncClient"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "blockBlobAsyncClient"
  nameWithType: "DataLakePathAsyncClient.blockBlobAsyncClient"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.blockBlobAsyncClient"
  type: "Field"
  package: "com.azure.storage.file.datalake"
  syntax:
    content: "final BlockBlobAsyncClient blockBlobAsyncClient"
    return:
      type: "com.azure.storage.blob.specialized.BlockBlobAsyncClient"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.buildMetadataString(java.util.Map<java.lang.String,java.lang.String>)"
  id: "buildMetadataString(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "buildMetadataString(Map<String,String> metadata)"
  nameWithType: "DataLakePathAsyncClient.buildMetadataString(Map<String,String> metadata)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.buildMetadataString(Map<String,String> metadata)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.buildMetadataString*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Converts the metadata into a string of format \"key1=value1, key2=value2\" and Base64 encodes the values."
  syntax:
    content: "static String buildMetadataString(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "The metadata."
    return:
      type: "java.lang.String"
      description: "The metadata represented as a String."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.create()"
  id: "create()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "create()"
  nameWithType: "DataLakePathAsyncClient.create()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.create()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.create*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Creates a resource. By default this method will not overwrite an existing path.\n\n**Code Samples**\n\n```java\nclient.create().subscribe(response ->\n     System.out.printf(\"Last Modified Time:%s\", response.getLastModified()));\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create"
  syntax:
    content: "public Mono<PathInfo> create()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathInfo>"
      description: "A reactive response containing information about the created resource."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean)"
  id: "create(boolean)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "create(boolean overwrite)"
  nameWithType: "DataLakePathAsyncClient.create(boolean overwrite)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean overwrite)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.create*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Creates a resource.\n\n**Code Samples**\n\n```java\nboolean overwrite = true;\n client.create(overwrite).subscribe(response ->\n     System.out.printf(\"Last Modified Time:%s\", response.getLastModified()));\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create"
  syntax:
    content: "public Mono<PathInfo> create(boolean overwrite)"
    parameters:
    - id: "overwrite"
      type: "boolean"
      description: "Whether or not to overwrite, should data exist on the file."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathInfo>"
      description: "A reactive response containing information about the created resource."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathResourceType,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  id: "createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathResourceType,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(String permissions, String umask, PathResourceType resourceType, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Context context)"
  nameWithType: "DataLakePathAsyncClient.createWithResponse(String permissions, String umask, PathResourceType resourceType, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(String permissions, String umask, PathResourceType resourceType, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  syntax:
    content: " Mono<Response<PathInfo>> createWithResponse(String permissions, String umask, PathResourceType resourceType, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Context context)"
    parameters:
    - id: "permissions"
      type: "java.lang.String"
    - id: "umask"
      type: "java.lang.String"
    - id: "resourceType"
      type: "com.azure.storage.file.datalake.implementation.models.PathResourceType"
    - id: "headers"
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>>"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  id: "createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakePathAsyncClient.createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Creates a resource.\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n String permissions = \"permissions\";\n String umask = \"umask\";\n \n client.createWithResponse(permissions, umask, httpHeaders, Collections.singletonMap(\"metadata\", \"value\"),\n     requestConditions)\n     .subscribe(response -> System.out.printf(\"Last Modified Time:%s\", response.getValue().getLastModified()));\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create"
  syntax:
    content: "public Mono<Response<PathInfo>> createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
    parameters:
    - id: "permissions"
      type: "java.lang.String"
      description: "POSIX access permissions for the resource owner, the resource owning group, and others."
    - id: "umask"
      type: "java.lang.String"
      description: "Restricts permissions of the resource to be created."
    - id: "headers"
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\">PathHttpHeaders</xref>"
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Metadata to associate with the resource."
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains a <xref uid=\"com.azure.storage.file.datalake.models.PathItem\" data-throw-if-not-resolved=\"false\">PathItem</xref>."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.dataLakeStorage"
  id: "dataLakeStorage"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "dataLakeStorage"
  nameWithType: "DataLakePathAsyncClient.dataLakeStorage"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.dataLakeStorage"
  type: "Field"
  package: "com.azure.storage.file.datalake"
  syntax:
    content: "final DataLakeStorageClientImpl dataLakeStorage"
    return:
      type: "com.azure.storage.file.datalake.implementation.DataLakeStorageClientImpl"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.deleteWithResponse(java.lang.Boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  id: "deleteWithResponse(java.lang.Boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "deleteWithResponse(Boolean recursive, DataLakeRequestConditions requestConditions, Context context)"
  nameWithType: "DataLakePathAsyncClient.deleteWithResponse(Boolean recursive, DataLakeRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.deleteWithResponse(Boolean recursive, DataLakeRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Package-private delete method for use by <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakeFileAsyncClient</xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakeDirectoryAsyncClient</xref>"
  syntax:
    content: " Mono<Response<Void>> deleteWithResponse(Boolean recursive, DataLakeRequestConditions requestConditions, Context context)"
    parameters:
    - id: "recursive"
      type: "java.lang.Boolean"
      description: "Whether or not to delete all paths beneath the directory."
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions</xref>"
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing containing status code and HTTP headers"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()"
  id: "exists()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "exists()"
  nameWithType: "DataLakePathAsyncClient.exists()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.exists*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Determines if the path this client represents exists in the cloud.\n\nNote that this method does not guarantee that the path type (file/directory) matches expectations.\n\nFor example, a DataLakeFileClient representing a path to a datalake directory will return true, and vice versa.\n\n**Code Samples**\n\n```java\nclient.exists().subscribe(response -> System.out.printf(\"Exists? %b%n\", response));\n```"
  syntax:
    content: "public Mono<Boolean> exists()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Boolean>"
      description: "true if the path exists, false if it doesn't"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()"
  id: "existsWithResponse()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "existsWithResponse()"
  nameWithType: "DataLakePathAsyncClient.existsWithResponse()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Determines if the path this client represents exists in the cloud.\n\nNote that this method does not guarantee that the path type (file/directory) matches expectations.\n\nFor example, a DataLakeFileClient representing a path to a datalake directory will return true, and vice versa.\n\n**Code Samples**\n\n```java\nclient.existsWithResponse().subscribe(response -> System.out.printf(\"Exists? %b%n\", response.getValue()));\n```"
  syntax:
    content: "public Mono<Response<Boolean>> existsWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>"
      description: "true if the path exists, false if it doesn't"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)"
  id: "generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  nameWithType: "DataLakePathAsyncClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Generates a service SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n PathSasPermission permission = new PathSasPermission().setReadPermission(true);\n \n DataLakeServiceSasSignatureValues values = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: "public String generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
    parameters:
    - id: "dataLakeServiceSasSignatureValues"
      type: "com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues"
      description: "<xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref>"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> representing all SAS query parameters."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)"
  id: "generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  nameWithType: "DataLakePathAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Generates a user delegation SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref>.\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n PathSasPermission myPermission = new PathSasPermission().setReadPermission(true);\n \n DataLakeServiceSasSignatureValues myValues = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateUserDelegationSas(values, userDelegationKey);\n```"
  syntax:
    content: "public String generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
    parameters:
    - id: "dataLakeServiceSasSignatureValues"
      type: "com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues"
      description: "<xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref>"
    - id: "userDelegationKey"
      type: "com.azure.storage.file.datalake.models.UserDelegationKey"
      description: "A <xref uid=\"com.azure.storage.file.datalake.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\">UserDelegationKey</xref> object used to sign the SAS values."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> representing all SAS query parameters."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()"
  id: "getAccessControl()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getAccessControl()"
  nameWithType: "DataLakePathAsyncClient.getAccessControl()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Returns the access control for a resource.\n\n**Code Samples**\n\n```java\nclient.getAccessControl().subscribe(\n     response -> System.out.printf(\"Access Control List: %s, Group: %s, Owner: %s, Permissions: %s\",\n         PathAccessControlEntry.serializeList(response.getAccessControlList()), response.getGroup(),\n         response.getOwner(), response.getPermissions()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties"
  syntax:
    content: "public Mono<PathAccessControl> getAccessControl()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathAccessControl>"
      description: "A reactive response containing the resource access control."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  id: "getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakePathAsyncClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Returns the access control for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n boolean userPrincipalNameReturned = false;\n \n client.getAccessControlWithResponse(userPrincipalNameReturned, requestConditions).subscribe(\n     response -> System.out.printf(\"Access Control List: %s, Group: %s, Owner: %s, Permissions: %s\",\n         PathAccessControlEntry.serializeList(response.getValue().getAccessControlList()),\n         response.getValue().getGroup(), response.getValue().getOwner(), response.getValue().getPermissions()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties"
  syntax:
    content: "public Mono<Response<PathAccessControl>> getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)"
    parameters:
    - id: "userPrincipalNameReturned"
      type: "boolean"
      description: "When true, user identity values returned as User Principal Names. When false,\n user identity values returned as Azure Active Directory Object IDs. Default value is false."
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathAccessControl>>"
      description: "A reactive response containing the resource access control."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  id: "getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Context context)"
  nameWithType: "DataLakePathAsyncClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  syntax:
    content: " Mono<Response<PathAccessControl>> getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Context context)"
    parameters:
    - id: "userPrincipalNameReturned"
      type: "boolean"
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathAccessControl>>"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()"
  id: "getAccountName()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getAccountName()"
  nameWithType: "DataLakePathAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Gets the associated account name."
  syntax:
    content: "public String getAccountName()"
    return:
      type: "java.lang.String"
      description: "Account name associated with this storage resource."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getBlockBlobAsyncClient()"
  id: "getBlockBlobAsyncClient()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getBlockBlobAsyncClient()"
  nameWithType: "DataLakePathAsyncClient.getBlockBlobAsyncClient()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getBlockBlobAsyncClient()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getBlockBlobAsyncClient*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  syntax:
    content: " BlockBlobAsyncClient getBlockBlobAsyncClient()"
    return:
      type: "com.azure.storage.blob.specialized.BlockBlobAsyncClient"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()"
  id: "getFileSystemName()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getFileSystemName()"
  nameWithType: "DataLakePathAsyncClient.getFileSystemName()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Gets the name of the File System in which this object lives."
  syntax:
    content: "public String getFileSystemName()"
    return:
      type: "java.lang.String"
      description: "The name of the File System."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()"
  id: "getHttpPipeline()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getHttpPipeline()"
  nameWithType: "DataLakePathAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpPipeline</xref> powering this client."
  syntax:
    content: "public HttpPipeline getHttpPipeline()"
    return:
      type: "com.azure.core.http.HttpPipeline"
      description: "The pipeline."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectName()"
  id: "getObjectName()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getObjectName()"
  nameWithType: "DataLakePathAsyncClient.getObjectName()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectName()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectName*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Gets the name of this object, not including its full path."
  syntax:
    content: " String getObjectName()"
    return:
      type: "java.lang.String"
      description: "The name of the object."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectPath()"
  id: "getObjectPath()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getObjectPath()"
  nameWithType: "DataLakePathAsyncClient.getObjectPath()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectPath()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectPath*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Gets the path of this object, not including the name of the resource itself."
  syntax:
    content: " String getObjectPath()"
    return:
      type: "java.lang.String"
      description: "The path of the object."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathAsyncClient(java.lang.String,java.lang.String)"
  id: "getPathAsyncClient(java.lang.String,java.lang.String)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getPathAsyncClient(String destinationFileSystem, String destinationPath)"
  nameWithType: "DataLakePathAsyncClient.getPathAsyncClient(String destinationFileSystem, String destinationPath)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathAsyncClient(String destinationFileSystem, String destinationPath)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathAsyncClient*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Takes in a destination and creates a DataLakePathAsyncClient with a new path"
  syntax:
    content: " DataLakePathAsyncClient getPathAsyncClient(String destinationFileSystem, String destinationPath)"
    parameters:
    - id: "destinationFileSystem"
      type: "java.lang.String"
      description: "The destination file system"
    - id: "destinationPath"
      type: "java.lang.String"
      description: "The destination path"
    return:
      type: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
      description: "A DataLakePathAsyncClient"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathUrl()"
  id: "getPathUrl()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getPathUrl()"
  nameWithType: "DataLakePathAsyncClient.getPathUrl()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathUrl()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathUrl*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Gets the URL of the object represented by this client on the Data Lake service."
  syntax:
    content: " String getPathUrl()"
    return:
      type: "java.lang.String"
      description: "the URL."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()"
  id: "getProperties()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "DataLakePathAsyncClient.getProperties()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Returns the resources's metadata and properties.\n\n**Code Samples**\n\n```java\nclient.getProperties().subscribe(response ->\n     System.out.printf(\"Creation Time: %s, Size: %d%n\", response.getCreationTime(), response.getFileSize()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties"
  syntax:
    content: "public Mono<PathProperties> getProperties()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathProperties>"
      description: "A reactive response containing the resource's properties and metadata."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  id: "getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse(DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakePathAsyncClient.getPropertiesWithResponse(DataLakeRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(DataLakeRequestConditions requestConditions)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Returns the resource's metadata and properties.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n \n client.getPropertiesWithResponse(requestConditions).subscribe(\n     response -> System.out.printf(\"Creation Time: %s, Size: %d%n\", response.getValue().getCreationTime(),\n         response.getValue().getFileSize()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties"
  syntax:
    content: "public Mono<Response<PathProperties>> getPropertiesWithResponse(DataLakeRequestConditions requestConditions)"
    parameters:
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathProperties>>"
      description: "A reactive response containing the resource's properties and metadata."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()"
  id: "getServiceVersion()"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "getServiceVersion()"
  nameWithType: "DataLakePathAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Gets the service version the client is using."
  syntax:
    content: "public DataLakeServiceVersion getServiceVersion()"
    return:
      type: "com.azure.storage.file.datalake.DataLakeServiceVersion"
      description: "the service version the client is using."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.pathName"
  id: "pathName"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "pathName"
  nameWithType: "DataLakePathAsyncClient.pathName"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.pathName"
  type: "Field"
  package: "com.azure.storage.file.datalake"
  syntax:
    content: "final String pathName"
    return:
      type: "java.lang.String"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.pathResourceType"
  id: "pathResourceType"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "pathResourceType"
  nameWithType: "DataLakePathAsyncClient.pathResourceType"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.pathResourceType"
  type: "Field"
  package: "com.azure.storage.file.datalake"
  syntax:
    content: "final PathResourceType pathResourceType"
    return:
      type: "com.azure.storage.file.datalake.implementation.models.PathResourceType"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.prepareBuilderReplacePath(java.lang.String,java.lang.String)"
  id: "prepareBuilderReplacePath(java.lang.String,java.lang.String)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "prepareBuilderReplacePath(String destinationFileSystem, String destinationPath)"
  nameWithType: "DataLakePathAsyncClient.prepareBuilderReplacePath(String destinationFileSystem, String destinationPath)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.prepareBuilderReplacePath(String destinationFileSystem, String destinationPath)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.prepareBuilderReplacePath*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Takes in a destination path and creates a SpecializedBlobClientBuilder with a new path name"
  syntax:
    content: " SpecializedBlobClientBuilder prepareBuilderReplacePath(String destinationFileSystem, String destinationPath)"
    parameters:
    - id: "destinationFileSystem"
      type: "java.lang.String"
      description: "The destination file system"
    - id: "destinationPath"
      type: "java.lang.String"
      description: "The destination path"
    return:
      type: "com.azure.storage.blob.specialized.SpecializedBlobClientBuilder"
      description: "An updated SpecializedBlobClientBuilder"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.renameWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  id: "renameWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions, Context context)"
  nameWithType: "DataLakePathAsyncClient.renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions, Context context)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.renameWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Package-private rename method for use by <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakeFileAsyncClient</xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakeDirectoryAsyncClient</xref>"
  syntax:
    content: " Mono<Response<DataLakePathAsyncClient>> renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions, Context context)"
    parameters:
    - id: "destinationFileSystem"
      type: "java.lang.String"
      description: "The file system of the destination within the account.\n <code>null</code> for the current file system."
    - id: "destinationPath"
      type: "java.lang.String"
      description: "The path of the destination relative to the file system name"
    - id: "sourceRequestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions</xref> against the source."
    - id: "destinationRequestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions</xref> against the destination."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakePathAsyncClient>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakePathAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakePathAsyncClient</xref> used to interact with the path created."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)"
  id: "setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)"
  nameWithType: "DataLakePathAsyncClient.setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Changes the access control list, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nPathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n String group = \"group\";\n String owner = \"owner\";\n \n client.setAccessControlList(pathAccessControlEntries, group, owner).subscribe(\n     response -> System.out.printf(\"Last Modified Time: %s\", response.getLastModified()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: "public Mono<PathInfo> setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)"
    parameters:
    - id: "accessControlList"
      type: "java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>"
      description: "A list of <xref uid=\"com.azure.storage.file.datalake.models.PathAccessControlEntry\" data-throw-if-not-resolved=\"false\">PathAccessControlEntry</xref> objects."
    - id: "group"
      type: "java.lang.String"
      description: "The group of the resource."
    - id: "owner"
      type: "java.lang.String"
      description: "The owner of the resource."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathInfo>"
      description: "A reactive response containing the resource info."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  id: "setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakePathAsyncClient.setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Changes the access control list, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n String group = \"group\";\n String owner = \"owner\";\n \n client.setAccessControlListWithResponse(pathAccessControlEntries, group, owner, requestConditions).subscribe(\n     response -> System.out.printf(\"Last Modified Time: %s\", response.getValue().getLastModified()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: "public Mono<Response<PathInfo>> setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions)"
    parameters:
    - id: "accessControlList"
      type: "java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>"
      description: "A list of <xref uid=\"com.azure.storage.file.datalake.models.PathAccessControlEntry\" data-throw-if-not-resolved=\"false\">PathAccessControlEntry</xref> objects."
    - id: "group"
      type: "java.lang.String"
      description: "The group of the resource."
    - id: "owner"
      type: "java.lang.String"
      description: "The owner of the resource."
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>>"
      description: "A reactive response containing the resource info."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  id: "setAccessControlWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "setAccessControlWithResponse(List<PathAccessControlEntry> accessControlList, PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Context context)"
  nameWithType: "DataLakePathAsyncClient.setAccessControlWithResponse(List<PathAccessControlEntry> accessControlList, PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlWithResponse(List<PathAccessControlEntry> accessControlList, PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  syntax:
    content: " Mono<Response<PathInfo>> setAccessControlWithResponse(List<PathAccessControlEntry> accessControlList, PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Context context)"
    parameters:
    - id: "accessControlList"
      type: "java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>"
    - id: "permissions"
      type: "com.azure.storage.file.datalake.models.PathPermissions"
    - id: "group"
      type: "java.lang.String"
    - id: "owner"
      type: "java.lang.String"
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>>"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)"
  id: "setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "setHttpHeaders(PathHttpHeaders headers)"
  nameWithType: "DataLakePathAsyncClient.setHttpHeaders(PathHttpHeaders headers)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(PathHttpHeaders headers)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Changes a resource's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In order to preserve existing values, they must be passed alongside the header being changed.\n\n**Code Samples**\n\n```java\nclient.setHttpHeaders(new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties"
  syntax:
    content: "public Mono<Void> setHttpHeaders(PathHttpHeaders headers)"
    parameters:
    - id: "headers"
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\">PathHttpHeaders</xref>"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A reactive response signalling completion."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  id: "setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakePathAsyncClient.setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Changes a resources's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In order to preserve existing values, they must be passed alongside the header being changed.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n \n client.setHttpHeadersWithResponse(new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\"), requestConditions).subscribe(response ->\n     System.out.printf(\"Set HTTP headers completed with status %d%n\", response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties"
  syntax:
    content: "public Mono<Response<Void>> setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions)"
    parameters:
    - id: "headers"
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\">PathHttpHeaders</xref>"
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A reactive response signalling completion."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "DataLakePathAsyncClient.setMetadata(Map<String,String> metadata)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(Map<String,String> metadata)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Changes a resource's metadata. The specified metadata in this method will replace existing metadata. If old values must be preserved, they must be downloaded and included in the call to this method.\n\n**Code Samples**\n\n```java\nclient.setMetadata(Collections.singletonMap(\"metadata\", \"value\"))\n     .subscribe(response -> System.out.println(\"Set metadata completed\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata"
  syntax:
    content: "public Mono<Void> setMetadata(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Metadata to associate with the resource."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A reactive response signalling completion."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakePathAsyncClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Changes a resource's metadata. The specified metadata in this method will replace existing metadata. If old values must be preserved, they must be downloaded and included in the call to this method.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n \n client.setMetadataWithResponse(Collections.singletonMap(\"metadata\", \"value\"), requestConditions)\n     .subscribe(response -> System.out.printf(\"Set metadata completed with status %d%n\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata"
  syntax:
    content: "public Mono<Response<Void>> setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Metadata to associate with the resource."
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A reactive response signalling completion."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)"
  id: "setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "setPermissions(PathPermissions permissions, String group, String owner)"
  nameWithType: "DataLakePathAsyncClient.setPermissions(PathPermissions permissions, String group, String owner)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(PathPermissions permissions, String group, String owner)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Changes the permissions, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nPathPermissions permissions = new PathPermissions()\n     .setGroup(new RolePermissions().setExecutePermission(true).setReadPermission(true))\n     .setOwner(new RolePermissions().setExecutePermission(true).setReadPermission(true).setWritePermission(true))\n     .setOther(new RolePermissions().setReadPermission(true));\n String group = \"group\";\n String owner = \"owner\";\n \n client.setPermissions(permissions, group, owner).subscribe(\n     response -> System.out.printf(\"Last Modified Time: %s\", response.getLastModified()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: "public Mono<PathInfo> setPermissions(PathPermissions permissions, String group, String owner)"
    parameters:
    - id: "permissions"
      type: "com.azure.storage.file.datalake.models.PathPermissions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.PathPermissions\" data-throw-if-not-resolved=\"false\">PathPermissions</xref>"
    - id: "group"
      type: "java.lang.String"
      description: "The group of the resource."
    - id: "owner"
      type: "java.lang.String"
      description: "The owner of the resource."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathInfo>"
      description: "A reactive response containing the resource info."
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  id: "setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  parent: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  langs:
  - "java"
  name: "setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakePathAsyncClient.setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions)"
  overload: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.datalake"
  summary: "Changes the permissions, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathPermissions permissions = new PathPermissions()\n     .setGroup(new RolePermissions().setExecutePermission(true).setReadPermission(true))\n     .setOwner(new RolePermissions().setExecutePermission(true).setReadPermission(true).setWritePermission(true))\n     .setOther(new RolePermissions().setReadPermission(true));\n String group = \"group\";\n String owner = \"owner\";\n \n client.setPermissionsWithResponse(permissions, group, owner, requestConditions).subscribe(\n     response -> System.out.printf(\"Last Modified Time: %s\", response.getValue().getLastModified()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: "public Mono<Response<PathInfo>> setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions)"
    parameters:
    - id: "permissions"
      type: "com.azure.storage.file.datalake.models.PathPermissions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.PathPermissions\" data-throw-if-not-resolved=\"false\">PathPermissions</xref>"
    - id: "group"
      type: "java.lang.String"
      description: "The group of the resource."
    - id: "owner"
      type: "java.lang.String"
      description: "The owner of the resource."
    - id: "requestConditions"
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>>"
      description: "A reactive response containing the resource info."
references:
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.datalake.DataLakeServiceVersion"
  name: "DataLakeServiceVersion"
  nameWithType: "DataLakeServiceVersion"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceVersion"
- uid: "com.azure.storage.file.datalake.implementation.models.PathResourceType"
  name: "PathResourceType"
  nameWithType: "PathResourceType"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathResourceType"
- uid: "com.azure.storage.blob.specialized.BlockBlobAsyncClient"
  spec.java:
  - uid: "com.azure.storage.blob.specialized.BlockBlobAsyncClient"
    name: "BlockBlobAsyncClient"
    fullName: "com.azure.storage.blob.specialized.BlockBlobAsyncClient"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient*"
  name: "DataLakePathAsyncClient"
  nameWithType: "DataLakePathAsyncClient.DataLakePathAsyncClient"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient"
  package: "com.azure.storage.file.datalake"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.buildMetadataString*"
  name: "buildMetadataString"
  nameWithType: "DataLakePathAsyncClient.buildMetadataString"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.buildMetadataString"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathUrl*"
  name: "getPathUrl"
  nameWithType: "DataLakePathAsyncClient.getPathUrl"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathUrl"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName*"
  name: "getAccountName"
  nameWithType: "DataLakePathAsyncClient.getAccountName"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName*"
  name: "getFileSystemName"
  nameWithType: "DataLakePathAsyncClient.getFileSystemName"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectPath*"
  name: "getObjectPath"
  nameWithType: "DataLakePathAsyncClient.getObjectPath"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectPath"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectName*"
  name: "getObjectName"
  nameWithType: "DataLakePathAsyncClient.getObjectName"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getObjectName"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline*"
  name: "getHttpPipeline"
  nameWithType: "DataLakePathAsyncClient.getHttpPipeline"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion*"
  name: "getServiceVersion"
  nameWithType: "DataLakePathAsyncClient.getServiceVersion"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion"
  package: "com.azure.storage.file.datalake"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.models.PathInfo"
    name: "PathInfo"
    fullName: "com.azure.storage.file.datalake.models.PathInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.create*"
  name: "create"
  nameWithType: "DataLakePathAsyncClient.create"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.create"
  package: "com.azure.storage.file.datalake"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  name: "PathHttpHeaders"
  nameWithType: "PathHttpHeaders"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders"
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
  name: "DataLakeRequestConditions"
  nameWithType: "DataLakeRequestConditions"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.models.PathInfo"
    name: "PathInfo"
    fullName: "com.azure.storage.file.datalake.models.PathInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse*"
  name: "createWithResponse"
  nameWithType: "DataLakePathAsyncClient.createWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.deleteWithResponse*"
  name: "deleteWithResponse"
  nameWithType: "DataLakePathAsyncClient.deleteWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.deleteWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata*"
  name: "setMetadata"
  nameWithType: "DataLakePathAsyncClient.setMetadata"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse*"
  name: "setMetadataWithResponse"
  nameWithType: "DataLakePathAsyncClient.setMetadataWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders*"
  name: "setHttpHeaders"
  nameWithType: "DataLakePathAsyncClient.setHttpHeaders"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse*"
  name: "setHttpHeadersWithResponse"
  nameWithType: "DataLakePathAsyncClient.setHttpHeadersWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.models.PathProperties"
    name: "PathProperties"
    fullName: "com.azure.storage.file.datalake.models.PathProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties*"
  name: "getProperties"
  nameWithType: "DataLakePathAsyncClient.getProperties"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties"
  package: "com.azure.storage.file.datalake"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathProperties>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.models.PathProperties"
    name: "PathProperties"
    fullName: "com.azure.storage.file.datalake.models.PathProperties"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse*"
  name: "getPropertiesWithResponse"
  nameWithType: "DataLakePathAsyncClient.getPropertiesWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "reactor.core.publisher.Mono<java.lang.Boolean>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.exists*"
  name: "exists"
  nameWithType: "DataLakePathAsyncClient.exists"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.exists"
  package: "com.azure.storage.file.datalake"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse*"
  name: "existsWithResponse"
  nameWithType: "DataLakePathAsyncClient.existsWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry"
    name: "PathAccessControlEntry"
    fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList*"
  name: "setAccessControlList"
  nameWithType: "DataLakePathAsyncClient.setAccessControlList"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse*"
  name: "setAccessControlListWithResponse"
  nameWithType: "DataLakePathAsyncClient.setAccessControlListWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.models.PathPermissions"
  name: "PathPermissions"
  nameWithType: "PathPermissions"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions*"
  name: "setPermissions"
  nameWithType: "DataLakePathAsyncClient.setPermissions"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse*"
  name: "setPermissionsWithResponse"
  nameWithType: "DataLakePathAsyncClient.setPermissionsWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlWithResponse*"
  name: "setAccessControlWithResponse"
  nameWithType: "DataLakePathAsyncClient.setAccessControlWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathAccessControl>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.models.PathAccessControl"
    name: "PathAccessControl"
    fullName: "com.azure.storage.file.datalake.models.PathAccessControl"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl*"
  name: "getAccessControl"
  nameWithType: "DataLakePathAsyncClient.getAccessControl"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl"
  package: "com.azure.storage.file.datalake"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathAccessControl>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.models.PathAccessControl"
    name: "PathAccessControl"
    fullName: "com.azure.storage.file.datalake.models.PathAccessControl"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse*"
  name: "getAccessControlWithResponse"
  nameWithType: "DataLakePathAsyncClient.getAccessControlWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakePathAsyncClient>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
    name: "DataLakePathAsyncClient"
    fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.renameWithResponse*"
  name: "renameWithResponse"
  nameWithType: "DataLakePathAsyncClient.renameWithResponse"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.renameWithResponse"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathAsyncClient*"
  name: "getPathAsyncClient"
  nameWithType: "DataLakePathAsyncClient.getPathAsyncClient"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPathAsyncClient"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.blob.specialized.SpecializedBlobClientBuilder"
  spec.java:
  - uid: "com.azure.storage.blob.specialized.SpecializedBlobClientBuilder"
    name: "SpecializedBlobClientBuilder"
    fullName: "com.azure.storage.blob.specialized.SpecializedBlobClientBuilder"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.prepareBuilderReplacePath*"
  name: "prepareBuilderReplacePath"
  nameWithType: "DataLakePathAsyncClient.prepareBuilderReplacePath"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.prepareBuilderReplacePath"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getBlockBlobAsyncClient*"
  name: "getBlockBlobAsyncClient"
  nameWithType: "DataLakePathAsyncClient.getBlockBlobAsyncClient"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getBlockBlobAsyncClient"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues"
  name: "DataLakeServiceSasSignatureValues"
  nameWithType: "DataLakeServiceSasSignatureValues"
  fullName: "com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues"
- uid: "com.azure.storage.file.datalake.models.UserDelegationKey"
  name: "UserDelegationKey"
  nameWithType: "UserDelegationKey"
  fullName: "com.azure.storage.file.datalake.models.UserDelegationKey"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas*"
  name: "generateUserDelegationSas"
  nameWithType: "DataLakePathAsyncClient.generateUserDelegationSas"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas*"
  name: "generateSas"
  nameWithType: "DataLakePathAsyncClient.generateSas"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas"
  package: "com.azure.storage.file.datalake"
- uid: "com.azure.storage.file.datalake.implementation.DataLakeStorageClientImpl"
  name: "DataLakeStorageClientImpl"
  nameWithType: "DataLakeStorageClientImpl"
  fullName: "com.azure.storage.file.datalake.implementation.DataLakeStorageClientImpl"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.azure.storage.file.datalake.models.PathInfo"
  name: "PathInfo"
  nameWithType: "PathInfo"
  fullName: "com.azure.storage.file.datalake.models.PathInfo"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "com.azure.storage.file.datalake.models.PathProperties"
  name: "PathProperties"
  nameWithType: "PathProperties"
  fullName: "com.azure.storage.file.datalake.models.PathProperties"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry"
  name: "PathAccessControlEntry"
  nameWithType: "PathAccessControlEntry"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry"
- uid: "com.azure.storage.file.datalake.models.PathAccessControl"
  name: "PathAccessControl"
  nameWithType: "PathAccessControl"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControl"
