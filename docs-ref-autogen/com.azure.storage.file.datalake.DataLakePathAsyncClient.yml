### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient
  id: DataLakePathAsyncClient
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake
  children:
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.create()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  langs:
  - java
  name: DataLakePathAsyncClient
  nameWithType: DataLakePathAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient
  type: Class
  package: com.azure.storage.file.datalake
  summary: This class provides a client that contains all operations that apply to any path object.
  syntax:
    content: public class DataLakePathAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathResourceType,com.azure.storage.blob.specialized.BlockBlobAsyncClient)
  id: DataLakePathAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathResourceType,com.azure.storage.blob.specialized.BlockBlobAsyncClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: DataLakePathAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String pathName, PathResourceType pathResourceType, BlockBlobAsyncClient blockBlobAsyncClient)
  nameWithType: DataLakePathAsyncClient.DataLakePathAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String pathName, PathResourceType pathResourceType, BlockBlobAsyncClient blockBlobAsyncClient)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String pathName, PathResourceType pathResourceType, BlockBlobAsyncClient blockBlobAsyncClient)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient*
  type: Constructor
  package: com.azure.storage.file.datalake
  summary: Package-private constructor for use by <xref uid="com.azure.storage.file.datalake.DataLakePathClientBuilder" data-throw-if-not-resolved="false">DataLakePathClientBuilder</xref>.
  syntax:
    content: " DataLakePathAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String pathName, PathResourceType pathResourceType, BlockBlobAsyncClient blockBlobAsyncClient)"
    parameters:
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: The pipeline used to send and receive service requests.
    - id: url
      type: java.lang.String
      description: The endpoint where to send service requests.
    - id: serviceVersion
      type: com.azure.storage.file.datalake.DataLakeServiceVersion
      description: The version of the service to receive requests.
    - id: accountName
      type: java.lang.String
      description: The storage account name.
    - id: fileSystemName
      type: java.lang.String
      description: The file system name.
    - id: pathName
      type: java.lang.String
      description: The path name.
    - id: pathResourceType
      type: com.azure.storage.file.datalake.implementation.models.PathResourceType
    - id: blockBlobAsyncClient
      type: com.azure.storage.blob.specialized.BlockBlobAsyncClient
      description: The underlying <xref uid="" data-throw-if-not-resolved="false">BlobContainerAsyncClient</xref>
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.create()
  id: create()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: create()
  nameWithType: DataLakePathAsyncClient.create()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.create()
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.create*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a resource. By default this method will not overwrite an existing path.


    **Code Samples**


    ```java

    client.create().subscribe(response ->
         System.out.printf("Last Modified Time:%s", response.getLastModified()));
    ```


    For more information see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<PathInfo> create()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathInfo>
      description: A reactive response containing information about the created resource.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean)
  id: create(boolean)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: create(boolean overwrite)
  nameWithType: DataLakePathAsyncClient.create(boolean overwrite)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean overwrite)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.create*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a resource.


    **Code Samples**


    ```java

    boolean overwrite = true;
     client.create(overwrite).subscribe(response ->
         System.out.printf("Last Modified Time:%s", response.getLastModified()));
    ```


    For more information see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<PathInfo> create(boolean overwrite)
    parameters:
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should data exist on the file.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathInfo>
      description: A reactive response containing information about the created resource.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakePathAsyncClient.createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Creates a resource.\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n String permissions = \"permissions\";\n String umask = \"umask\";\n \n client.createWithResponse(permissions, umask, httpHeaders, Collections.singletonMap(\"metadata\", \"value\"),\n     requestConditions)\n     .subscribe(response -> System.out.printf(\"Last Modified Time:%s\", response.getValue().getLastModified()));\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create"
  syntax:
    content: public Mono<Response<PathInfo>> createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
    parameters:
    - id: permissions
      type: java.lang.String
      description: POSIX access permissions for the resource owner, the resource owning group, and others.
    - id: umask
      type: java.lang.String
      description: Restricts permissions of the resource to be created.
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the resource.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="com.azure.storage.file.datalake.models.PathItem" data-throw-if-not-resolved="false">PathItem</xref>.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()
  id: exists()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: exists()
  nameWithType: DataLakePathAsyncClient.exists()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.exists*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Determines if the path this client represents exists in the cloud.


    Note that this method does not guarantee that the path type (file/directory) matches expectations.


    For example, a DataLakeFileClient representing a path to a datalake directory will return true, and vice versa.


    **Code Samples**


    ```java

    client.exists().subscribe(response -> System.out.printf("Exists? %b%n", response));

    ```
  syntax:
    content: public Mono<Boolean> exists()
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: true if the path exists, false if it doesn't
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()
  id: existsWithResponse()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: existsWithResponse()
  nameWithType: DataLakePathAsyncClient.existsWithResponse()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Determines if the path this client represents exists in the cloud.


    Note that this method does not guarantee that the path type (file/directory) matches expectations.


    For example, a DataLakeFileClient representing a path to a datalake directory will return true, and vice versa.


    **Code Samples**


    ```java

    client.existsWithResponse().subscribe(response -> System.out.printf("Exists? %b%n", response.getValue()));

    ```
  syntax:
    content: public Mono<Response<Boolean>> existsWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
      description: true if the path exists, false if it doesn't
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  id: generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
  nameWithType: DataLakePathAsyncClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Generates a service SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n PathSasPermission permission = new PathSasPermission().setReadPermission(true);\n \n DataLakeServiceSasSignatureValues values = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: public String generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
    parameters:
    - id: dataLakeServiceSasSignatureValues
      type: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues" data-throw-if-not-resolved="false">DataLakeServiceSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  id: generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  nameWithType: DataLakePathAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Generates a user delegation SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref>.\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n PathSasPermission myPermission = new PathSasPermission().setReadPermission(true);\n \n DataLakeServiceSasSignatureValues myValues = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateUserDelegationSas(values, userDelegationKey);\n```"
  syntax:
    content: public String generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
    parameters:
    - id: dataLakeServiceSasSignatureValues
      type: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues" data-throw-if-not-resolved="false">DataLakeServiceSasSignatureValues</xref>
    - id: userDelegationKey
      type: com.azure.storage.file.datalake.models.UserDelegationKey
      description: A <xref uid="com.azure.storage.file.datalake.models.UserDelegationKey" data-throw-if-not-resolved="false">UserDelegationKey</xref> object used to sign the SAS values.
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()
  id: getAccessControl()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: getAccessControl()
  nameWithType: DataLakePathAsyncClient.getAccessControl()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Returns the access control for a resource.


    **Code Samples**


    ```java

    client.getAccessControl().subscribe(
         response -> System.out.printf("Access Control List: %s, Group: %s, Owner: %s, Permissions: %s",
             PathAccessControlEntry.serializeList(response.getAccessControlList()), response.getGroup(),
             response.getOwner(), response.getPermissions()));
    ```


    For more information, see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties
  syntax:
    content: public Mono<PathAccessControl> getAccessControl()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathAccessControl>
      description: A reactive response containing the resource access control.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakePathAsyncClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Returns the access control for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n boolean userPrincipalNameReturned = false;\n \n client.getAccessControlWithResponse(userPrincipalNameReturned, requestConditions).subscribe(\n     response -> System.out.printf(\"Access Control List: %s, Group: %s, Owner: %s, Permissions: %s\",\n         PathAccessControlEntry.serializeList(response.getValue().getAccessControlList()),\n         response.getValue().getGroup(), response.getValue().getOwner(), response.getValue().getPermissions()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties"
  syntax:
    content: public Mono<Response<PathAccessControl>> getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)
    parameters:
    - id: userPrincipalNameReturned
      type: boolean
      description: >-
        When true, user identity values returned as User Principal Names. When false,
         user identity values returned as Azure Active Directory Object IDs. Default value is false.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathAccessControl>>
      description: A reactive response containing the resource access control.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: DataLakePathAsyncClient.getAccountName()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: Account name associated with this storage resource.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()
  id: getFileSystemName()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: getFileSystemName()
  nameWithType: DataLakePathAsyncClient.getFileSystemName()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the name of the File System in which this object lives.
  syntax:
    content: public String getFileSystemName()
    return:
      type: java.lang.String
      description: The name of the File System.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: DataLakePathAsyncClient.getHttpPipeline()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: getProperties()
  nameWithType: DataLakePathAsyncClient.getProperties()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Returns the resources's metadata and properties.


    **Code Samples**


    ```java

    client.getProperties().subscribe(response ->
         System.out.printf("Creation Time: %s, Size: %d%n", response.getCreationTime(), response.getFileSize()));
    ```


    For more information, see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
  syntax:
    content: public Mono<PathProperties> getProperties()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathProperties>
      description: A reactive response containing the resource's properties and metadata.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: getPropertiesWithResponse(DataLakeRequestConditions requestConditions)
  nameWithType: DataLakePathAsyncClient.getPropertiesWithResponse(DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Returns the resource's metadata and properties.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n \n client.getPropertiesWithResponse(requestConditions).subscribe(\n     response -> System.out.printf(\"Creation Time: %s, Size: %d%n\", response.getValue().getCreationTime(),\n         response.getValue().getFileSize()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties"
  syntax:
    content: public Mono<Response<PathProperties>> getPropertiesWithResponse(DataLakeRequestConditions requestConditions)
    parameters:
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathProperties>>
      description: A reactive response containing the resource's properties and metadata.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: DataLakePathAsyncClient.getServiceVersion()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the service version the client is using.
  syntax:
    content: public DataLakeServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.datalake.DataLakeServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
  id: setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)
  nameWithType: DataLakePathAsyncClient.setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes the access control list, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nPathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n String group = \"group\";\n String owner = \"owner\";\n \n client.setAccessControlList(pathAccessControlEntries, group, owner).subscribe(\n     response -> System.out.printf(\"Last Modified Time: %s\", response.getLastModified()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: public Mono<PathInfo> setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)
    parameters:
    - id: accessControlList
      type: java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>
      description: A list of <xref uid="com.azure.storage.file.datalake.models.PathAccessControlEntry" data-throw-if-not-resolved="false">PathAccessControlEntry</xref> objects.
    - id: group
      type: java.lang.String
      description: The group of the resource.
    - id: owner
      type: java.lang.String
      description: The owner of the resource.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathInfo>
      description: A reactive response containing the resource info.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakePathAsyncClient.setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes the access control list, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n String group = \"group\";\n String owner = \"owner\";\n \n client.setAccessControlListWithResponse(pathAccessControlEntries, group, owner, requestConditions).subscribe(\n     response -> System.out.printf(\"Last Modified Time: %s\", response.getValue().getLastModified()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: public Mono<Response<PathInfo>> setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions)
    parameters:
    - id: accessControlList
      type: java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>
      description: A list of <xref uid="com.azure.storage.file.datalake.models.PathAccessControlEntry" data-throw-if-not-resolved="false">PathAccessControlEntry</xref> objects.
    - id: group
      type: java.lang.String
      description: The group of the resource.
    - id: owner
      type: java.lang.String
      description: The owner of the resource.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>>
      description: A reactive response containing the resource info.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  id: setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: setHttpHeaders(PathHttpHeaders headers)
  nameWithType: DataLakePathAsyncClient.setHttpHeaders(PathHttpHeaders headers)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(PathHttpHeaders headers)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Changes a resource's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In order to preserve existing values, they must be passed alongside the header being changed.


    **Code Samples**


    ```java

    client.setHttpHeaders(new PathHttpHeaders()
         .setContentLanguage("en-US")
         .setContentType("binary"));
    ```


    For more information, see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
  syntax:
    content: public Mono<Void> setHttpHeaders(PathHttpHeaders headers)
    parameters:
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakePathAsyncClient.setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes a resources's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In order to preserve existing values, they must be passed alongside the header being changed.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n \n client.setHttpHeadersWithResponse(new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\"), requestConditions).subscribe(response ->\n     System.out.printf(\"Set HTTP headers completed with status %d%n\", response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties"
  syntax:
    content: public Mono<Response<Void>> setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions)
    parameters:
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: DataLakePathAsyncClient.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Changes a resource's metadata. The specified metadata in this method will replace existing metadata. If old values must be preserved, they must be downloaded and included in the call to this method.


    **Code Samples**


    ```java

    client.setMetadata(Collections.singletonMap("metadata", "value"))
         .subscribe(response -> System.out.println("Set metadata completed"));
    ```


    For more information, see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
  syntax:
    content: public Mono<Void> setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the resource.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakePathAsyncClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes a resource's metadata. The specified metadata in this method will replace existing metadata. If old values must be preserved, they must be downloaded and included in the call to this method.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n \n client.setMetadataWithResponse(Collections.singletonMap(\"metadata\", \"value\"), requestConditions)\n     .subscribe(response -> System.out.printf(\"Set metadata completed with status %d%n\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata"
  syntax:
    content: public Mono<Response<Void>> setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the resource.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)
  id: setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: setPermissions(PathPermissions permissions, String group, String owner)
  nameWithType: DataLakePathAsyncClient.setPermissions(PathPermissions permissions, String group, String owner)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(PathPermissions permissions, String group, String owner)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes the permissions, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nPathPermissions permissions = new PathPermissions()\n     .setGroup(new RolePermissions().setExecutePermission(true).setReadPermission(true))\n     .setOwner(new RolePermissions().setExecutePermission(true).setReadPermission(true).setWritePermission(true))\n     .setOther(new RolePermissions().setReadPermission(true));\n String group = \"group\";\n String owner = \"owner\";\n \n client.setPermissions(permissions, group, owner).subscribe(\n     response -> System.out.printf(\"Last Modified Time: %s\", response.getLastModified()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: public Mono<PathInfo> setPermissions(PathPermissions permissions, String group, String owner)
    parameters:
    - id: permissions
      type: com.azure.storage.file.datalake.models.PathPermissions
      description: <xref uid="com.azure.storage.file.datalake.models.PathPermissions" data-throw-if-not-resolved="false">PathPermissions</xref>
    - id: group
      type: java.lang.String
      description: The group of the resource.
    - id: owner
      type: java.lang.String
      description: The owner of the resource.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathInfo>
      description: A reactive response containing the resource info.
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakePathAsyncClient
  langs:
  - java
  name: setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakePathAsyncClient.setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes the permissions, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathPermissions permissions = new PathPermissions()\n     .setGroup(new RolePermissions().setExecutePermission(true).setReadPermission(true))\n     .setOwner(new RolePermissions().setExecutePermission(true).setReadPermission(true).setWritePermission(true))\n     .setOther(new RolePermissions().setReadPermission(true));\n String group = \"group\";\n String owner = \"owner\";\n \n client.setPermissionsWithResponse(permissions, group, owner, requestConditions).subscribe(\n     response -> System.out.printf(\"Last Modified Time: %s\", response.getValue().getLastModified()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: public Mono<Response<PathInfo>> setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions)
    parameters:
    - id: permissions
      type: com.azure.storage.file.datalake.models.PathPermissions
      description: <xref uid="com.azure.storage.file.datalake.models.PathPermissions" data-throw-if-not-resolved="false">PathPermissions</xref>
    - id: group
      type: java.lang.String
      description: The group of the resource.
    - id: owner
      type: java.lang.String
      description: The owner of the resource.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>>
      description: A reactive response containing the resource info.
references:
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.datalake.DataLakeServiceVersion
  name: DataLakeServiceVersion
  nameWithType: DataLakeServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakeServiceVersion
- uid: com.azure.storage.file.datalake.implementation.models.PathResourceType
  name: PathResourceType
  nameWithType: PathResourceType
  fullName: com.azure.storage.file.datalake.implementation.models.PathResourceType
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  spec.java:
  - uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient
    name: BlockBlobAsyncClient
    fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient*
  name: DataLakePathAsyncClient
  nameWithType: DataLakePathAsyncClient.DataLakePathAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.DataLakePathAsyncClient
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: DataLakePathAsyncClient.getAccountName
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName*
  name: getFileSystemName
  nameWithType: DataLakePathAsyncClient.getFileSystemName
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: DataLakePathAsyncClient.getHttpPipeline
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: DataLakePathAsyncClient.getServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathInfo
    name: PathInfo
    fullName: com.azure.storage.file.datalake.models.PathInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.create*
  name: create
  nameWithType: DataLakePathAsyncClient.create
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.create
  package: com.azure.storage.file.datalake
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.file.datalake.models.PathHttpHeaders
  name: PathHttpHeaders
  nameWithType: PathHttpHeaders
  fullName: com.azure.storage.file.datalake.models.PathHttpHeaders
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.models.DataLakeRequestConditions
  name: DataLakeRequestConditions
  nameWithType: DataLakeRequestConditions
  fullName: com.azure.storage.file.datalake.models.DataLakeRequestConditions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathInfo
    name: PathInfo
    fullName: com.azure.storage.file.datalake.models.PathInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse*
  name: createWithResponse
  nameWithType: DataLakePathAsyncClient.createWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata*
  name: setMetadata
  nameWithType: DataLakePathAsyncClient.setMetadata
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse*
  name: setMetadataWithResponse
  nameWithType: DataLakePathAsyncClient.setMetadataWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders*
  name: setHttpHeaders
  nameWithType: DataLakePathAsyncClient.setHttpHeaders
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse*
  name: setHttpHeadersWithResponse
  nameWithType: DataLakePathAsyncClient.setHttpHeadersWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathProperties
    name: PathProperties
    fullName: com.azure.storage.file.datalake.models.PathProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties*
  name: getProperties
  nameWithType: DataLakePathAsyncClient.getProperties
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathProperties
    name: PathProperties
    fullName: com.azure.storage.file.datalake.models.PathProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: DataLakePathAsyncClient.getPropertiesWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<java.lang.Boolean>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.exists*
  name: exists
  nameWithType: DataLakePathAsyncClient.exists
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.exists
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse*
  name: existsWithResponse
  nameWithType: DataLakePathAsyncClient.existsWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse
  package: com.azure.storage.file.datalake
- uid: java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathAccessControlEntry
    name: PathAccessControlEntry
    fullName: com.azure.storage.file.datalake.models.PathAccessControlEntry
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList*
  name: setAccessControlList
  nameWithType: DataLakePathAsyncClient.setAccessControlList
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse*
  name: setAccessControlListWithResponse
  nameWithType: DataLakePathAsyncClient.setAccessControlListWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.PathPermissions
  name: PathPermissions
  nameWithType: PathPermissions
  fullName: com.azure.storage.file.datalake.models.PathPermissions
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions*
  name: setPermissions
  nameWithType: DataLakePathAsyncClient.setPermissions
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse*
  name: setPermissionsWithResponse
  nameWithType: DataLakePathAsyncClient.setPermissionsWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.PathAccessControl>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathAccessControl
    name: PathAccessControl
    fullName: com.azure.storage.file.datalake.models.PathAccessControl
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl*
  name: getAccessControl
  nameWithType: DataLakePathAsyncClient.getAccessControl
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathAccessControl>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathAccessControl
    name: PathAccessControl
    fullName: com.azure.storage.file.datalake.models.PathAccessControl
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse*
  name: getAccessControlWithResponse
  nameWithType: DataLakePathAsyncClient.getAccessControlWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
  name: DataLakeServiceSasSignatureValues
  nameWithType: DataLakeServiceSasSignatureValues
  fullName: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
- uid: com.azure.storage.file.datalake.models.UserDelegationKey
  name: UserDelegationKey
  nameWithType: UserDelegationKey
  fullName: com.azure.storage.file.datalake.models.UserDelegationKey
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas*
  name: generateUserDelegationSas
  nameWithType: DataLakePathAsyncClient.generateUserDelegationSas
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas*
  name: generateSas
  nameWithType: DataLakePathAsyncClient.generateSas
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas
  package: com.azure.storage.file.datalake
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.storage.file.datalake.models.PathInfo
  name: PathInfo
  nameWithType: PathInfo
  fullName: com.azure.storage.file.datalake.models.PathInfo
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.storage.file.datalake.models.PathProperties
  name: PathProperties
  nameWithType: PathProperties
  fullName: com.azure.storage.file.datalake.models.PathProperties
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.storage.file.datalake.models.PathAccessControlEntry
  name: PathAccessControlEntry
  nameWithType: PathAccessControlEntry
  fullName: com.azure.storage.file.datalake.models.PathAccessControlEntry
- uid: com.azure.storage.file.datalake.models.PathAccessControl
  name: PathAccessControl
  nameWithType: PathAccessControl
  fullName: com.azure.storage.file.datalake.models.PathAccessControl
