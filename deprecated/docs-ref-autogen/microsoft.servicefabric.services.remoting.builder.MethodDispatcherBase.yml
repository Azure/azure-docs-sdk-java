### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.MethodDispatcher?alt=microsoft.servicefabric.services.remoting.MethodDispatcher&text=MethodDispatcher" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.continueWith(CompletableFuture<?> future)
  name: continueWith(CompletableFuture<?> future)
  nameWithType: MethodDispatcherBase.continueWith(CompletableFuture<?> future)
  parameters:
  - description: <p>continuation future </p>
    name: future
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.concurrent.CompletableFuture"></xref> that represents outstanding operation. </p>
    type: <xref href="CompletableFuture%3CObject%3E?alt=CompletableFuture%3CObject%3E&text=CompletableFuture%3CObject%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Internal - used by Service remoting</p>

    <p></p>
  syntax: protected CompletableFuture<Object> continueWith(CompletableFuture<?> future)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.continueWith(CompletableFuture<?>)
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.continueWithResult(int methodId, CompletableFuture<TRetval> future)
  name: continueWithResult(int methodId, CompletableFuture<TRetval> future)
  nameWithType: MethodDispatcherBase.continueWithResult(int methodId, CompletableFuture<TRetval> future)
  parameters:
  - description: <p>method id </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>continuation future </p>
    name: future
    type: <xref href="CompletableFuture%3CTRetval%3E?alt=CompletableFuture%3CTRetval%3E&text=CompletableFuture%3CTRetval%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.concurrent.CompletableFuture"></xref> that represents outstanding operation. </p>
    type: <xref href="%3CTRetval%3E+CompletableFuture%3CObject%3E?alt=%3CTRetval%3E+CompletableFuture%3CObject%3E&text=%3CTRetval%3E+CompletableFuture%3CObject%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Internal - used by Service remoting</p>

    <p></p>
  syntax: protected <TRetval> CompletableFuture<Object> continueWithResult(int methodId, CompletableFuture<TRetval> future)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.continueWithResult(int,CompletableFuture<TRetval>)
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.createResponseBody(int methodId, Object returnValue)
  name: createResponseBody(int methodId, Object returnValue)
  nameWithType: MethodDispatcherBase.createResponseBody(int methodId, Object returnValue)
  parameters:
  - description: <p>Id of the method. </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>The returned value from the method. </p>
    name: returnValue
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Object"></xref> that represents the response body to be sent back to the client. </p>
    type: <xref href="abstract+Object?alt=abstract+Object&text=abstract+Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is implemented by the generated method dispatcher to create the response from the specified return value as a result of dispatching the method to the remoted object.</p>

    <p></p>
  syntax: protected abstract Object createResponseBody(int methodId, Object returnValue)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.createResponseBody(int,Object)
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.createResponseMessageBody(Object responseMessageBodyValue)
  name: createResponseMessageBody(Object responseMessageBodyValue)
  nameWithType: MethodDispatcherBase.createResponseMessageBody(Object responseMessageBodyValue)
  parameters:
  - description: <p>response message body </p>
    name: responseMessageBodyValue
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Object"></xref> that represents the respnse messge body. </p>
    type: <xref href="abstract+Object?alt=abstract+Object&text=abstract+Object" data-throw-if-not-resolved="False"/>
  summary: <p>This method is implemented by the generated method to create the response message. </p>
  syntax: protected abstract Object createResponseMessageBody(Object responseMessageBodyValue)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.createResponseMessageBody(Object)
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  name: dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  nameWithType: MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  overridden: microsoft.servicefabric.services.remoting.MethodDispatcher.dispatch(Object,int,Object)
  parameters:
  - description: <p>remoted object Implementation. </p>
    name: objectImplementation
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>methodId of the interface implemented by the remoted object. </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>message body. </p>
    name: requestMsgBody
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is used to dispatch one way messages to the specified methodId of the interface implemented by the remoted object.</p>

    <p></p>
  syntax: public void dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatch(Object,int,Object)
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)
  name: dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)
  nameWithType: MethodDispatcherBase.dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.services.remoting.MethodDispatcher.dispatchAsync(Object,int,Object,CancellationToken)
  parameters:
  - description: <p>The remoted object instance </p>
    name: objectImplementation
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>id of the method </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>The request body </p>
    name: requestMsgBody
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.concurrent.CompletableFuture"></xref> that represents outstanding operation. The result of the task is the return value from the method. </p>
    type: <xref href="CompletableFuture%3CObject%3E?alt=CompletableFuture%3CObject%3E&text=CompletableFuture%3CObject%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is implemented by the generated method dispatcher to dispatch request to the specified methodId of the interface implemented by the remoted object.</p>

    <p></p>
  syntax: public CompletableFuture<Object> dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatchAsync(Object,int,Object,CancellationToken)
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getInterfaceId()
  name: getInterfaceId()
  nameWithType: MethodDispatcherBase.getInterfaceId()
  overridden: microsoft.servicefabric.services.remoting.MethodDispatcher.getInterfaceId()
  returns:
    description: <p>interface id. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Interface Id is used to identify remoting Interfaces.</p>

    <p></p>
  syntax: public int getInterfaceId()
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getInterfaceId()
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getMethodName(int methodId)
  name: getMethodName(int methodId)
  nameWithType: MethodDispatcherBase.getMethodName(int methodId)
  overridden: microsoft.servicefabric.services.remoting.MethodDispatcher.getMethodName(int)
  parameters:
  - name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getMethodName(int methodId)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getMethodName(int)
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getRequestMessageBodyValue(Object requestMessageBody)
  name: getRequestMessageBodyValue(Object requestMessageBody)
  nameWithType: MethodDispatcherBase.getRequestMessageBodyValue(Object requestMessageBody)
  parameters:
  - description: <p>request message body. </p>
    name: requestMessageBody
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Object"></xref> that represents the request body. </p>
    type: <xref href="abstract+Object?alt=abstract+Object&text=abstract+Object" data-throw-if-not-resolved="False"/>
  summary: <p>This method is implemented by the generated method dispatcher to get the request message, </p>
  syntax: protected abstract Object getRequestMessageBodyValue(Object requestMessageBody)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getRequestMessageBodyValue(Object)
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.initialize(int interfaceId, Map<Integer, String> methodNameMap)
  name: initialize(int interfaceId, Map<Integer, String> methodNameMap)
  nameWithType: MethodDispatcherBase.initialize(int interfaceId, Map<Integer, String> methodNameMap)
  parameters:
  - name: interfaceId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: methodNameMap
    type: <xref href="Map%3CInteger%2C+String%3E?alt=Map%3CInteger%2C+String%3E&text=Map%3CInteger%2C+String%3E" data-throw-if-not-resolved="False"/>
  syntax: public void initialize(int interfaceId, Map<Integer, String> methodNameMap)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.initialize(int,Map<Integer, String>)
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.onDispatch(int methodId, Object remotedObject, Object requestBody)
  name: onDispatch(int methodId, Object remotedObject, Object requestBody)
  nameWithType: MethodDispatcherBase.onDispatch(int methodId, Object remotedObject, Object requestBody)
  parameters:
  - description: <p>Id of the method. </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>The remoted object instance. </p>
    name: remotedObject
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>message body </p>
    name: requestBody
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+void?alt=abstract+void&text=abstract+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is implemented by the generated method dispatcher to dispatch one way messages to the specified methodId of the interface implemented by the remoted object.</p>

    <p></p>
  syntax: protected abstract void onDispatch(int methodId, Object remotedObject, Object requestBody)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.onDispatch(int,Object,Object)
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.onDispatchAsync(int methodId, Object remotedObject, Object requestBody, CancellationToken cancellationToken)
  name: onDispatchAsync(int methodId, Object remotedObject, Object requestBody, CancellationToken cancellationToken)
  nameWithType: MethodDispatcherBase.onDispatchAsync(int methodId, Object remotedObject, Object requestBody, CancellationToken cancellationToken)
  parameters:
  - description: <p>id of the method </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>the remoted object instance </p>
    name: remotedObject
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>The request body </p>
    name: requestBody
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>Cancellation token to cancel the async request. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.concurrent.CompletableFuture"></xref> that represents outstanding operation. The result of the task is the return value from the method. </p>
    type: <xref href="abstract+CompletableFuture%3CObject%3E?alt=abstract+CompletableFuture%3CObject%3E&text=abstract+CompletableFuture%3CObject%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is implemented by the generated method dispatcher to dispatch request to the specified methodId of the interface implemented by the remoted object.</p>

    <p></p>
  syntax: protected abstract CompletableFuture<Object> onDispatchAsync(int methodId, Object remotedObject, Object requestBody, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.onDispatchAsync(int,Object,Object,CancellationToken)
nameWithType: MethodDispatcherBase
syntax: public class MethodDispatcherBase implements MethodDispatcher
type: class
uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase
fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase
name: MethodDispatcherBase
package: microsoft.servicefabric.services.remoting.builder
summary: <p>The base class used by remoting code generator to generate the type that dispatches requests from the client to the right interface and method of the remoted object. </p>
metadata: {}
