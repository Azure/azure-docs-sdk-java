### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.SecurityProviderDiceEmulator()
  name: SecurityProviderDiceEmulator()
  nameWithType: SecurityProviderDiceEmulator.SecurityProviderDiceEmulator()
  summary: <p>Constructor to build the DICE certs from the simulator </p>
  syntax: public SecurityProviderDiceEmulator()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.SecurityProviderDiceEmulator()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.SecurityProviderDiceEmulator(String commonNameAlias, String commonNameSigner, String commonNameRoot)
  name: SecurityProviderDiceEmulator(String commonNameAlias, String commonNameSigner, String commonNameRoot)
  nameWithType: SecurityProviderDiceEmulator.SecurityProviderDiceEmulator(String commonNameAlias, String commonNameSigner, String commonNameRoot)
  parameters:
  - description: >-
      <p>A string value for the common name of alias cert. Cannot be<code>null 

          </code> or empty </p>
    name: commonNameAlias
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>A string value for the common name of signer cert. Cannot be<code>null 

          </code> or empty </p>
    name: commonNameSigner
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>A string value for the common name of root cert. cannot be<code>null 

          </code> or empty </p>
    name: commonNameRoot
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="SecurityProviderException?alt=SecurityProviderException&text=SecurityProviderException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if any of the input values are invalid </p>
  summary: <p>Constructor to build DICE certs from the simulator </p>
  syntax: public SecurityProviderDiceEmulator(String commonNameAlias, String commonNameSigner, String commonNameRoot)
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.SecurityProviderDiceEmulator(String,String,String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderX509?alt=com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderX509&text=SecurityProviderX509" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderX509.getRegistrationId()
- com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderX509.getSSLContext()
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.generateLeafCert(String uniqueId)
  name: generateLeafCert(String uniqueId)
  nameWithType: SecurityProviderDiceEmulator.generateLeafCert(String uniqueId)
  parameters:
  - description: >-
      <p>Unique ID to be used in common name. Cannot be<code>null 

          </code> or empty </p>
    name: uniqueId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A PEM formatted leaf cert with unique ID as common name </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Generates leaf certificate with the unique id as common name </p>
  syntax: public String generateLeafCert(String uniqueId)
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.generateLeafCert(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getAliasCertPem()
  name: getAliasCertPem()
  nameWithType: SecurityProviderDiceEmulator.getAliasCertPem()
  returns:
    description: <p>Alias cert in PEM format </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for the Alias cert in PEM format </p>
  syntax: public String getAliasCertPem()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getAliasCertPem()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getAliasCertPrivateKeyPem()
  name: getAliasCertPrivateKeyPem()
  nameWithType: SecurityProviderDiceEmulator.getAliasCertPrivateKeyPem()
  returns:
    description: <p>Alias cert in PEM format </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for the Alias cert in PEM format </p>
  syntax: public String getAliasCertPrivateKeyPem()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getAliasCertPrivateKeyPem()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getClientCertificate()
  name: getClientCertificate()
  nameWithType: SecurityProviderDiceEmulator.getClientCertificate()
  returns:
    description: <p>Alias certificate </p>
    type: <xref href="X509Certificate?alt=X509Certificate&text=X509Certificate" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for the Alias certificate </p>
  syntax: public X509Certificate getClientCertificate()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getClientCertificate()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getClientCertificateCommonName()
  name: getClientCertificateCommonName()
  nameWithType: SecurityProviderDiceEmulator.getClientCertificateCommonName()
  returns:
    description: <p>The common name for the root cert </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for the common name </p>
  syntax: public String getClientCertificateCommonName()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getClientCertificateCommonName()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getClientPrivateKey()
  name: getClientPrivateKey()
  nameWithType: SecurityProviderDiceEmulator.getClientPrivateKey()
  returns:
    description: <p>Alias private key </p>
    type: <xref href="Key?alt=Key&text=Key" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for Alias key </p>
  syntax: public Key getClientPrivateKey()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getClientPrivateKey()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getIntermediateCertificatesChain()
  name: getIntermediateCertificatesChain()
  nameWithType: SecurityProviderDiceEmulator.getIntermediateCertificatesChain()
  returns:
    type: <xref href="Collection%3CX509Certificate%3E?alt=Collection%3CX509Certificate%3E&text=Collection%3CX509Certificate%3E" data-throw-if-not-resolved="False"/>
  syntax: public Collection<X509Certificate> getIntermediateCertificatesChain()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getIntermediateCertificatesChain()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getRootCertPem()
  name: getRootCertPem()
  nameWithType: SecurityProviderDiceEmulator.getRootCertPem()
  returns:
    description: <p>Root cert in PEM format </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for the Root cert in PEM format </p>
  syntax: public String getRootCertPem()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getRootCertPem()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getSignerCertPem()
  name: getSignerCertPem()
  nameWithType: SecurityProviderDiceEmulator.getSignerCertPem()
  returns:
    description: <p>Signer cert in PEM format </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for the Signer cert in PEM format </p>
  syntax: public String getSignerCertPem()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator.getSignerCertPem()
nameWithType: SecurityProviderDiceEmulator
syntax: public class SecurityProviderDiceEmulator extends SecurityProviderX509
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator
fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderDiceEmulator
name: SecurityProviderDiceEmulator
package: com.microsoft.azure.sdk.iot.provisioning.security.hsm
metadata: {}
