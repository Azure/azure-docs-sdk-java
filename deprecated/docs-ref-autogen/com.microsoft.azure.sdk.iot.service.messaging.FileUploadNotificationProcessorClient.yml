### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  name: FileUploadNotificationProcessorClient(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  nameWithType: FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  parameters:
  - description: <p>The hostname of your IoT Hub instance (For instance, "your-iot-hub.azure-devices.net") </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The SAS token provider that will be used for authentication. </p>
    name: azureSasCredential
    type: <xref href="AzureSasCredential?alt=AzureSasCredential&text=AzureSasCredential" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol that the client will communicate to IoT Hub over. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The callback to be executed each time a file upload notification is received from the service. May not be null. </p>
    name: fileUploadNotificationProcessor
    type: Function&lt;<xref href="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification?alt=com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification&text=FileUploadNotification" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType?alt=com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType&text=AcknowledgementType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Construct a FileUploadNotificationProcessorClient using a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="AzureSasCredential"></xref> instance for authentication.</p>

    <p></p>
  syntax: public FileUploadNotificationProcessorClient(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String,AzureSasCredential,IotHubServiceClientProtocol,Function<FileUploadNotification, AcknowledgementType>)
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  name: FileUploadNotificationProcessorClient(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  nameWithType: FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  parameters:
  - description: <p>The hostname of your IoT Hub instance (For instance, "your-iot-hub.azure-devices.net") </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The SAS token provider that will be used for authentication. </p>
    name: azureSasCredential
    type: <xref href="AzureSasCredential?alt=AzureSasCredential&text=AzureSasCredential" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol that the client will communicate to IoT Hub over. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The callback to be executed each time a file upload notification is received from the service. May not be null. </p>
    name: fileUploadNotificationProcessor
    type: Function&lt;<xref href="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification?alt=com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification&text=FileUploadNotification" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType?alt=com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType&text=AcknowledgementType" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>The connection options to use when connecting to the service. May not be null. </p>
    name: options
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClientOptions?alt=com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClientOptions&text=FileUploadNotificationProcessorClientOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Construct a FileUploadNotificationProcessorClient using a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="AzureSasCredential"></xref> instance for authentication.</p>

    <p></p>
  syntax: public FileUploadNotificationProcessorClient(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String,AzureSasCredential,IotHubServiceClientProtocol,Function<FileUploadNotification, AcknowledgementType>,FileUploadNotificationProcessorClientOptions)
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String connectionString, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  name: FileUploadNotificationProcessorClient(String connectionString, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  nameWithType: FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String connectionString, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  parameters:
  - description: <p>The connection string for the Iot Hub. </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol that the client will communicate to IoT Hub over. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The callback to be executed each time a file upload notification is received from the service. May not be null. </p>
    name: fileUploadNotificationProcessor
    type: Function&lt;<xref href="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification?alt=com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification&text=FileUploadNotification" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType?alt=com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType&text=AcknowledgementType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Construct a FileUploadNotificationProcessorClient from the provided connection string.</p>

    <p></p>
  syntax: public FileUploadNotificationProcessorClient(String connectionString, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String,IotHubServiceClientProtocol,Function<FileUploadNotification, AcknowledgementType>)
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String connectionString, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  name: FileUploadNotificationProcessorClient(String connectionString, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  nameWithType: FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String connectionString, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  parameters:
  - description: <p>The connection string for the Iot Hub. </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol that the client will communicate to IoT Hub over. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The callback to be executed each time a file upload notification is received from the service. May not be null. </p>
    name: fileUploadNotificationProcessor
    type: Function&lt;<xref href="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification?alt=com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification&text=FileUploadNotification" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType?alt=com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType&text=AcknowledgementType" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>The connection options to use when connecting to the service. May not be null. </p>
    name: options
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClientOptions?alt=com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClientOptions&text=FileUploadNotificationProcessorClientOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Construct a FileUploadNotificationProcessorClient from the provided connection string.</p>

    <p></p>
  syntax: public FileUploadNotificationProcessorClient(String connectionString, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String,IotHubServiceClientProtocol,Function<FileUploadNotification, AcknowledgementType>,FileUploadNotificationProcessorClientOptions)
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  name: FileUploadNotificationProcessorClient(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  nameWithType: FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  parameters:
  - description: <p>The hostname of your IoT Hub instance (For instance, "your-iot-hub.azure-devices.net") </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The custom <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TokenCredential"></xref> that will provide authentication tokens to this library when they are needed. The provided tokens must be Json Web Tokens. </p>
    name: credential
    type: <xref href="TokenCredential?alt=TokenCredential&text=TokenCredential" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol that the client will communicate to IoT Hub over. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The callback to be executed each time a file upload notification is received from the service. May not be null. </p>
    name: fileUploadNotificationProcessor
    type: Function&lt;<xref href="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification?alt=com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification&text=FileUploadNotification" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType?alt=com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType&text=AcknowledgementType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Construct a FileUploadNotificationProcessorClient using a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TokenCredential"></xref> instance for authentication.</p>

    <p></p>
  syntax: public FileUploadNotificationProcessorClient(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor)
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String,TokenCredential,IotHubServiceClientProtocol,Function<FileUploadNotification, AcknowledgementType>)
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  name: FileUploadNotificationProcessorClient(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  nameWithType: FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  parameters:
  - description: <p>The hostname of your IoT Hub instance (For instance, "your-iot-hub.azure-devices.net") </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The custom <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TokenCredential"></xref> that will provide authentication tokens to this library when they are needed. The provided tokens must be Json Web Tokens. </p>
    name: credential
    type: <xref href="TokenCredential?alt=TokenCredential&text=TokenCredential" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol that the client will communicate to IoT Hub over. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The callback to be executed each time a file upload notification is received from the service. May not be null. </p>
    name: fileUploadNotificationProcessor
    type: Function&lt;<xref href="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification?alt=com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotification&text=FileUploadNotification" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType?alt=com.microsoft.azure.sdk.iot.service.messaging.AcknowledgementType&text=AcknowledgementType" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>The connection options to use when connecting to the service. May not be null. </p>
    name: options
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClientOptions?alt=com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClientOptions&text=FileUploadNotificationProcessorClientOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Construct a FileUploadNotificationProcessorClient using a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TokenCredential"></xref> instance for authentication.</p>

    <p></p>
  syntax: public FileUploadNotificationProcessorClient(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Function<FileUploadNotification, AcknowledgementType> fileUploadNotificationProcessor, FileUploadNotificationProcessorClientOptions options)
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.FileUploadNotificationProcessorClient(String,TokenCredential,IotHubServiceClientProtocol,Function<FileUploadNotification, AcknowledgementType>,FileUploadNotificationProcessorClientOptions)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.isRunning()
  name: isRunning()
  nameWithType: FileUploadNotificationProcessorClient.isRunning()
  returns:
    description: <p>true if this client is currently open and false otherwise. </p>
    type: <xref href="synchronized+boolean?alt=synchronized+boolean&text=synchronized+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns true if this client's underlying amqp connection is currently open and false otherwise. This client may lose connectivity due to network issues, so this value may be false even if you have not closed the client yourself. Monitoring the optional errorProcessor that can be set in <xref uid="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClientOptions" data-throw-if-not-resolved="false" data-raw-source="FileUploadNotificationProcessorClientOptions"></xref> will provide the context on when connection loss events occur, and why they occurred.</p>

    <p></p>
  syntax: public synchronized boolean isRunning()
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.isRunning()
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.start()
  name: start()
  nameWithType: FileUploadNotificationProcessorClient.start()
  exceptions:
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>If any IoT Hub level exceptions occur such as an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IotHubUnauthorizedException"></xref>. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If any network level exceptions occur such as the connection timing out. </p>
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If this thread is interrupted while waiting for the connection to the service to open. </p>
  - type: <xref href="TimeoutException?alt=TimeoutException&text=TimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>If the connection is not established before the default timeout. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Open this client so that it can begin processing file upload notifications. When you want to stop processing file upload notifications, you should should call <xref uid="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.stop()" data-throw-if-not-resolved="false" data-raw-source="stop()"></xref> to free up network resources. If this client is already started, then this function will do nothing.</p>

    <p></p>
  syntax: public synchronized void start()
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.start()
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.start(int timeoutMilliseconds)
  name: start(int timeoutMilliseconds)
  nameWithType: FileUploadNotificationProcessorClient.start(int timeoutMilliseconds)
  parameters:
  - description: <p>the maximum number of milliseconds to wait for the underlying amqp connection to open. If this value is 0, it will have an infinite timeout. </p>
    name: timeoutMilliseconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>If any IoT Hub level exceptions occur such as an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IotHubUnauthorizedException"></xref>. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If any network level exceptions occur such as the connection timing out. </p>
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If this thread is interrupted while waiting for the connection to the service to open. </p>
  - type: <xref href="TimeoutException?alt=TimeoutException&text=TimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>If the connection is not established before the provided timeout. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Open this client so that it can begin processing file upload notifications. When you want to stop processing file upload notifications, you should should call <xref uid="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.stop()" data-throw-if-not-resolved="false" data-raw-source="stop()"></xref> to free up network resources. If this client is already started, then this function will do nothing.</p>

    <p></p>
  syntax: public synchronized void start(int timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.start(int)
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.stop()
  name: stop()
  nameWithType: FileUploadNotificationProcessorClient.stop()
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if this function is interrupted while waiting for the connection to close down all network resources. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops this client from processing any more file upload notifications and releases all network resources tied to it. Once stopped, this client can be restarted by calling <xref uid="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.start()" data-throw-if-not-resolved="false" data-raw-source="start()"></xref>. If this client has already been stopped, this function will do nothing.</p>

    <p></p>
  syntax: public synchronized void stop()
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.stop()
- fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.stop(int timeoutMilliseconds)
  name: stop(int timeoutMilliseconds)
  nameWithType: FileUploadNotificationProcessorClient.stop(int timeoutMilliseconds)
  parameters:
  - description: <p>the maximum number of milliseconds to wait for the underlying amqp connection to close. If this value is 0, it will have an infinite timeout. If the provided timeout has passed and the connection has not closed gracefully, then the connection will be forcefully closed and no exception will be thrown. </p>
    name: timeoutMilliseconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if this function is interrupted while waiting for the connection to close down all network resources. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops this client from processing any more file upload notifications and releases all network resources tied to it. Once stopped, this client can be restarted by calling <xref uid="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.start()" data-throw-if-not-resolved="false" data-raw-source="start()"></xref>. If this client has already been stopped, this function will do nothing.</p>

    <p></p>
  syntax: public synchronized void stop(int timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient.stop(int)
nameWithType: FileUploadNotificationProcessorClient
syntax: public class FileUploadNotificationProcessorClient
type: class
uid: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient
fullName: com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClient
name: FileUploadNotificationProcessorClient
package: com.microsoft.azure.sdk.iot.service.messaging
summary: >-
  <p>A client for handling file upload notifications. For more details on what file upload notifications are, see <a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#service-file-upload-notifications">this document</a>.</p>

  <p>This client relies on a persistent amqp/amqp_ws connection to IoT Hub that may break due to network instability. While optional to monitor, users are highly encouraged to utilize the errorProcessorHandler defined in the <xref uid="com.microsoft.azure.sdk.iot.service.messaging.FileUploadNotificationProcessorClientOptions" data-throw-if-not-resolved="false" data-raw-source="FileUploadNotificationProcessorClientOptions"></xref> when constructing this client in order to monitor the connection state and to re-open the connection when needed. See the message feedback processor client sample in this repo for best practices for monitoring and handling disconnection events. </p>
metadata: {}
