### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.KeyWrapAlgorithm(String name)
  name: KeyWrapAlgorithm(String name)
  nameWithType: KeyWrapAlgorithm.KeyWrapAlgorithm(String name)
  parameters:
  - description: <p>The name of the algorithm. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructor.</p>

    <p></p>
  syntax: protected KeyWrapAlgorithm(String name)
  uid: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.KeyWrapAlgorithm(String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.keyvault.cryptography.Algorithm?alt=com.microsoft.azure.keyvault.cryptography.Algorithm&text=Algorithm" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.keyvault.cryptography.Algorithm.Algorithm(String)
- com.microsoft.azure.keyvault.cryptography.Algorithm.getName()
methods:
- fullName: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateDecryptor(byte[] key)
  name: CreateDecryptor(byte[] key)
  nameWithType: KeyWrapAlgorithm.CreateDecryptor(byte[] key)
  parameters:
  - description: <p>The AES key material to be used. </p>
    name: key
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
  - type: <xref href="NoSuchPaddingException?alt=NoSuchPaddingException&text=NoSuchPaddingException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidAlgorithmParameterException?alt=InvalidAlgorithmParameterException&text=InvalidAlgorithmParameterException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation </p>
    type: abstract <xref href="com.microsoft.azure.keyvault.cryptography.ICryptoTransform?alt=com.microsoft.azure.keyvault.cryptography.ICryptoTransform&text=ICryptoTransform" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation for decryption. Uses the default AES-KW initialization vector. </p>
  syntax: public abstract ICryptoTransform CreateDecryptor(byte[] key)
  uid: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateDecryptor(byte [])
- fullName: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateDecryptor(byte[] key, byte[] iv)
  name: CreateDecryptor(byte[] key, byte[] iv)
  nameWithType: KeyWrapAlgorithm.CreateDecryptor(byte[] key, byte[] iv)
  parameters:
  - description: <p>The AES key material to be used. </p>
    name: key
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The initialization vector to be used. </p>
    name: iv
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
  - type: <xref href="NoSuchPaddingException?alt=NoSuchPaddingException&text=NoSuchPaddingException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidAlgorithmParameterException?alt=InvalidAlgorithmParameterException&text=InvalidAlgorithmParameterException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation </p>
    type: abstract <xref href="com.microsoft.azure.keyvault.cryptography.ICryptoTransform?alt=com.microsoft.azure.keyvault.cryptography.ICryptoTransform&text=ICryptoTransform" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation for decryption using the supplied initialization vector. </p>
  syntax: public abstract ICryptoTransform CreateDecryptor(byte[] key, byte[] iv)
  uid: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateDecryptor(byte [],byte [])
- fullName: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateDecryptor(byte[] key, byte[] iv, Provider provider)
  name: CreateDecryptor(byte[] key, byte[] iv, Provider provider)
  nameWithType: KeyWrapAlgorithm.CreateDecryptor(byte[] key, byte[] iv, Provider provider)
  parameters:
  - description: <p>The AES key material to be used. </p>
    name: key
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The initialization vector to be used. </p>
    name: iv
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The provider to use. </p>
    name: provider
    type: <xref href="Provider?alt=Provider&text=Provider" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
  - type: <xref href="NoSuchPaddingException?alt=NoSuchPaddingException&text=NoSuchPaddingException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidAlgorithmParameterException?alt=InvalidAlgorithmParameterException&text=InvalidAlgorithmParameterException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation </p>
    type: abstract <xref href="com.microsoft.azure.keyvault.cryptography.ICryptoTransform?alt=com.microsoft.azure.keyvault.cryptography.ICryptoTransform&text=ICryptoTransform" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation for decryption using the supplied initialization vector and the specific provider for the Java Security API. </p>
  syntax: public abstract ICryptoTransform CreateDecryptor(byte[] key, byte[] iv, Provider provider)
  uid: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateDecryptor(byte [],byte [],Provider)
- fullName: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateDecryptor(byte[] key, Provider provider)
  name: CreateDecryptor(byte[] key, Provider provider)
  nameWithType: KeyWrapAlgorithm.CreateDecryptor(byte[] key, Provider provider)
  parameters:
  - description: <p>The AES key material to be used. </p>
    name: key
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The provider to use. </p>
    name: provider
    type: <xref href="Provider?alt=Provider&text=Provider" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
  - type: <xref href="NoSuchPaddingException?alt=NoSuchPaddingException&text=NoSuchPaddingException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidAlgorithmParameterException?alt=InvalidAlgorithmParameterException&text=InvalidAlgorithmParameterException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation </p>
    type: abstract <xref href="com.microsoft.azure.keyvault.cryptography.ICryptoTransform?alt=com.microsoft.azure.keyvault.cryptography.ICryptoTransform&text=ICryptoTransform" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation for decryption that uses the specified provider for the Java Security API. Uses the default AES-KW initialization vector.</p>

    <p></p>
  syntax: public abstract ICryptoTransform CreateDecryptor(byte[] key, Provider provider)
  uid: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateDecryptor(byte [],Provider)
- fullName: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateEncryptor(byte[] key)
  name: CreateEncryptor(byte[] key)
  nameWithType: KeyWrapAlgorithm.CreateEncryptor(byte[] key)
  parameters:
  - description: <p>The AES key material to be used. </p>
    name: key
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
  - type: <xref href="NoSuchPaddingException?alt=NoSuchPaddingException&text=NoSuchPaddingException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidAlgorithmParameterException?alt=InvalidAlgorithmParameterException&text=InvalidAlgorithmParameterException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation </p>
    type: abstract <xref href="com.microsoft.azure.keyvault.cryptography.ICryptoTransform?alt=com.microsoft.azure.keyvault.cryptography.ICryptoTransform&text=ICryptoTransform" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation for encryption. Uses the default AES-KW initialization vector. </p>
  syntax: public abstract ICryptoTransform CreateEncryptor(byte[] key)
  uid: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateEncryptor(byte [])
- fullName: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateEncryptor(byte[] key, byte[] iv)
  name: CreateEncryptor(byte[] key, byte[] iv)
  nameWithType: KeyWrapAlgorithm.CreateEncryptor(byte[] key, byte[] iv)
  parameters:
  - description: <p>The AES key material to be used. </p>
    name: key
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The initialization vector to be used. </p>
    name: iv
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
  - type: <xref href="NoSuchPaddingException?alt=NoSuchPaddingException&text=NoSuchPaddingException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidAlgorithmParameterException?alt=InvalidAlgorithmParameterException&text=InvalidAlgorithmParameterException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation </p>
    type: abstract <xref href="com.microsoft.azure.keyvault.cryptography.ICryptoTransform?alt=com.microsoft.azure.keyvault.cryptography.ICryptoTransform&text=ICryptoTransform" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation for encryption using the supplied initialization vector. </p>
  syntax: public abstract ICryptoTransform CreateEncryptor(byte[] key, byte[] iv)
  uid: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateEncryptor(byte [],byte [])
- fullName: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateEncryptor(byte[] key, byte[] iv, Provider provider)
  name: CreateEncryptor(byte[] key, byte[] iv, Provider provider)
  nameWithType: KeyWrapAlgorithm.CreateEncryptor(byte[] key, byte[] iv, Provider provider)
  parameters:
  - description: <p>The AES key material to be used. </p>
    name: key
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The initialization vector to be used. </p>
    name: iv
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The provider to use. </p>
    name: provider
    type: <xref href="Provider?alt=Provider&text=Provider" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
  - type: <xref href="NoSuchPaddingException?alt=NoSuchPaddingException&text=NoSuchPaddingException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidAlgorithmParameterException?alt=InvalidAlgorithmParameterException&text=InvalidAlgorithmParameterException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation </p>
    type: abstract <xref href="com.microsoft.azure.keyvault.cryptography.ICryptoTransform?alt=com.microsoft.azure.keyvault.cryptography.ICryptoTransform&text=ICryptoTransform" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation for encryption using the supplied initialization vector and the specific provider for the Java Security API. </p>
  syntax: public abstract ICryptoTransform CreateEncryptor(byte[] key, byte[] iv, Provider provider)
  uid: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateEncryptor(byte [],byte [],Provider)
- fullName: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateEncryptor(byte[] key, Provider provider)
  name: CreateEncryptor(byte[] key, Provider provider)
  nameWithType: KeyWrapAlgorithm.CreateEncryptor(byte[] key, Provider provider)
  parameters:
  - description: <p>The AES key material to be used. </p>
    name: key
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The provider to use. </p>
    name: provider
    type: <xref href="Provider?alt=Provider&text=Provider" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
  - type: <xref href="NoSuchPaddingException?alt=NoSuchPaddingException&text=NoSuchPaddingException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
  - type: <xref href="InvalidAlgorithmParameterException?alt=InvalidAlgorithmParameterException&text=InvalidAlgorithmParameterException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation </p>
    type: abstract <xref href="com.microsoft.azure.keyvault.cryptography.ICryptoTransform?alt=com.microsoft.azure.keyvault.cryptography.ICryptoTransform&text=ICryptoTransform" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a <xref uid="com.microsoft.azure.keyvault.cryptography.ICryptoTransform" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.keyvault.cryptography.ICryptoTransform"></xref> implementation for encryption that uses the specified provider for the Java Security API. Uses the default AES-KW initialization vector.</p>

    <p></p>
  syntax: public abstract ICryptoTransform CreateEncryptor(byte[] key, Provider provider)
  uid: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm.CreateEncryptor(byte [],Provider)
nameWithType: KeyWrapAlgorithm
syntax: public class KeyWrapAlgorithm extends Algorithm
type: class
uid: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm
fullName: com.microsoft.azure.keyvault.cryptography.KeyWrapAlgorithm
name: KeyWrapAlgorithm
package: com.microsoft.azure.keyvault.cryptography
summary: <p>Abstract base class for all key wrap algorithms. </p>
metadata: {}
