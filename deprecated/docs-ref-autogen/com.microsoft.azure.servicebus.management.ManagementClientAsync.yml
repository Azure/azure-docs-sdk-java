### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.ManagementClientAsync(ConnectionStringBuilder connectionStringBuilder)
  name: ManagementClientAsync(ConnectionStringBuilder connectionStringBuilder)
  nameWithType: ManagementClientAsync.ManagementClientAsync(ConnectionStringBuilder connectionStringBuilder)
  parameters:
  - description: <p>- connectionStringBuilder containing namespace information and client settings. </p>
    name: connectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a new <xref uid="com.microsoft.azure.servicebus.management.ManagementClientAsync" data-throw-if-not-resolved="false" data-raw-source="ManagementClientAsync"></xref>. User should call <xref uid="com.microsoft.azure.servicebus.management.ManagementClientAsync.close()" data-throw-if-not-resolved="false" data-raw-source="ManagementClientAsync#close()"></xref> at the end of life of the client. </p>
  syntax: public ManagementClientAsync(ConnectionStringBuilder connectionStringBuilder)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.ManagementClientAsync(ConnectionStringBuilder)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.ManagementClientAsync(URI namespaceEndpointURI, ClientSettings clientSettings)
  name: ManagementClientAsync(URI namespaceEndpointURI, ClientSettings clientSettings)
  nameWithType: ManagementClientAsync.ManagementClientAsync(URI namespaceEndpointURI, ClientSettings clientSettings)
  parameters:
  - description: <p>- URI of the namespace connecting to. </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>- client settings. </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a new <xref uid="com.microsoft.azure.servicebus.management.ManagementClientAsync" data-throw-if-not-resolved="false" data-raw-source="ManagementClientAsync"></xref>. User should call <xref uid="com.microsoft.azure.servicebus.management.ManagementClientAsync.close()" data-throw-if-not-resolved="false" data-raw-source="ManagementClientAsync#close()"></xref> at the end of life of the client. </p>
  syntax: public ManagementClientAsync(URI namespaceEndpointURI, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.ManagementClientAsync(URI,ClientSettings)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.close()
  name: close()
  nameWithType: ManagementClientAsync.close()
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if an I/O error occurs </p>
  summary: <p>Disposes and closes the managementClient. </p>
  syntax: public void close()
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.close()
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.createQueueAsync(QueueDescription queueDescription)
  name: createQueueAsync(QueueDescription queueDescription)
  nameWithType: ManagementClientAsync.createQueueAsync(QueueDescription queueDescription)
  parameters:
  - description: <p>- A <xref uid="com.microsoft.azure.servicebus.management.QueueDescription" data-throw-if-not-resolved="false" data-raw-source="QueueDescription"></xref> object describing the attributes with which the new queue will be created. </p>
    name: queueDescription
    type: <xref href="com.microsoft.azure.servicebus.management.QueueDescription?alt=com.microsoft.azure.servicebus.management.QueueDescription&text=QueueDescription" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.management.QueueDescription" data-throw-if-not-resolved="false" data-raw-source="QueueDescription"></xref> of the newly created queue. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.QueueDescription?alt=com.microsoft.azure.servicebus.management.QueueDescription&text=QueueDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a new queue in the service namespace with the given name. See <xref uid="com.microsoft.azure.servicebus.management.QueueDescription" data-throw-if-not-resolved="false" data-raw-source="QueueDescription"></xref> for default values of queue properties. </p>
  syntax: public CompletableFuture<QueueDescription> createQueueAsync(QueueDescription queueDescription)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.createQueueAsync(QueueDescription)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.createQueueAsync(String queuePath)
  name: createQueueAsync(String queuePath)
  nameWithType: ManagementClientAsync.createQueueAsync(String queuePath)
  parameters:
  - description: <p>- The name of the queue relative to the service namespace base address. </p>
    name: queuePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- Entity name is null, empty, too long or uses illegal characters. </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.management.QueueDescription" data-throw-if-not-resolved="false" data-raw-source="QueueDescription"></xref> of the newly created queue. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.QueueDescription?alt=com.microsoft.azure.servicebus.management.QueueDescription&text=QueueDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a new queue in the service namespace with the given name. See <xref uid="com.microsoft.azure.servicebus.management.QueueDescription" data-throw-if-not-resolved="false" data-raw-source="QueueDescription"></xref> for default values of queue properties. </p>
  syntax: public CompletableFuture<QueueDescription> createQueueAsync(String queuePath)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.createQueueAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.createRuleAsync(String topicName, String subscriptionName, RuleDescription ruleDescription)
  name: createRuleAsync(String topicName, String subscriptionName, RuleDescription ruleDescription)
  nameWithType: ManagementClientAsync.createRuleAsync(String topicName, String subscriptionName, RuleDescription ruleDescription)
  parameters:
  - description: <p>- Name of the topic. </p>
    name: topicName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- Name of the subscription. </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="RuleDescription"></xref> object describing the attributes with which the new rule will be created. </p>
    name: ruleDescription
    type: <xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="RuleDescription"></xref> of the newly created rule. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a new rule for a given topic - subscription. See <xref uid="" data-throw-if-not-resolved="false" data-raw-source="RuleDescription"></xref> for default values of subscription properties. </p>
  syntax: public CompletableFuture<RuleDescription> createRuleAsync(String topicName, String subscriptionName, RuleDescription ruleDescription)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.createRuleAsync(String,String,RuleDescription)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.createSubscriptionAsync(String topicPath, String subscriptionName)
  name: createSubscriptionAsync(String topicPath, String subscriptionName)
  nameWithType: ManagementClientAsync.createSubscriptionAsync(String topicPath, String subscriptionName)
  parameters:
  - description: <p>- The name of the topic relative to the service namespace base address. </p>
    name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The name of the subscription. </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- Entity name is null, empty, too long or uses illegal characters. </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.management.SubscriptionDescription" data-throw-if-not-resolved="false" data-raw-source="SubscriptionDescription"></xref> of the newly created subscription. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.SubscriptionDescription?alt=com.microsoft.azure.servicebus.management.SubscriptionDescription&text=SubscriptionDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a new subscription for a given topic in the service namespace with the given name. See <xref uid="com.microsoft.azure.servicebus.management.SubscriptionDescription" data-throw-if-not-resolved="false" data-raw-source="SubscriptionDescription"></xref> for default values of subscription properties. </p>
  syntax: public CompletableFuture<SubscriptionDescription> createSubscriptionAsync(String topicPath, String subscriptionName)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.createSubscriptionAsync(String,String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.createSubscriptionAsync(SubscriptionDescription subscriptionDescription)
  name: createSubscriptionAsync(SubscriptionDescription subscriptionDescription)
  nameWithType: ManagementClientAsync.createSubscriptionAsync(SubscriptionDescription subscriptionDescription)
  parameters:
  - description: <p>- A <xref uid="com.microsoft.azure.servicebus.management.SubscriptionDescription" data-throw-if-not-resolved="false" data-raw-source="SubscriptionDescription"></xref> object describing the attributes with which the new subscription will be created. </p>
    name: subscriptionDescription
    type: <xref href="com.microsoft.azure.servicebus.management.SubscriptionDescription?alt=com.microsoft.azure.servicebus.management.SubscriptionDescription&text=SubscriptionDescription" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.management.SubscriptionDescription" data-throw-if-not-resolved="false" data-raw-source="SubscriptionDescription"></xref> of the newly created subscription. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.SubscriptionDescription?alt=com.microsoft.azure.servicebus.management.SubscriptionDescription&text=SubscriptionDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a new subscription in the service namespace with the given name. See <xref uid="com.microsoft.azure.servicebus.management.SubscriptionDescription" data-throw-if-not-resolved="false" data-raw-source="SubscriptionDescription"></xref> for default values of subscription properties. </p>
  syntax: public CompletableFuture<SubscriptionDescription> createSubscriptionAsync(SubscriptionDescription subscriptionDescription)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.createSubscriptionAsync(SubscriptionDescription)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.createSubscriptionAsync(SubscriptionDescription subscriptionDescription, RuleDescription defaultRule)
  name: createSubscriptionAsync(SubscriptionDescription subscriptionDescription, RuleDescription defaultRule)
  nameWithType: ManagementClientAsync.createSubscriptionAsync(SubscriptionDescription subscriptionDescription, RuleDescription defaultRule)
  parameters:
  - description: <p>- A <xref uid="com.microsoft.azure.servicebus.management.SubscriptionDescription" data-throw-if-not-resolved="false" data-raw-source="SubscriptionDescription"></xref> object describing the attributes with which the new subscription will be created. </p>
    name: subscriptionDescription
    type: <xref href="com.microsoft.azure.servicebus.management.SubscriptionDescription?alt=com.microsoft.azure.servicebus.management.SubscriptionDescription&text=SubscriptionDescription" data-throw-if-not-resolved="False"/>
  - description: <p>- A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="RuleDescription"></xref> object describing the default rule. If null, then pass-through filter will be created. </p>
    name: defaultRule
    type: <xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.management.SubscriptionDescription" data-throw-if-not-resolved="false" data-raw-source="SubscriptionDescription"></xref> of the newly created subscription. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.SubscriptionDescription?alt=com.microsoft.azure.servicebus.management.SubscriptionDescription&text=SubscriptionDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a new subscription in the service namespace with the provided default rule. See <xref uid="com.microsoft.azure.servicebus.management.SubscriptionDescription" data-throw-if-not-resolved="false" data-raw-source="SubscriptionDescription"></xref> for default values of subscription properties. </p>
  syntax: public CompletableFuture<SubscriptionDescription> createSubscriptionAsync(SubscriptionDescription subscriptionDescription, RuleDescription defaultRule)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.createSubscriptionAsync(SubscriptionDescription,RuleDescription)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.createTopicAsync(String topicPath)
  name: createTopicAsync(String topicPath)
  nameWithType: ManagementClientAsync.createTopicAsync(String topicPath)
  parameters:
  - description: <p>- The name of the topic relative to the service namespace base address. </p>
    name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- Entity name is null, empty, too long or uses illegal characters. </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.management.TopicDescription" data-throw-if-not-resolved="false" data-raw-source="TopicDescription"></xref> of the newly created topic. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.TopicDescription?alt=com.microsoft.azure.servicebus.management.TopicDescription&text=TopicDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a new topic in the service namespace with the given name. See <xref uid="com.microsoft.azure.servicebus.management.TopicDescription" data-throw-if-not-resolved="false" data-raw-source="TopicDescription"></xref> for default values of topic properties. </p>
  syntax: public CompletableFuture<TopicDescription> createTopicAsync(String topicPath)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.createTopicAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.createTopicAsync(TopicDescription topicDescription)
  name: createTopicAsync(TopicDescription topicDescription)
  nameWithType: ManagementClientAsync.createTopicAsync(TopicDescription topicDescription)
  parameters:
  - description: <p>- A <xref uid="com.microsoft.azure.servicebus.management.QueueDescription" data-throw-if-not-resolved="false" data-raw-source="QueueDescription"></xref> object describing the attributes with which the new topic will be created. </p>
    name: topicDescription
    type: <xref href="com.microsoft.azure.servicebus.management.TopicDescription?alt=com.microsoft.azure.servicebus.management.TopicDescription&text=TopicDescription" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.management.TopicDescription" data-throw-if-not-resolved="false" data-raw-source="TopicDescription"></xref> of the newly created topic. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.TopicDescription?alt=com.microsoft.azure.servicebus.management.TopicDescription&text=TopicDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a new topic in the service namespace with the given name. See <xref uid="com.microsoft.azure.servicebus.management.TopicDescription" data-throw-if-not-resolved="false" data-raw-source="TopicDescription"></xref> for default values of topic properties. </p>
  syntax: public CompletableFuture<TopicDescription> createTopicAsync(TopicDescription topicDescription)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.createTopicAsync(TopicDescription)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.deleteQueueAsync(String path)
  name: deleteQueueAsync(String path)
  nameWithType: ManagementClientAsync.deleteQueueAsync(String path)
  parameters:
  - description: <p>- The name of the entity relative to the service namespace base address. </p>
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- path is not null / empty / too long / invalid. </p>
  returns:
    description: <p>A completable future that completes when the queue is deleted. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Deletes the queue described by the path relative to the service namespace base address. </p>
  syntax: public CompletableFuture<Void> deleteQueueAsync(String path)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.deleteQueueAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.deleteRuleAsync(String topicPath, String subscriptionName, String ruleName)
  name: deleteRuleAsync(String topicPath, String subscriptionName, String ruleName)
  nameWithType: ManagementClientAsync.deleteRuleAsync(String topicPath, String subscriptionName, String ruleName)
  parameters:
  - description: <p>- The name of the topic. </p>
    name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The name of the subscription. </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The name of the rule. </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- path is not null / empty / too long / invalid. </p>
  returns:
    description: <p>A completable future that completes when the rule is deleted. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Deletes the rule for a given topic-subscription. </p>
  syntax: public CompletableFuture<Void> deleteRuleAsync(String topicPath, String subscriptionName, String ruleName)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.deleteRuleAsync(String,String,String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.deleteSubscriptionAsync(String topicPath, String subscriptionName)
  name: deleteSubscriptionAsync(String topicPath, String subscriptionName)
  nameWithType: ManagementClientAsync.deleteSubscriptionAsync(String topicPath, String subscriptionName)
  parameters:
  - description: <p>- The name of the topic. </p>
    name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The name of the subscription. </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- path is not null / empty / too long / invalid. </p>
  returns:
    description: <p>A completable future that completes when the subscription is deleted. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Deletes the subscription described by the topicPath and the subscriptionName. </p>
  syntax: public CompletableFuture<Void> deleteSubscriptionAsync(String topicPath, String subscriptionName)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.deleteSubscriptionAsync(String,String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.deleteTopicAsync(String path)
  name: deleteTopicAsync(String path)
  nameWithType: ManagementClientAsync.deleteTopicAsync(String path)
  parameters:
  - description: <p>- The name of the entity relative to the service namespace base address. </p>
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- path is not null / empty / too long / invalid. </p>
  returns:
    description: <p>A completable future that completes when the topic is deleted. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Deletes the topic described by the path relative to the service namespace base address. </p>
  syntax: public CompletableFuture<Void> deleteTopicAsync(String path)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.deleteTopicAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getNamespaceInfoAsync()
  name: getNamespaceInfoAsync()
  nameWithType: ManagementClientAsync.getNamespaceInfoAsync()
  returns:
    description: <p>- <xref uid="com.microsoft.azure.servicebus.management.NamespaceInfo" data-throw-if-not-resolved="false" data-raw-source="NamespaceInfo"></xref> containing namespace information. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.NamespaceInfo?alt=com.microsoft.azure.servicebus.management.NamespaceInfo&text=NamespaceInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Retrieves information related to the namespace. Works with any claim (Send/Listen/Manage). </p>
  syntax: public CompletableFuture<NamespaceInfo> getNamespaceInfoAsync()
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getNamespaceInfoAsync()
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getQueueAsync(String path)
  name: getQueueAsync(String path)
  nameWithType: ManagementClientAsync.getQueueAsync(String path)
  parameters:
  - description: <p>- The path of the queue relative to service bus namespace. </p>
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- Thrown if path is null, empty, or not in right format or length. </p>
  returns:
    description: <p>- QueueDescription containing information about the queue. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.QueueDescription?alt=com.microsoft.azure.servicebus.management.QueueDescription&text=QueueDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Retrieves a queue from the service namespace </p>
  syntax: public CompletableFuture<QueueDescription> getQueueAsync(String path)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getQueueAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getQueueRuntimeInfoAsync(String path)
  name: getQueueRuntimeInfoAsync(String path)
  nameWithType: ManagementClientAsync.getQueueRuntimeInfoAsync(String path)
  parameters:
  - description: <p>- The path of the queue relative to service bus namespace. </p>
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- Thrown if path is null, empty, or not in right format or length. </p>
  returns:
    description: <p>- QueueRuntimeInfo containing runtime information about the queue. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.QueueRuntimeInfo?alt=com.microsoft.azure.servicebus.management.QueueRuntimeInfo&text=QueueRuntimeInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Retrieves the runtime information of a queue. </p>
  syntax: public CompletableFuture<QueueRuntimeInfo> getQueueRuntimeInfoAsync(String path)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getQueueRuntimeInfoAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getQueuesAsync()
  name: getQueuesAsync()
  nameWithType: ManagementClientAsync.getQueuesAsync()
  returns:
    description: <p>the first 100 queues. </p>
    type: CompletableFuture&lt;List&lt;<xref href="com.microsoft.azure.servicebus.management.QueueDescription?alt=com.microsoft.azure.servicebus.management.QueueDescription&text=QueueDescription" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: <p>Retrieves the list of queues present in the namespace. </p>
  syntax: public CompletableFuture<List<QueueDescription>> getQueuesAsync()
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getQueuesAsync()
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getQueuesAsync(int count, int skip)
  name: getQueuesAsync(int count, int skip)
  nameWithType: ManagementClientAsync.getQueuesAsync(int count, int skip)
  parameters:
  - description: <p>- The number of queues to fetch. Defaults to 100. Maximum value allowed is 100. </p>
    name: count
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>- The number of queues to skip. Defaults to 0. Cannot be negative. </p>
    name: skip
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the list of queues. </p>
    type: CompletableFuture&lt;List&lt;<xref href="com.microsoft.azure.servicebus.management.QueueDescription?alt=com.microsoft.azure.servicebus.management.QueueDescription&text=QueueDescription" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: <p>Retrieves the list of queues present in the namespace. You can simulate pages of list of entities by manipulating count and skip parameters. skip(0)+count(100) gives first 100 entities. skip(100)+count(100) gives the next 100 entities. </p>
  syntax: public CompletableFuture<List<QueueDescription>> getQueuesAsync(int count, int skip)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getQueuesAsync(int,int)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getRuleAsync(String topicPath, String subscriptionName, String ruleName)
  name: getRuleAsync(String topicPath, String subscriptionName, String ruleName)
  nameWithType: ManagementClientAsync.getRuleAsync(String topicPath, String subscriptionName, String ruleName)
  parameters:
  - description: <p>- The path of the topic relative to service bus namespace. </p>
    name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The name of the subscription. </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The name of the rule. </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- Thrown if path is null, empty, or not in right format or length. </p>
  returns:
    description: <p>- RuleDescription containing information about the subscription. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Retrieves a rule for a given topic and subscription from the service namespace </p>
  syntax: public CompletableFuture<RuleDescription> getRuleAsync(String topicPath, String subscriptionName, String ruleName)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getRuleAsync(String,String,String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getRulesAsync(String topicName, String subscriptionName)
  name: getRulesAsync(String topicName, String subscriptionName)
  nameWithType: ManagementClientAsync.getRulesAsync(String topicName, String subscriptionName)
  parameters:
  - description: <p>- The name of the topic. </p>
    name: topicName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The name of the subscription. </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the first 100 rules. </p>
    type: CompletableFuture&lt;List&lt;<xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: <p>Retrieves the list of rules for a given topic-subscription in the namespace. </p>
  syntax: public CompletableFuture<List<RuleDescription>> getRulesAsync(String topicName, String subscriptionName)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getRulesAsync(String,String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getRulesAsync(String topicName, String subscriptionName, int count, int skip)
  name: getRulesAsync(String topicName, String subscriptionName, int count, int skip)
  nameWithType: ManagementClientAsync.getRulesAsync(String topicName, String subscriptionName, int count, int skip)
  parameters:
  - description: <p>- The name of the topic. </p>
    name: topicName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The name of the subscription. </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The number of rules to fetch. Defaults to 100. Maximum value allowed is 100. </p>
    name: count
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>- The number of rules to skip. Defaults to 0. Cannot be negative. </p>
    name: skip
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the list of rules. </p>
    type: CompletableFuture&lt;List&lt;<xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: <p>Retrieves the list of rules for a given topic-subscription in the namespace. You can simulate pages of list of entities by manipulating count and skip parameters. skip(0)+count(100) gives first 100 entities. skip(100)+count(100) gives the next 100 entities. </p>
  syntax: public CompletableFuture<List<RuleDescription>> getRulesAsync(String topicName, String subscriptionName, int count, int skip)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getRulesAsync(String,String,int,int)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getSubscriptionAsync(String topicPath, String subscriptionName)
  name: getSubscriptionAsync(String topicPath, String subscriptionName)
  nameWithType: ManagementClientAsync.getSubscriptionAsync(String topicPath, String subscriptionName)
  parameters:
  - description: <p>- The path of the topic relative to service bus namespace. </p>
    name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The name of the subscription </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- Thrown if path is null, empty, or not in right format or length. </p>
  returns:
    description: <p>- SubscriptionDescription containing information about the subscription. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.SubscriptionDescription?alt=com.microsoft.azure.servicebus.management.SubscriptionDescription&text=SubscriptionDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Retrieves a subscription for a given topic from the service namespace </p>
  syntax: public CompletableFuture<SubscriptionDescription> getSubscriptionAsync(String topicPath, String subscriptionName)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getSubscriptionAsync(String,String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getSubscriptionRuntimeInfoAsync(String topicPath, String subscriptionName)
  name: getSubscriptionRuntimeInfoAsync(String topicPath, String subscriptionName)
  nameWithType: ManagementClientAsync.getSubscriptionRuntimeInfoAsync(String topicPath, String subscriptionName)
  parameters:
  - description: <p>- The path of the topic relative to service bus namespace. </p>
    name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The name of the subscription </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- Thrown if path is null, empty, or not in right format or length. </p>
  returns:
    description: <p>- SubscriptionRuntimeInfo containing the runtime information about the subscription. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.SubscriptionRuntimeInfo?alt=com.microsoft.azure.servicebus.management.SubscriptionRuntimeInfo&text=SubscriptionRuntimeInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Retrieves the runtime information of a subscription in a given topic </p>
  syntax: public CompletableFuture<SubscriptionRuntimeInfo> getSubscriptionRuntimeInfoAsync(String topicPath, String subscriptionName)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getSubscriptionRuntimeInfoAsync(String,String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getSubscriptionsAsync(String topicName)
  name: getSubscriptionsAsync(String topicName)
  nameWithType: ManagementClientAsync.getSubscriptionsAsync(String topicName)
  parameters:
  - description: <p>- The name of the topic. </p>
    name: topicName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the first 100 subscriptions. </p>
    type: CompletableFuture&lt;List&lt;<xref href="com.microsoft.azure.servicebus.management.SubscriptionDescription?alt=com.microsoft.azure.servicebus.management.SubscriptionDescription&text=SubscriptionDescription" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: <p>Retrieves the list of subscriptions for a given topic in the namespace. </p>
  syntax: public CompletableFuture<List<SubscriptionDescription>> getSubscriptionsAsync(String topicName)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getSubscriptionsAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getSubscriptionsAsync(String topicName, int count, int skip)
  name: getSubscriptionsAsync(String topicName, int count, int skip)
  nameWithType: ManagementClientAsync.getSubscriptionsAsync(String topicName, int count, int skip)
  parameters:
  - description: <p>- The name of the topic. </p>
    name: topicName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- The number of subscriptions to fetch. Defaults to 100. Maximum value allowed is 100. </p>
    name: count
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>- The number of subscriptions to skip. Defaults to 0. Cannot be negative. </p>
    name: skip
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the list of subscriptions. </p>
    type: CompletableFuture&lt;List&lt;<xref href="com.microsoft.azure.servicebus.management.SubscriptionDescription?alt=com.microsoft.azure.servicebus.management.SubscriptionDescription&text=SubscriptionDescription" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: <p>Retrieves the list of subscriptions for a given topic in the namespace. You can simulate pages of list of entities by manipulating count and skip parameters. skip(0)+count(100) gives first 100 entities. skip(100)+count(100) gives the next 100 entities. </p>
  syntax: public CompletableFuture<List<SubscriptionDescription>> getSubscriptionsAsync(String topicName, int count, int skip)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getSubscriptionsAsync(String,int,int)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getTopicAsync(String path)
  name: getTopicAsync(String path)
  nameWithType: ManagementClientAsync.getTopicAsync(String path)
  parameters:
  - description: <p>- The path of the queue relative to service bus namespace. </p>
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- Thrown if path is null, empty, or not in right format or length. </p>
  returns:
    description: <p>- Description containing information about the topic. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.TopicDescription?alt=com.microsoft.azure.servicebus.management.TopicDescription&text=TopicDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Retrieves a topic from the service namespace </p>
  syntax: public CompletableFuture<TopicDescription> getTopicAsync(String path)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getTopicAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getTopicRuntimeInfoAsync(String path)
  name: getTopicRuntimeInfoAsync(String path)
  nameWithType: ManagementClientAsync.getTopicRuntimeInfoAsync(String path)
  parameters:
  - description: <p>- The path of the queue relative to service bus namespace. </p>
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- Thrown if path is null, empty, or not in right format or length. </p>
  returns:
    description: <p>- TopicRuntimeInfo containing runtime information about the topic. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.TopicRuntimeInfo?alt=com.microsoft.azure.servicebus.management.TopicRuntimeInfo&text=TopicRuntimeInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Retrieves the runtime information of a topic </p>
  syntax: public CompletableFuture<TopicRuntimeInfo> getTopicRuntimeInfoAsync(String path)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getTopicRuntimeInfoAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getTopicsAsync()
  name: getTopicsAsync()
  nameWithType: ManagementClientAsync.getTopicsAsync()
  returns:
    description: <p>the first 100 topics. </p>
    type: CompletableFuture&lt;List&lt;<xref href="com.microsoft.azure.servicebus.management.TopicDescription?alt=com.microsoft.azure.servicebus.management.TopicDescription&text=TopicDescription" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: <p>Retrieves the list of topics present in the namespace. </p>
  syntax: public CompletableFuture<List<TopicDescription>> getTopicsAsync()
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getTopicsAsync()
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.getTopicsAsync(int count, int skip)
  name: getTopicsAsync(int count, int skip)
  nameWithType: ManagementClientAsync.getTopicsAsync(int count, int skip)
  parameters:
  - description: <p>- The number of topics to fetch. Defaults to 100. Maximum value allowed is 100. </p>
    name: count
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>- The number of topics to skip. Defaults to 0. Cannot be negative. </p>
    name: skip
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the list of topics. </p>
    type: CompletableFuture&lt;List&lt;<xref href="com.microsoft.azure.servicebus.management.TopicDescription?alt=com.microsoft.azure.servicebus.management.TopicDescription&text=TopicDescription" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: <p>Retrieves the list of topics present in the namespace. You can simulate pages of list of entities by manipulating count and skip parameters. skip(0)+count(100) gives first 100 entities. skip(100)+count(100) gives the next 100 entities. </p>
  syntax: public CompletableFuture<List<TopicDescription>> getTopicsAsync(int count, int skip)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.getTopicsAsync(int,int)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.queueExistsAsync(String path)
  name: queueExistsAsync(String path)
  nameWithType: ManagementClientAsync.queueExistsAsync(String path)
  parameters:
  - description: <p>- Path of the entity to check </p>
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- path is not null / empty / too long / invalid. </p>
  returns:
    description: <p>- True if the entity exists. False otherwise. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Checks whether a given queue exists or not. </p>
  syntax: public CompletableFuture<Boolean> queueExistsAsync(String path)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.queueExistsAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.ruleExistsAsync(String topicPath, String subscriptionName, String ruleName)
  name: ruleExistsAsync(String topicPath, String subscriptionName, String ruleName)
  nameWithType: ManagementClientAsync.ruleExistsAsync(String topicPath, String subscriptionName, String ruleName)
  parameters:
  - description: <p>- Path of the topic </p>
    name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- Name of the subscription. </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- Name of the rule </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- path is not null / empty / too long / invalid. </p>
  returns:
    description: <p>- True if the entity exists. False otherwise. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Checks whether a given rule exists or not for a given subscription. </p>
  syntax: public CompletableFuture<Boolean> ruleExistsAsync(String topicPath, String subscriptionName, String ruleName)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.ruleExistsAsync(String,String,String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.subscriptionExistsAsync(String topicPath, String subscriptionName)
  name: subscriptionExistsAsync(String topicPath, String subscriptionName)
  nameWithType: ManagementClientAsync.subscriptionExistsAsync(String topicPath, String subscriptionName)
  parameters:
  - description: <p>- Path of the topic </p>
    name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- Name of the subscription. </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- path is not null / empty / too long / invalid. </p>
  returns:
    description: <p>- True if the entity exists. False otherwise. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Checks whether a given subscription exists or not. </p>
  syntax: public CompletableFuture<Boolean> subscriptionExistsAsync(String topicPath, String subscriptionName)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.subscriptionExistsAsync(String,String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.topicExistsAsync(String path)
  name: topicExistsAsync(String path)
  nameWithType: ManagementClientAsync.topicExistsAsync(String path)
  parameters:
  - description: <p>- Path of the entity to check </p>
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- path is not null / empty / too long / invalid. </p>
  returns:
    description: <p>- True if the entity exists. False otherwise. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Checks whether a given topic exists or not. </p>
  syntax: public CompletableFuture<Boolean> topicExistsAsync(String path)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.topicExistsAsync(String)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.updateQueueAsync(QueueDescription queueDescription)
  name: updateQueueAsync(QueueDescription queueDescription)
  nameWithType: ManagementClientAsync.updateQueueAsync(QueueDescription queueDescription)
  parameters:
  - description: <p>- A <xref uid="com.microsoft.azure.servicebus.management.QueueDescription" data-throw-if-not-resolved="false" data-raw-source="QueueDescription"></xref> object describing the attributes with which the queue will be updated. </p>
    name: queueDescription
    type: <xref href="com.microsoft.azure.servicebus.management.QueueDescription?alt=com.microsoft.azure.servicebus.management.QueueDescription&text=QueueDescription" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- descriptor is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.management.QueueDescription" data-throw-if-not-resolved="false" data-raw-source="QueueDescription"></xref> of the updated queue. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.QueueDescription?alt=com.microsoft.azure.servicebus.management.QueueDescription&text=QueueDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Updates an existing queue. </p>
  syntax: public CompletableFuture<QueueDescription> updateQueueAsync(QueueDescription queueDescription)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.updateQueueAsync(QueueDescription)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.updateRuleAsync(String topicName, String subscriptionName, RuleDescription ruleDescription)
  name: updateRuleAsync(String topicName, String subscriptionName, RuleDescription ruleDescription)
  nameWithType: ManagementClientAsync.updateRuleAsync(String topicName, String subscriptionName, RuleDescription ruleDescription)
  parameters:
  - description: <p>- Name of the topic. </p>
    name: topicName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- Name of the subscription. </p>
    name: subscriptionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>- A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="RuleDescription"></xref> object describing the attributes with which the rule will be updated. </p>
    name: ruleDescription
    type: <xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- descriptor is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="RuleDescription"></xref> of the updated rule. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Updates an existing rule. </p>
  syntax: public CompletableFuture<RuleDescription> updateRuleAsync(String topicName, String subscriptionName, RuleDescription ruleDescription)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.updateRuleAsync(String,String,RuleDescription)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.updateSubscriptionAsync(SubscriptionDescription subscriptionDescription)
  name: updateSubscriptionAsync(SubscriptionDescription subscriptionDescription)
  nameWithType: ManagementClientAsync.updateSubscriptionAsync(SubscriptionDescription subscriptionDescription)
  parameters:
  - description: <p>- A <xref uid="com.microsoft.azure.servicebus.management.SubscriptionDescription" data-throw-if-not-resolved="false" data-raw-source="SubscriptionDescription"></xref> object describing the attributes with which the subscription will be updated. </p>
    name: subscriptionDescription
    type: <xref href="com.microsoft.azure.servicebus.management.SubscriptionDescription?alt=com.microsoft.azure.servicebus.management.SubscriptionDescription&text=SubscriptionDescription" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- descriptor is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.management.SubscriptionDescription" data-throw-if-not-resolved="false" data-raw-source="SubscriptionDescription"></xref> of the updated subscription. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.SubscriptionDescription?alt=com.microsoft.azure.servicebus.management.SubscriptionDescription&text=SubscriptionDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Updates an existing subscription. </p>
  syntax: public CompletableFuture<SubscriptionDescription> updateSubscriptionAsync(SubscriptionDescription subscriptionDescription)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.updateSubscriptionAsync(SubscriptionDescription)
- fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync.updateTopicAsync(TopicDescription topicDescription)
  name: updateTopicAsync(TopicDescription topicDescription)
  nameWithType: ManagementClientAsync.updateTopicAsync(TopicDescription topicDescription)
  parameters:
  - description: <p>- A <xref uid="com.microsoft.azure.servicebus.management.TopicDescription" data-throw-if-not-resolved="false" data-raw-source="TopicDescription"></xref> object describing the attributes with which the topic will be updated. </p>
    name: topicDescription
    type: <xref href="com.microsoft.azure.servicebus.management.TopicDescription?alt=com.microsoft.azure.servicebus.management.TopicDescription&text=TopicDescription" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>- descriptor is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.management.TopicDescription" data-throw-if-not-resolved="false" data-raw-source="TopicDescription"></xref> of the updated topic. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.management.TopicDescription?alt=com.microsoft.azure.servicebus.management.TopicDescription&text=TopicDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Updates an existing topic. </p>
  syntax: public CompletableFuture<TopicDescription> updateTopicAsync(TopicDescription topicDescription)
  uid: com.microsoft.azure.servicebus.management.ManagementClientAsync.updateTopicAsync(TopicDescription)
nameWithType: ManagementClientAsync
syntax: public class ManagementClientAsync
type: class
uid: com.microsoft.azure.servicebus.management.ManagementClientAsync
fullName: com.microsoft.azure.servicebus.management.ManagementClientAsync
name: ManagementClientAsync
package: com.microsoft.azure.servicebus.management
summary: <p>Asynchronous client to perform management operations on Service Bus entities. Operations return CompletableFuture which asynchronously return the responses. </p>
metadata: {}
