### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.add(ApplicationCreateObject applicationCreateObject)
  name: add(ApplicationCreateObject applicationCreateObject)
  nameWithType: Apps.add(ApplicationCreateObject applicationCreateObject)
  parameters:
  - description: '<p>An application containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is "0.1". Note: the culture cannot be changed after the app is created. </p>'
    name: applicationCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationCreateObject&text=ApplicationCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new LUIS app.</p>

    <p></p>
  syntax: public UUID add(ApplicationCreateObject applicationCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.add(ApplicationCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.addAsync(ApplicationCreateObject applicationCreateObject)
  name: addAsync(ApplicationCreateObject applicationCreateObject)
  nameWithType: Apps.addAsync(ApplicationCreateObject applicationCreateObject)
  parameters:
  - description: '<p>An application containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is "0.1". Note: the culture cannot be changed after the app is created. </p>'
    name: applicationCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationCreateObject&text=ApplicationCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new LUIS app.</p>

    <p></p>
  syntax: public Observable<UUID> addAsync(ApplicationCreateObject applicationCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.addAsync(ApplicationCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.addCustomPrebuiltDomain(PrebuiltDomainCreateObject prebuiltDomainCreateObject)
  name: addCustomPrebuiltDomain(PrebuiltDomainCreateObject prebuiltDomainCreateObject)
  nameWithType: Apps.addCustomPrebuiltDomain(PrebuiltDomainCreateObject prebuiltDomainCreateObject)
  parameters:
  - description: <p>A prebuilt domain create object containing the name and culture of the domain. </p>
    name: prebuiltDomainCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainCreateObject&text=PrebuiltDomainCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a prebuilt domain along with its intent and entity models as a new application.</p>

    <p></p>
  syntax: public UUID addCustomPrebuiltDomain(PrebuiltDomainCreateObject prebuiltDomainCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.addCustomPrebuiltDomain(PrebuiltDomainCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.addCustomPrebuiltDomainAsync(PrebuiltDomainCreateObject prebuiltDomainCreateObject)
  name: addCustomPrebuiltDomainAsync(PrebuiltDomainCreateObject prebuiltDomainCreateObject)
  nameWithType: Apps.addCustomPrebuiltDomainAsync(PrebuiltDomainCreateObject prebuiltDomainCreateObject)
  parameters:
  - description: <p>A prebuilt domain create object containing the name and culture of the domain. </p>
    name: prebuiltDomainCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainCreateObject&text=PrebuiltDomainCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a prebuilt domain along with its intent and entity models as a new application.</p>

    <p></p>
  syntax: public Observable<UUID> addCustomPrebuiltDomainAsync(PrebuiltDomainCreateObject prebuiltDomainCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.addCustomPrebuiltDomainAsync(PrebuiltDomainCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.delete()
  name: delete()
  nameWithType: Apps.delete()
  returns:
    description: <p>the first stage of the delete call </p>
    type: <xref href="AppsDeleteDefinitionStages.WithAppId?alt=AppsDeleteDefinitionStages.WithAppId&text=AppsDeleteDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an application.</p>

    <p></p>
  syntax: public AppsDeleteDefinitionStages.WithAppId delete()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.delete()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.delete(UUID appId, DeleteAppsOptionalParameter deleteOptionalParameter)
  name: delete(UUID appId, DeleteAppsOptionalParameter deleteOptionalParameter)
  nameWithType: Apps.delete(UUID appId, DeleteAppsOptionalParameter deleteOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: deleteOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.DeleteAppsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.DeleteAppsOptionalParameter&text=DeleteAppsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an application.</p>

    <p></p>
  syntax: public OperationStatus delete(UUID appId, DeleteAppsOptionalParameter deleteOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.delete(UUID,DeleteAppsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.deleteAsync(UUID appId, DeleteAppsOptionalParameter deleteOptionalParameter)
  name: deleteAsync(UUID appId, DeleteAppsOptionalParameter deleteOptionalParameter)
  nameWithType: Apps.deleteAsync(UUID appId, DeleteAppsOptionalParameter deleteOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: deleteOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.DeleteAppsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.DeleteAppsOptionalParameter&text=DeleteAppsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes an application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteAsync(UUID appId, DeleteAppsOptionalParameter deleteOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.deleteAsync(UUID,DeleteAppsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.downloadQueryLogs(UUID appId)
  name: downloadQueryLogs(UUID appId)
  nameWithType: Apps.downloadQueryLogs(UUID appId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the InputStream object if successful. </p>
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the logs of the past month's endpoint queries for the application.</p>

    <p></p>
  syntax: public InputStream downloadQueryLogs(UUID appId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.downloadQueryLogs(UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.downloadQueryLogsAsync(UUID appId)
  name: downloadQueryLogsAsync(UUID appId)
  nameWithType: Apps.downloadQueryLogsAsync(UUID appId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the logs of the past month's endpoint queries for the application.</p>

    <p></p>
  syntax: public Observable<InputStream> downloadQueryLogsAsync(UUID appId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.downloadQueryLogsAsync(UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.get(UUID appId)
  name: get(UUID appId)
  nameWithType: Apps.get(UUID appId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationInfoResponse object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationInfoResponse?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationInfoResponse&text=ApplicationInfoResponse" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the application info.</p>

    <p></p>
  syntax: public ApplicationInfoResponse get(UUID appId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.get(UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.getAsync(UUID appId)
  name: getAsync(UUID appId)
  nameWithType: Apps.getAsync(UUID appId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationInfoResponse object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationInfoResponse?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationInfoResponse&text=ApplicationInfoResponse" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the application info.</p>

    <p></p>
  syntax: public Observable<ApplicationInfoResponse> getAsync(UUID appId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.getAsync(UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.getPublishSettings(UUID appId)
  name: getPublishSettings(UUID appId)
  nameWithType: Apps.getPublishSettings(UUID appId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PublishSettings object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PublishSettings?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PublishSettings&text=PublishSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the application publish settings including 'UseAllTrainingData'.</p>

    <p></p>
  syntax: public PublishSettings getPublishSettings(UUID appId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.getPublishSettings(UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.getPublishSettingsAsync(UUID appId)
  name: getPublishSettingsAsync(UUID appId)
  nameWithType: Apps.getPublishSettingsAsync(UUID appId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PublishSettings object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PublishSettings?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PublishSettings&text=PublishSettings" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the application publish settings including 'UseAllTrainingData'.</p>

    <p></p>
  syntax: public Observable<PublishSettings> getPublishSettingsAsync(UUID appId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.getPublishSettingsAsync(UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.getSettings(UUID appId)
  name: getSettings(UUID appId)
  nameWithType: Apps.getSettings(UUID appId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationSettings object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationSettings?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationSettings&text=ApplicationSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the application settings including 'UseAllTrainingData'.</p>

    <p></p>
  syntax: public ApplicationSettings getSettings(UUID appId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.getSettings(UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.getSettingsAsync(UUID appId)
  name: getSettingsAsync(UUID appId)
  nameWithType: Apps.getSettingsAsync(UUID appId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationSettings object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationSettings?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationSettings&text=ApplicationSettings" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the application settings including 'UseAllTrainingData'.</p>

    <p></p>
  syntax: public Observable<ApplicationSettings> getSettingsAsync(UUID appId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.getSettingsAsync(UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importLuFormat()
  name: importLuFormat()
  nameWithType: Apps.importLuFormat()
  returns:
    description: <p>the first stage of the importLuFormat call </p>
    type: <xref href="AppsImportLuFormatDefinitionStages.WithLuisAppLu?alt=AppsImportLuFormatDefinitionStages.WithLuisAppLu&text=AppsImportLuFormatDefinitionStages.WithLuisAppLu" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports an application to LUIS, the application's structure is included in the request body.</p>

    <p></p>
  syntax: public AppsImportLuFormatDefinitionStages.WithLuisAppLu importLuFormat()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importLuFormat()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importLuFormat(String luisAppLu, ImportLuFormatAppsOptionalParameter importLuFormatOptionalParameter)
  name: importLuFormat(String luisAppLu, ImportLuFormatAppsOptionalParameter importLuFormatOptionalParameter)
  nameWithType: Apps.importLuFormat(String luisAppLu, ImportLuFormatAppsOptionalParameter importLuFormatOptionalParameter)
  parameters:
  - description: <p>A LUIS application structure. </p>
    name: luisAppLu
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importLuFormatOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportLuFormatAppsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportLuFormatAppsOptionalParameter&text=ImportLuFormatAppsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports an application to LUIS, the application's structure is included in the request body.</p>

    <p></p>
  syntax: public UUID importLuFormat(String luisAppLu, ImportLuFormatAppsOptionalParameter importLuFormatOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importLuFormat(String,ImportLuFormatAppsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importLuFormatAsync(String luisAppLu, ImportLuFormatAppsOptionalParameter importLuFormatOptionalParameter)
  name: importLuFormatAsync(String luisAppLu, ImportLuFormatAppsOptionalParameter importLuFormatOptionalParameter)
  nameWithType: Apps.importLuFormatAsync(String luisAppLu, ImportLuFormatAppsOptionalParameter importLuFormatOptionalParameter)
  parameters:
  - description: <p>A LUIS application structure. </p>
    name: luisAppLu
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importLuFormatOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportLuFormatAppsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportLuFormatAppsOptionalParameter&text=ImportLuFormatAppsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports an application to LUIS, the application's structure is included in the request body.</p>

    <p></p>
  syntax: public Observable<UUID> importLuFormatAsync(String luisAppLu, ImportLuFormatAppsOptionalParameter importLuFormatOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importLuFormatAsync(String,ImportLuFormatAppsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importMethod()
  name: importMethod()
  nameWithType: Apps.importMethod()
  returns:
    description: <p>the first stage of the importMethod call </p>
    type: <xref href="AppsImportMethodDefinitionStages.WithLuisApp?alt=AppsImportMethodDefinitionStages.WithLuisApp&text=AppsImportMethodDefinitionStages.WithLuisApp" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports an application to LUIS, the application's structure is included in the request body.</p>

    <p></p>
  syntax: public AppsImportMethodDefinitionStages.WithLuisApp importMethod()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importMethod()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importMethod(LuisApp luisApp, ImportMethodAppsOptionalParameter importMethodOptionalParameter)
  name: importMethod(LuisApp luisApp, ImportMethodAppsOptionalParameter importMethodOptionalParameter)
  nameWithType: Apps.importMethod(LuisApp luisApp, ImportMethodAppsOptionalParameter importMethodOptionalParameter)
  parameters:
  - description: <p>A LUIS application structure. </p>
    name: luisApp
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp&text=LuisApp" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportMethodAppsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportMethodAppsOptionalParameter&text=ImportMethodAppsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports an application to LUIS, the application's structure is included in the request body.</p>

    <p></p>
  syntax: public UUID importMethod(LuisApp luisApp, ImportMethodAppsOptionalParameter importMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importMethod(LuisApp,ImportMethodAppsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importMethodAsync(LuisApp luisApp, ImportMethodAppsOptionalParameter importMethodOptionalParameter)
  name: importMethodAsync(LuisApp luisApp, ImportMethodAppsOptionalParameter importMethodOptionalParameter)
  nameWithType: Apps.importMethodAsync(LuisApp luisApp, ImportMethodAppsOptionalParameter importMethodOptionalParameter)
  parameters:
  - description: <p>A LUIS application structure. </p>
    name: luisApp
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp&text=LuisApp" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportMethodAppsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportMethodAppsOptionalParameter&text=ImportMethodAppsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports an application to LUIS, the application's structure is included in the request body.</p>

    <p></p>
  syntax: public Observable<UUID> importMethodAsync(LuisApp luisApp, ImportMethodAppsOptionalParameter importMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importMethodAsync(LuisApp,ImportMethodAppsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importV2App()
  name: importV2App()
  nameWithType: Apps.importV2App()
  returns:
    description: <p>the first stage of the importV2App call </p>
    type: <xref href="AppsImportV2AppDefinitionStages.WithLuisAppV2?alt=AppsImportV2AppDefinitionStages.WithLuisAppV2&text=AppsImportV2AppDefinitionStages.WithLuisAppV2" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports an application to LUIS, the application's structure is included in the request body.</p>

    <p></p>
  syntax: public AppsImportV2AppDefinitionStages.WithLuisAppV2 importV2App()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importV2App()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importV2App(LuisAppV2 luisAppV2, ImportV2AppAppsOptionalParameter importV2AppOptionalParameter)
  name: importV2App(LuisAppV2 luisAppV2, ImportV2AppAppsOptionalParameter importV2AppOptionalParameter)
  nameWithType: Apps.importV2App(LuisAppV2 luisAppV2, ImportV2AppAppsOptionalParameter importV2AppOptionalParameter)
  parameters:
  - description: <p>A LUIS application structure. </p>
    name: luisAppV2
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisAppV2?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisAppV2&text=LuisAppV2" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importV2AppOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportV2AppAppsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportV2AppAppsOptionalParameter&text=ImportV2AppAppsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports an application to LUIS, the application's structure is included in the request body.</p>

    <p></p>
  syntax: public UUID importV2App(LuisAppV2 luisAppV2, ImportV2AppAppsOptionalParameter importV2AppOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importV2App(LuisAppV2,ImportV2AppAppsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importV2AppAsync(LuisAppV2 luisAppV2, ImportV2AppAppsOptionalParameter importV2AppOptionalParameter)
  name: importV2AppAsync(LuisAppV2 luisAppV2, ImportV2AppAppsOptionalParameter importV2AppOptionalParameter)
  nameWithType: Apps.importV2AppAsync(LuisAppV2 luisAppV2, ImportV2AppAppsOptionalParameter importV2AppOptionalParameter)
  parameters:
  - description: <p>A LUIS application structure. </p>
    name: luisAppV2
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisAppV2?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisAppV2&text=LuisAppV2" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importV2AppOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportV2AppAppsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportV2AppAppsOptionalParameter&text=ImportV2AppAppsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports an application to LUIS, the application's structure is included in the request body.</p>

    <p></p>
  syntax: public Observable<UUID> importV2AppAsync(LuisAppV2 luisAppV2, ImportV2AppAppsOptionalParameter importV2AppOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.importV2AppAsync(LuisAppV2,ImportV2AppAppsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.list()
  name: list()
  nameWithType: Apps.list()
  returns:
    description: <p>the first stage of the list call </p>
    type: <xref href="AppsListDefinitionStages.WithExecute?alt=AppsListDefinitionStages.WithExecute&text=AppsListDefinitionStages.WithExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Lists all of the user's applications.</p>

    <p></p>
  syntax: public AppsListDefinitionStages.WithExecute list()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.list()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.list(ListAppsOptionalParameter listOptionalParameter)
  name: list(ListAppsOptionalParameter listOptionalParameter)
  nameWithType: Apps.list(ListAppsOptionalParameter listOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListAppsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListAppsOptionalParameter&text=ListAppsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;ApplicationInfoResponse&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationInfoResponse?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationInfoResponse&text=ApplicationInfoResponse" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the user's applications.</p>

    <p></p>
  syntax: public List<ApplicationInfoResponse> list(ListAppsOptionalParameter listOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.list(ListAppsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listAsync(ListAppsOptionalParameter listOptionalParameter)
  name: listAsync(ListAppsOptionalParameter listOptionalParameter)
  nameWithType: Apps.listAsync(ListAppsOptionalParameter listOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListAppsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListAppsOptionalParameter&text=ListAppsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;ApplicationInfoResponse&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationInfoResponse?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationInfoResponse&text=ApplicationInfoResponse" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the user's applications.</p>

    <p></p>
  syntax: public Observable<List<ApplicationInfoResponse>> listAsync(ListAppsOptionalParameter listOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listAsync(ListAppsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listAvailableCustomPrebuiltDomains()
  name: listAvailableCustomPrebuiltDomains()
  nameWithType: Apps.listAvailableCustomPrebuiltDomains()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;PrebuiltDomain&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomain?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomain&text=PrebuiltDomain" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the available custom prebuilt domains for all cultures.</p>

    <p></p>
  syntax: public List<PrebuiltDomain> listAvailableCustomPrebuiltDomains()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listAvailableCustomPrebuiltDomains()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listAvailableCustomPrebuiltDomainsAsync()
  name: listAvailableCustomPrebuiltDomainsAsync()
  nameWithType: Apps.listAvailableCustomPrebuiltDomainsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;PrebuiltDomain&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomain?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomain&text=PrebuiltDomain" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all the available custom prebuilt domains for all cultures.</p>

    <p></p>
  syntax: public Observable<List<PrebuiltDomain>> listAvailableCustomPrebuiltDomainsAsync()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listAvailableCustomPrebuiltDomainsAsync()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listAvailableCustomPrebuiltDomainsForCulture(String culture)
  name: listAvailableCustomPrebuiltDomainsForCulture(String culture)
  nameWithType: Apps.listAvailableCustomPrebuiltDomainsForCulture(String culture)
  parameters:
  - description: <p>Culture. </p>
    name: culture
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;PrebuiltDomain&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomain?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomain&text=PrebuiltDomain" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the available prebuilt domains for a specific culture.</p>

    <p></p>
  syntax: public List<PrebuiltDomain> listAvailableCustomPrebuiltDomainsForCulture(String culture)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listAvailableCustomPrebuiltDomainsForCulture(String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listAvailableCustomPrebuiltDomainsForCultureAsync(String culture)
  name: listAvailableCustomPrebuiltDomainsForCultureAsync(String culture)
  nameWithType: Apps.listAvailableCustomPrebuiltDomainsForCultureAsync(String culture)
  parameters:
  - description: <p>Culture. </p>
    name: culture
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;PrebuiltDomain&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomain?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomain&text=PrebuiltDomain" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all the available prebuilt domains for a specific culture.</p>

    <p></p>
  syntax: public Observable<List<PrebuiltDomain>> listAvailableCustomPrebuiltDomainsForCultureAsync(String culture)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listAvailableCustomPrebuiltDomainsForCultureAsync(String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listCortanaEndpoints()
  name: listCortanaEndpoints()
  nameWithType: Apps.listCortanaEndpoints()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PersonalAssistantsResponse object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PersonalAssistantsResponse?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PersonalAssistantsResponse&text=PersonalAssistantsResponse" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the endpoint URLs for the prebuilt Cortana applications.</p>

    <p></p>
  syntax: public PersonalAssistantsResponse listCortanaEndpoints()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listCortanaEndpoints()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listCortanaEndpointsAsync()
  name: listCortanaEndpointsAsync()
  nameWithType: Apps.listCortanaEndpointsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PersonalAssistantsResponse object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PersonalAssistantsResponse?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PersonalAssistantsResponse&text=PersonalAssistantsResponse" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the endpoint URLs for the prebuilt Cortana applications.</p>

    <p></p>
  syntax: public Observable<PersonalAssistantsResponse> listCortanaEndpointsAsync()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listCortanaEndpointsAsync()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listDomains()
  name: listDomains()
  nameWithType: Apps.listDomains()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;String&gt; object if successful. </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the available application domains.</p>

    <p></p>
  syntax: public List<String> listDomains()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listDomains()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listDomainsAsync()
  name: listDomainsAsync()
  nameWithType: Apps.listDomainsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;String&gt; object </p>
    type: <xref href="Observable%3CList%3CString%3E%3E?alt=Observable%3CList%3CString%3E%3E&text=Observable%3CList%3CString%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the available application domains.</p>

    <p></p>
  syntax: public Observable<List<String>> listDomainsAsync()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listDomainsAsync()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listEndpoints(UUID appId)
  name: listEndpoints(UUID appId)
  nameWithType: Apps.listEndpoints(UUID appId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Map&lt;String, String&gt; object if successful. </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the available endpoint deployment regions and URLs.</p>

    <p></p>
  syntax: public Map<String, String> listEndpoints(UUID appId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listEndpoints(UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listEndpointsAsync(UUID appId)
  name: listEndpointsAsync(UUID appId)
  nameWithType: Apps.listEndpointsAsync(UUID appId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Map&lt;String, String&gt; object </p>
    type: <xref href="Observable%3CMap%3CString%2C+String%3E%3E?alt=Observable%3CMap%3CString%2C+String%3E%3E&text=Observable%3CMap%3CString%2C+String%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the available endpoint deployment regions and URLs.</p>

    <p></p>
  syntax: public Observable<Map<String, String>> listEndpointsAsync(UUID appId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listEndpointsAsync(UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listSupportedCultures()
  name: listSupportedCultures()
  nameWithType: Apps.listSupportedCultures()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;AvailableCulture&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailableCulture?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailableCulture&text=AvailableCulture" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets a list of supported cultures. Cultures are equivalent to the written language and locale. For example,"en-us" represents the U.S. variation of English.</p>

    <p></p>
  syntax: public List<AvailableCulture> listSupportedCultures()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listSupportedCultures()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listSupportedCulturesAsync()
  name: listSupportedCulturesAsync()
  nameWithType: Apps.listSupportedCulturesAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;AvailableCulture&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailableCulture?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailableCulture&text=AvailableCulture" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets a list of supported cultures. Cultures are equivalent to the written language and locale. For example,"en-us" represents the U.S. variation of English.</p>

    <p></p>
  syntax: public Observable<List<AvailableCulture>> listSupportedCulturesAsync()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listSupportedCulturesAsync()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listUsageScenarios()
  name: listUsageScenarios()
  nameWithType: Apps.listUsageScenarios()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;String&gt; object if successful. </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the application available usage scenarios.</p>

    <p></p>
  syntax: public List<String> listUsageScenarios()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listUsageScenarios()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listUsageScenariosAsync()
  name: listUsageScenariosAsync()
  nameWithType: Apps.listUsageScenariosAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;String&gt; object </p>
    type: <xref href="Observable%3CList%3CString%3E%3E?alt=Observable%3CList%3CString%3E%3E&text=Observable%3CList%3CString%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the application available usage scenarios.</p>

    <p></p>
  syntax: public Observable<List<String>> listUsageScenariosAsync()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.listUsageScenariosAsync()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.packagePublishedApplicationAsGzip(UUID appId, String slotName)
  name: packagePublishedApplicationAsGzip(UUID appId, String slotName)
  nameWithType: Apps.packagePublishedApplicationAsGzip(UUID appId, String slotName)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The publishing slot name. </p>
    name: slotName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the InputStream object if successful. </p>
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>package - Gets published LUIS application package in binary stream GZip format. Packages a published LUIS application as a GZip file to be used in the LUIS container.</p>

    <p></p>
  syntax: public InputStream packagePublishedApplicationAsGzip(UUID appId, String slotName)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.packagePublishedApplicationAsGzip(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.packagePublishedApplicationAsGzipAsync(UUID appId, String slotName)
  name: packagePublishedApplicationAsGzipAsync(UUID appId, String slotName)
  nameWithType: Apps.packagePublishedApplicationAsGzipAsync(UUID appId, String slotName)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The publishing slot name. </p>
    name: slotName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>package - Gets published LUIS application package in binary stream GZip format. Packages a published LUIS application as a GZip file to be used in the LUIS container.</p>

    <p></p>
  syntax: public Observable<InputStream> packagePublishedApplicationAsGzipAsync(UUID appId, String slotName)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.packagePublishedApplicationAsGzipAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.packageTrainedApplicationAsGzip(UUID appId, String versionId)
  name: packageTrainedApplicationAsGzip(UUID appId, String versionId)
  nameWithType: Apps.packageTrainedApplicationAsGzip(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the InputStream object if successful. </p>
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>package - Gets trained LUIS application package in binary stream GZip format. Packages trained LUIS application as GZip file to be used in the LUIS container.</p>

    <p></p>
  syntax: public InputStream packageTrainedApplicationAsGzip(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.packageTrainedApplicationAsGzip(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.packageTrainedApplicationAsGzipAsync(UUID appId, String versionId)
  name: packageTrainedApplicationAsGzipAsync(UUID appId, String versionId)
  nameWithType: Apps.packageTrainedApplicationAsGzipAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>package - Gets trained LUIS application package in binary stream GZip format. Packages trained LUIS application as GZip file to be used in the LUIS container.</p>

    <p></p>
  syntax: public Observable<InputStream> packageTrainedApplicationAsGzipAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.packageTrainedApplicationAsGzipAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.publish(UUID appId, ApplicationPublishObject applicationPublishObject)
  name: publish(UUID appId, ApplicationPublishObject applicationPublishObject)
  nameWithType: Apps.publish(UUID appId, ApplicationPublishObject applicationPublishObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The application publish object. The region is the target region that the application is published to. </p>
    name: applicationPublishObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationPublishObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationPublishObject&text=ApplicationPublishObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ProductionOrStagingEndpointInfo object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ProductionOrStagingEndpointInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ProductionOrStagingEndpointInfo&text=ProductionOrStagingEndpointInfo" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Publishes a specific version of the application.</p>

    <p></p>
  syntax: public ProductionOrStagingEndpointInfo publish(UUID appId, ApplicationPublishObject applicationPublishObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.publish(UUID,ApplicationPublishObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.publishAsync(UUID appId, ApplicationPublishObject applicationPublishObject)
  name: publishAsync(UUID appId, ApplicationPublishObject applicationPublishObject)
  nameWithType: Apps.publishAsync(UUID appId, ApplicationPublishObject applicationPublishObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The application publish object. The region is the target region that the application is published to. </p>
    name: applicationPublishObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationPublishObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationPublishObject&text=ApplicationPublishObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ProductionOrStagingEndpointInfo object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ProductionOrStagingEndpointInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ProductionOrStagingEndpointInfo&text=ProductionOrStagingEndpointInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Publishes a specific version of the application.</p>

    <p></p>
  syntax: public Observable<ProductionOrStagingEndpointInfo> publishAsync(UUID appId, ApplicationPublishObject applicationPublishObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.publishAsync(UUID,ApplicationPublishObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.update(UUID appId, ApplicationUpdateObject applicationUpdateObject)
  name: update(UUID appId, ApplicationUpdateObject applicationUpdateObject)
  nameWithType: Apps.update(UUID appId, ApplicationUpdateObject applicationUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A model containing Name and Description of the application. </p>
    name: applicationUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationUpdateObject&text=ApplicationUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the name or description of the application.</p>

    <p></p>
  syntax: public OperationStatus update(UUID appId, ApplicationUpdateObject applicationUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.update(UUID,ApplicationUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updateAsync(UUID appId, ApplicationUpdateObject applicationUpdateObject)
  name: updateAsync(UUID appId, ApplicationUpdateObject applicationUpdateObject)
  nameWithType: Apps.updateAsync(UUID appId, ApplicationUpdateObject applicationUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A model containing Name and Description of the application. </p>
    name: applicationUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ApplicationUpdateObject&text=ApplicationUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the name or description of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateAsync(UUID appId, ApplicationUpdateObject applicationUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updateAsync(UUID,ApplicationUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updatePublishSettings(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject)
  name: updatePublishSettings(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject)
  nameWithType: Apps.updatePublishSettings(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An object containing the new publish application settings. </p>
    name: publishSettingUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PublishSettingUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PublishSettingUpdateObject&text=PublishSettingUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the application publish settings including 'UseAllTrainingData'.</p>

    <p></p>
  syntax: public OperationStatus updatePublishSettings(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updatePublishSettings(UUID,PublishSettingUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updatePublishSettingsAsync(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject)
  name: updatePublishSettingsAsync(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject)
  nameWithType: Apps.updatePublishSettingsAsync(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An object containing the new publish application settings. </p>
    name: publishSettingUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PublishSettingUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PublishSettingUpdateObject&text=PublishSettingUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the application publish settings including 'UseAllTrainingData'.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updatePublishSettingsAsync(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updatePublishSettingsAsync(UUID,PublishSettingUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updateSettings()
  name: updateSettings()
  nameWithType: Apps.updateSettings()
  returns:
    description: <p>the first stage of the updateSettings call </p>
    type: <xref href="AppsUpdateSettingsDefinitionStages.WithAppId?alt=AppsUpdateSettingsDefinitionStages.WithAppId&text=AppsUpdateSettingsDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the application settings including 'UseAllTrainingData'.</p>

    <p></p>
  syntax: public AppsUpdateSettingsDefinitionStages.WithAppId updateSettings()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updateSettings()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updateSettings(UUID appId, UpdateSettingsOptionalParameter updateSettingsOptionalParameter)
  name: updateSettings(UUID appId, UpdateSettingsOptionalParameter updateSettingsOptionalParameter)
  nameWithType: Apps.updateSettings(UUID appId, UpdateSettingsOptionalParameter updateSettingsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateSettingsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateSettingsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateSettingsOptionalParameter&text=UpdateSettingsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the application settings including 'UseAllTrainingData'.</p>

    <p></p>
  syntax: public OperationStatus updateSettings(UUID appId, UpdateSettingsOptionalParameter updateSettingsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updateSettings(UUID,UpdateSettingsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updateSettingsAsync(UUID appId, UpdateSettingsOptionalParameter updateSettingsOptionalParameter)
  name: updateSettingsAsync(UUID appId, UpdateSettingsOptionalParameter updateSettingsOptionalParameter)
  nameWithType: Apps.updateSettingsAsync(UUID appId, UpdateSettingsOptionalParameter updateSettingsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateSettingsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateSettingsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateSettingsOptionalParameter&text=UpdateSettingsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the application settings including 'UseAllTrainingData'.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateSettingsAsync(UUID appId, UpdateSettingsOptionalParameter updateSettingsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps.updateSettingsAsync(UUID,UpdateSettingsOptionalParameter)
nameWithType: Apps
syntax: public interface Apps
type: interface
uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps
fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Apps
name: Apps
package: com.microsoft.azure.cognitiveservices.language.luis.authoring
summary: <p>An instance of this class provides access to all the operations defined in Apps. </p>
metadata: {}
