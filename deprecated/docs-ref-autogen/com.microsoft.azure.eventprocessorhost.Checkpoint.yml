### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.eventprocessorhost.Checkpoint.Checkpoint(Checkpoint source)
  name: Checkpoint(Checkpoint source)
  nameWithType: Checkpoint.Checkpoint(Checkpoint source)
  parameters:
  - description: <p>Existing checkpoint to clone. </p>
    name: source
    type: <xref href="com.microsoft.azure.eventprocessorhost.Checkpoint?alt=com.microsoft.azure.eventprocessorhost.Checkpoint&text=Checkpoint" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a checkpoint which is a duplicate of the given checkpoint.</p>

    <p></p>
  syntax: public Checkpoint(Checkpoint source)
  uid: com.microsoft.azure.eventprocessorhost.Checkpoint.Checkpoint(Checkpoint)
- fullName: com.microsoft.azure.eventprocessorhost.Checkpoint.Checkpoint(String partitionId)
  name: Checkpoint(String partitionId)
  nameWithType: Checkpoint.Checkpoint(String partitionId)
  parameters:
  - description: <p>Associated partition. </p>
    name: partitionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a checkpoint with offset/sequenceNumber set to the start of the stream.</p>

    <p></p>
  syntax: public Checkpoint(String partitionId)
  uid: com.microsoft.azure.eventprocessorhost.Checkpoint.Checkpoint(String)
- fullName: com.microsoft.azure.eventprocessorhost.Checkpoint.Checkpoint(String partitionId, String offset, long sequenceNumber)
  name: Checkpoint(String partitionId, String offset, long sequenceNumber)
  nameWithType: Checkpoint.Checkpoint(String partitionId, String offset, long sequenceNumber)
  parameters:
  - description: <p>Associated partition. </p>
    name: partitionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Offset in the stream. </p>
    name: offset
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Sequence number in the stream. </p>
    name: sequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a checkpoint with the given offset and sequenceNumber. It is important that the offset and sequence number refer to the same event in the stream. The safest thing to do is get both values from the system properties of one EventData instance.</p>

    <p></p>
  syntax: public Checkpoint(String partitionId, String offset, long sequenceNumber)
  uid: com.microsoft.azure.eventprocessorhost.Checkpoint.Checkpoint(String,String,long)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.eventprocessorhost.Checkpoint.getOffset()
  name: getOffset()
  nameWithType: Checkpoint.getOffset()
  returns:
    description: <p>the current offset value. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Return the offset.</p>

    <p></p>
  syntax: public String getOffset()
  uid: com.microsoft.azure.eventprocessorhost.Checkpoint.getOffset()
- fullName: com.microsoft.azure.eventprocessorhost.Checkpoint.getPartitionId()
  name: getPartitionId()
  nameWithType: Checkpoint.getPartitionId()
  returns:
    description: <p>the associated partition id. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the partition id. There is no corresponding setter because the partition id is immutable.</p>

    <p></p>
  syntax: public String getPartitionId()
  uid: com.microsoft.azure.eventprocessorhost.Checkpoint.getPartitionId()
- fullName: com.microsoft.azure.eventprocessorhost.Checkpoint.getSequenceNumber()
  name: getSequenceNumber()
  nameWithType: Checkpoint.getSequenceNumber()
  returns:
    description: <p>the current sequence number. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the sequence number.</p>

    <p></p>
  syntax: public long getSequenceNumber()
  uid: com.microsoft.azure.eventprocessorhost.Checkpoint.getSequenceNumber()
- fullName: com.microsoft.azure.eventprocessorhost.Checkpoint.setOffset(String newOffset)
  name: setOffset(String newOffset)
  nameWithType: Checkpoint.setOffset(String newOffset)
  parameters:
  - description: <p>the new value for offset in the stream. </p>
    name: newOffset
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the offset. Remember to also set the sequence number!</p>

    <p></p>
  syntax: public void setOffset(String newOffset)
  uid: com.microsoft.azure.eventprocessorhost.Checkpoint.setOffset(String)
- fullName: com.microsoft.azure.eventprocessorhost.Checkpoint.setSequenceNumber(long newSequenceNumber)
  name: setSequenceNumber(long newSequenceNumber)
  nameWithType: Checkpoint.setSequenceNumber(long newSequenceNumber)
  parameters:
  - description: <p>the new value for sequence number. </p>
    name: newSequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the sequence number. Remember to also set the offset!</p>

    <p></p>
  syntax: public void setSequenceNumber(long newSequenceNumber)
  uid: com.microsoft.azure.eventprocessorhost.Checkpoint.setSequenceNumber(long)
nameWithType: Checkpoint
syntax: public class Checkpoint
type: class
uid: com.microsoft.azure.eventprocessorhost.Checkpoint
fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
name: Checkpoint
package: com.microsoft.azure.eventprocessorhost
summary: >-
  <p>Checkpoint class is public so that advanced users can implement an ICheckpointManager. Unless you are implementing ICheckpointManager you should not have to deal with objects of this class directly. </p>

  <p>A Checkpoint is essentially just a tuple. It has a fixed partition id, set at creation time and immutable thereafter, and associates that with an offset/sequenceNumber pair which indicates a position within the events in that partition. </p>
metadata: {}
