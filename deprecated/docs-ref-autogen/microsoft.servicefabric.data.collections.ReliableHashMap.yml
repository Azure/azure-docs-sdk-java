### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.ReliableHashMap(long store, long replicaId, String name, String traceId)
  name: ReliableHashMap(long store, long replicaId, String name, String traceId)
  nameWithType: ReliableHashMap<K,V>.ReliableHashMap(long store, long replicaId, String name, String traceId)
  parameters:
  - name: store
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - name: replicaId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: traceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public ReliableHashMap(long store, long replicaId, String name, String traceId)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.ReliableHashMap(long,long,String,String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.freeTStore(long)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeAddAsync(long,long,String,byte [],int,long,long,int,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeContainsKeyAsync(long,long,String,int,long,long,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeEnumeratorAsync(long,long,long,int)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeGetAsync(long,long,String,long,long,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeGetCount(long)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeKeyEnumeratorAsync(long,long,long,int)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativePutAsync(long,long,String,byte [],int,long,long,int,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativePutIfAbsentAsync(long,long,String,byte [],int,long,long,int,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeRemoveAsync(long,long,String,long,long,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeUpdateAsync(long,long,String,byte [],int,long,long,int,int,CancellationToken)
methods:
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.clearAsync()
  name: clearAsync()
  nameWithType: ReliableHashMap<K,V>.clearAsync()
  overridden: microsoft.servicefabric.data.collections.ReliableCollection.clearAsync()
  returns:
    description: <p>A completable future that represents the asynchronous clear operation. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Removes all state from the <xref uid="microsoft.servicefabric.data.collections.ReliableCollection" data-throw-if-not-resolved="false" data-raw-source="ReliableCollection"></xref>, including replicated and persisted store. </p>
  syntax: public CompletableFuture<Void> clearAsync()
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.clearAsync()
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.close()
  name: close()
  nameWithType: ReliableHashMap<K,V>.close()
  syntax: public void close()
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.close()
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  name: computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  nameWithType: ReliableHashMap<K,V>.computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is to be associated </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the function to compute a value </p>
    name: remappingFunction
    type: <xref href="BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E?alt=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E&text=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, remappingFunction or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with the new(computed) value associated with the specified key, or null if the computed value is null. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).</p>

    <p></p>
  syntax: public CompletableFuture<V> computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.computeAsync(Transaction,K,BiFunction<? super K, ? super V, ? extends V>)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  name: computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is to be associated. </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the function to compute a value. </p>
    name: remappingFunction
    type: <xref href="BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E?alt=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E&text=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, remappingFunction or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with the new(computed) value associated with the specified key, or null if the computed value is null. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).</p>

    <p></p>
  syntax: public CompletableFuture<V> computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.computeAsync(Transaction,K,BiFunction<? super K, ? super V, ? extends V>,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.computeIfAbsentAsync(Transaction txn, K key, Function<? super K, ? extends V> mappingFunction)
  name: computeIfAbsentAsync(Transaction txn, K key, Function<? super K, ? extends V> mappingFunction)
  nameWithType: ReliableHashMap<K,V>.computeIfAbsentAsync(Transaction txn, K key, Function<? super K, ? extends V> mappingFunction)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is to be associated </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the function to compute a value </p>
    name: mappingFunction
    type: <xref href="Function%3C%3F+super+K%2C+%3F+extends+V%3E?alt=Function%3C%3F+super+K%2C+%3F+extends+V%3E&text=Function%3C%3F+super+K%2C+%3F+extends+V%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, mappingFunction or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with the new(computed) value if there was no previous mapping, or null if the computed value is null or if a mapping already exists for the specified key. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null.</p>

    <p></p>
  syntax: public CompletableFuture<V> computeIfAbsentAsync(Transaction txn, K key, Function<? super K, ? extends V> mappingFunction)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.computeIfAbsentAsync(Transaction,K,Function<? super K, ? extends V>)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.computeIfAbsentAsync(Transaction txn, K key, Function<? super K, ? extends V> mappingFunction, Duration timeout, CancellationToken cancellationToken)
  name: computeIfAbsentAsync(Transaction txn, K key, Function<? super K, ? extends V> mappingFunction, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.computeIfAbsentAsync(Transaction txn, K key, Function<? super K, ? extends V> mappingFunction, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is to be associated </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the function to compute a value </p>
    name: mappingFunction
    type: <xref href="Function%3C%3F+super+K%2C+%3F+extends+V%3E?alt=Function%3C%3F+super+K%2C+%3F+extends+V%3E&text=Function%3C%3F+super+K%2C+%3F+extends+V%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, mappingFunction or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with the new(computed) value if there was no previous mapping, or null if the computed value is null or if a mapping already exists for the specified key. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null.</p>

    <p></p>
  syntax: public CompletableFuture<V> computeIfAbsentAsync(Transaction txn, K key, Function<? super K, ? extends V> mappingFunction, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.computeIfAbsentAsync(Transaction,K,Function<? super K, ? extends V>,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.computeIfPresentAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  name: computeIfPresentAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  nameWithType: ReliableHashMap<K,V>.computeIfPresentAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which a value may be associated. </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the function to compute a value. </p>
    name: remappingFunction
    type: <xref href="BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E?alt=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E&text=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, remappingFunction or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with the new(computed) value if there was a previous mapping, or null if the computed value is null or if no mapping exists for the specified key. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value.</p>

    <p></p>
  syntax: public CompletableFuture<V> computeIfPresentAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.computeIfPresentAsync(Transaction,K,BiFunction<? super K, ? super V, ? extends V>)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.computeIfPresentAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  name: computeIfPresentAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.computeIfPresentAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which a value may be associated. </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the function to compute a value. </p>
    name: remappingFunction
    type: <xref href="BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E?alt=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E&text=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, remappingFunction or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with the new(computed) value if there was a previous mapping, or null if the computed value is null or if no mapping exists for the specified key. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value.</p>

    <p></p>
  syntax: public CompletableFuture<V> computeIfPresentAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.computeIfPresentAsync(Transaction,K,BiFunction<? super K, ? super V, ? extends V>,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.containsKeyAsync(Transaction txn, K key)
  name: containsKeyAsync(Transaction txn, K key)
  nameWithType: ReliableHashMap<K,V>.containsKeyAsync(Transaction txn, K key)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>possible key </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if the key is found in this Map, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tests if the specified object is a key in this table.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> containsKeyAsync(Transaction txn, K key)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.containsKeyAsync(Transaction,K)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.containsKeyAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  name: containsKeyAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.containsKeyAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>possible key </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if the key is found in this Map, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tests if the specified object is a key in this table.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> containsKeyAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.containsKeyAsync(Transaction,K,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.containsKeyAsync(Transaction txn, K key, LockMode lockMode)
  name: containsKeyAsync(Transaction txn, K key, LockMode lockMode)
  nameWithType: ReliableHashMap<K,V>.containsKeyAsync(Transaction txn, K key, LockMode lockMode)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>possible key </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>The lock mode to obtain while checking for presence of the key. </p>
    name: lockMode
    type: <xref href="microsoft.servicefabric.data.collections.LockMode?alt=microsoft.servicefabric.data.collections.LockMode&text=LockMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if the key is found in this Map, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tests if the specified object is a key in this table.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> containsKeyAsync(Transaction txn, K key, LockMode lockMode)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.containsKeyAsync(Transaction,K,LockMode)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.containsKeyAsync(Transaction txn, K key, LockMode lockMode, Duration timeout, CancellationToken cancellationToken)
  name: containsKeyAsync(Transaction txn, K key, LockMode lockMode, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.containsKeyAsync(Transaction txn, K key, LockMode lockMode, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>possible key </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>The lock mode to obtain while checking for presence of the key. </p>
    name: lockMode
    type: <xref href="microsoft.servicefabric.data.collections.LockMode?alt=microsoft.servicefabric.data.collections.LockMode&text=LockMode" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if the key is found in this Map, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tests if the specified object is a key in this table.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> containsKeyAsync(Transaction txn, K key, LockMode lockMode, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.containsKeyAsync(Transaction,K,LockMode,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.elementsAsync(Transaction txn)
  name: elementsAsync(Transaction txn)
  nameWithType: ReliableHashMap<K,V>.elementsAsync(Transaction txn)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with an enumeration of the values in this Map. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.data.utilities.AsyncEnumeration?alt=microsoft.servicefabric.data.utilities.AsyncEnumeration&text=AsyncEnumeration" data-throw-if-not-resolved="False"/>&lt;V&gt;&gt;
  summary: >-
    <p>Returns an enumeration of the values in this table.</p>

    <p></p>
  syntax: public CompletableFuture<AsyncEnumeration<V>> elementsAsync(Transaction txn)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.elementsAsync(Transaction)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.getAsync(Transaction txn, K key)
  name: getAsync(Transaction txn, K key)
  nameWithType: ReliableHashMap<K,V>.getAsync(Transaction txn, K key)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>the key whose associated value is to be returned </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with value to which the specified key is mapped, null if no such mapping exists. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IOException"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ClassNotFoundException"></xref> for deserialization failures, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</p>

    <p></p>
  syntax: public CompletableFuture<V> getAsync(Transaction txn, K key)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.getAsync(Transaction,K)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.getAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  name: getAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.getAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>the key whose associated value is to be returned </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with value to which the specified key is mapped, null if no such mapping exists. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IOException"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ClassNotFoundException"></xref> for deserialization failures, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</p>

    <p></p>
  syntax: public CompletableFuture<V> getAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.getAsync(Transaction,K,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.getCount()
  name: getCount()
  nameWithType: ReliableHashMap<K,V>.getCount()
  overridden: microsoft.servicefabric.data.collections.ReliableCollection.getCount()
  returns:
    description: <p>The number of elements. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of elements contained in the <xref uid="microsoft.servicefabric.data.collections.ReliableCollection" data-throw-if-not-resolved="false" data-raw-source="ReliableCollection"></xref></p>

    <p></p>
  syntax: public long getCount()
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.getCount()
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.getName()
  name: getName()
  nameWithType: ReliableHashMap<K,V>.getName()
  overridden: microsoft.servicefabric.data.ReliableState.getName()
  returns:
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the unique URI name for the Reliable HashMap </p>
  syntax: public URI getName()
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.getName()
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.keysAsync(Transaction txn)
  name: keysAsync(Transaction txn)
  nameWithType: ReliableHashMap<K,V>.keysAsync(Transaction txn)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with an enumeration of the keys in this Map. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.data.utilities.AsyncEnumeration?alt=microsoft.servicefabric.data.utilities.AsyncEnumeration&text=AsyncEnumeration" data-throw-if-not-resolved="False"/>&lt;K&gt;&gt;
  summary: >-
    <p>Returns an enumeration of the keys in this table.</p>

    <p></p>
  syntax: public CompletableFuture<AsyncEnumeration<K>> keysAsync(Transaction txn)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.keysAsync(Transaction)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.keyValuesAsync(Transaction txn)
  name: keyValuesAsync(Transaction txn)
  nameWithType: ReliableHashMap<K,V>.keyValuesAsync(Transaction txn)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with an enumeration of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="KeyValuePair"></xref> in this Map. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.data.utilities.AsyncEnumeration?alt=microsoft.servicefabric.data.utilities.AsyncEnumeration&text=AsyncEnumeration" data-throw-if-not-resolved="False"/>&lt;<xref href="microsoft.servicefabric.data.utilities.KeyValuePair?alt=microsoft.servicefabric.data.utilities.KeyValuePair&text=KeyValuePair" data-throw-if-not-resolved="False"/>&lt;K, V&gt;&gt;&gt;
  summary: >-
    <p>Returns an enumeration of the key-value pairs in this table.</p>

    <p></p>
  syntax: public CompletableFuture<AsyncEnumeration<KeyValuePair<K, V>>> keyValuesAsync(Transaction txn)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.keyValuesAsync(Transaction)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.putAsync(Transaction txn, K key, V value)
  name: putAsync(Transaction txn, K key, V value)
  nameWithType: ReliableHashMap<K,V>.putAsync(Transaction txn, K key, V value)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is to be associated </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>value to be associated with the specified key </p>
    name: value
    type: <xref href="V?alt=V&text=V" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, value or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if there was a previous mapping, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IOException"></xref> for serialization failures, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Maps the specified key to the specified value in this table. Neither the key nor the value can be null.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> putAsync(Transaction txn, K key, V value)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.putAsync(Transaction,K,V)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.putAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  name: putAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.putAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is to be associated </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>value to be associated with the specified key </p>
    name: value
    type: <xref href="V?alt=V&text=V" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, value or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if there was a previous mapping, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IOException"></xref> for serialization failures, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Maps the specified key to the specified value in this table. Neither the key nor the value can be null.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> putAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.putAsync(Transaction,K,V,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.putIfAbsentAsync(Transaction txn, K key, V value)
  name: putIfAbsentAsync(Transaction txn, K key, V value)
  nameWithType: ReliableHashMap<K,V>.putIfAbsentAsync(Transaction txn, K key, V value)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is to be associated </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>value to be associated with the specified key </p>
    name: value
    type: <xref href="V?alt=V&text=V" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, value or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if the value is applied, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IOException"></xref> for serialization failures, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>If the specified key is not already associated with a value, associate it with the given value.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> putIfAbsentAsync(Transaction txn, K key, V value)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.putIfAbsentAsync(Transaction,K,V)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.putIfAbsentAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  name: putIfAbsentAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.putIfAbsentAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is to be associated </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>value to be associated with the specified key </p>
    name: value
    type: <xref href="V?alt=V&text=V" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, value or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if the value is applied, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IOException"></xref> for serialization failures, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>If the specified key is not already associated with a value, associate it with the given value.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> putIfAbsentAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.putIfAbsentAsync(Transaction,K,V,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.removeAsync(Transaction txn, K key)
  name: removeAsync(Transaction txn, K key)
  nameWithType: ReliableHashMap<K,V>.removeAsync(Transaction txn, K key)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>the key that needs to be removed. </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if the key is found and remove succeeds, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes the key (and its corresponding value) from this map. This method does nothing if the key is not in the map.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> removeAsync(Transaction txn, K key)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.removeAsync(Transaction,K)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.removeAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  name: removeAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.removeAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>the key that needs to be removed. </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if the key is found and remove succeeds, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes the key (and its corresponding value) from this map. This method does nothing if the key is not in the map.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> removeAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.removeAsync(Transaction,K,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.replaceAsync(Transaction txn, K key, V value)
  name: replaceAsync(Transaction txn, K key, V value)
  nameWithType: ReliableHashMap<K,V>.replaceAsync(Transaction txn, K key, V value)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is associated </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>value to be associated with the specified key </p>
    name: value
    type: <xref href="V?alt=V&text=V" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, value or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if the key is found and replace succeeds, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IOException"></xref> for serialization failures, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Replaces the entry for a key only if currently mapped to some value.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> replaceAsync(Transaction txn, K key, V value)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.replaceAsync(Transaction,K,V)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.replaceAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  name: replaceAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.replaceAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is associated </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>value to be associated with the specified key </p>
    name: value
    type: <xref href="V?alt=V&text=V" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, value or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with result true if the key is found and replace succeeds, false otherwise. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IOException"></xref> for serialization failures, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Replaces the entry for a key only if currently mapped to some value.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> replaceAsync(Transaction txn, K key, V value, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.replaceAsync(Transaction,K,V,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.size()
  name: size()
  nameWithType: ReliableHashMap<K,V>.size()
  returns:
    description: <p>This method returns the number of mappings in the map. This is not a asynchronous call. It gives BEST EFFORT number of mappings. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the number of mappings.</p>

    <p></p>
  syntax: public long size()
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.size()
nameWithType: ReliableHashMap<K,V>
syntax: public class ReliableHashMap<K extends String,V> implements ReliableCollection
type: class
typeParameters:
- name: K
- name: V
uid: microsoft.servicefabric.data.collections.ReliableHashMap
fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K,V>
name: ReliableHashMap<K,V>
package: microsoft.servicefabric.data.collections
metadata: {}
