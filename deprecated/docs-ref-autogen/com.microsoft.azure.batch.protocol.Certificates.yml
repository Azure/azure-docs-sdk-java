### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.batch.protocol.Certificates.add(CertificateAddParameter certificate)
  name: add(CertificateAddParameter certificate)
  nameWithType: Certificates.add(CertificateAddParameter certificate)
  parameters:
  - description: <p>The certificate to be added. </p>
    name: certificate
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddParameter?alt=com.microsoft.azure.batch.protocol.models.CertificateAddParameter&text=CertificateAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a certificate to the specified account.</p>

    <p></p>
  syntax: public void add(CertificateAddParameter certificate)
  uid: com.microsoft.azure.batch.protocol.Certificates.add(CertificateAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Certificates.add(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  name: add(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  nameWithType: Certificates.add(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  parameters:
  - description: <p>The certificate to be added. </p>
    name: certificate
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddParameter?alt=com.microsoft.azure.batch.protocol.models.CertificateAddParameter&text=CertificateAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateAddOptions&text=CertificateAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a certificate to the specified account.</p>

    <p></p>
  syntax: public void add(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.add(CertificateAddParameter,CertificateAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.addAsync(CertificateAddParameter certificate)
  name: addAsync(CertificateAddParameter certificate)
  nameWithType: Certificates.addAsync(CertificateAddParameter certificate)
  parameters:
  - description: <p>The certificate to be added. </p>
    name: certificate
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddParameter?alt=com.microsoft.azure.batch.protocol.models.CertificateAddParameter&text=CertificateAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a certificate to the specified account.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(CertificateAddParameter certificate)
  uid: com.microsoft.azure.batch.protocol.Certificates.addAsync(CertificateAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Certificates.addAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  name: addAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  nameWithType: Certificates.addAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  parameters:
  - description: <p>The certificate to be added. </p>
    name: certificate
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddParameter?alt=com.microsoft.azure.batch.protocol.models.CertificateAddParameter&text=CertificateAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateAddOptions&text=CertificateAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a certificate to the specified account.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.addAsync(CertificateAddParameter,CertificateAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.addAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions, final ServiceCallback<Void> serviceCallback)
  name: addAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Certificates.addAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The certificate to be added. </p>
    name: certificate
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddParameter?alt=com.microsoft.azure.batch.protocol.models.CertificateAddParameter&text=CertificateAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateAddOptions&text=CertificateAddOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a certificate to the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.addAsync(CertificateAddParameter,CertificateAddOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.addAsync(CertificateAddParameter certificate, final ServiceCallback<Void> serviceCallback)
  name: addAsync(CertificateAddParameter certificate, final ServiceCallback<Void> serviceCallback)
  nameWithType: Certificates.addAsync(CertificateAddParameter certificate, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The certificate to be added. </p>
    name: certificate
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddParameter?alt=com.microsoft.azure.batch.protocol.models.CertificateAddParameter&text=CertificateAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a certificate to the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(CertificateAddParameter certificate, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.addAsync(CertificateAddParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.addWithServiceResponseAsync(CertificateAddParameter certificate)
  name: addWithServiceResponseAsync(CertificateAddParameter certificate)
  nameWithType: Certificates.addWithServiceResponseAsync(CertificateAddParameter certificate)
  parameters:
  - description: <p>The certificate to be added. </p>
    name: certificate
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddParameter?alt=com.microsoft.azure.batch.protocol.models.CertificateAddParameter&text=CertificateAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateAddHeaders&text=CertificateAddHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a certificate to the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, CertificateAddHeaders>> addWithServiceResponseAsync(CertificateAddParameter certificate)
  uid: com.microsoft.azure.batch.protocol.Certificates.addWithServiceResponseAsync(CertificateAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Certificates.addWithServiceResponseAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  name: addWithServiceResponseAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  nameWithType: Certificates.addWithServiceResponseAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  parameters:
  - description: <p>The certificate to be added. </p>
    name: certificate
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddParameter?alt=com.microsoft.azure.batch.protocol.models.CertificateAddParameter&text=CertificateAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateAddOptions&text=CertificateAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.CertificateAddHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateAddHeaders&text=CertificateAddHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a certificate to the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, CertificateAddHeaders>> addWithServiceResponseAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.addWithServiceResponseAsync(CertificateAddParameter,CertificateAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.cancelDeletion(String thumbprintAlgorithm, String thumbprint)
  name: cancelDeletion(String thumbprintAlgorithm, String thumbprint)
  nameWithType: Certificates.cancelDeletion(String thumbprintAlgorithm, String thumbprint)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate being deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public void cancelDeletion(String thumbprintAlgorithm, String thumbprint)
  uid: com.microsoft.azure.batch.protocol.Certificates.cancelDeletion(String,String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.cancelDeletion(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  name: cancelDeletion(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  nameWithType: Certificates.cancelDeletion(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate being deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateCancelDeletionOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionOptions&text=CertificateCancelDeletionOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public void cancelDeletion(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.cancelDeletion(String,String,CertificateCancelDeletionOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint)
  name: cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint)
  nameWithType: Certificates.cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate being deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public Observable<Void> cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint)
  uid: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  name: cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  nameWithType: Certificates.cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate being deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateCancelDeletionOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionOptions&text=CertificateCancelDeletionOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public Observable<Void> cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionAsync(String,String,CertificateCancelDeletionOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions, final ServiceCallback<Void> serviceCallback)
  name: cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Certificates.cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate being deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateCancelDeletionOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionOptions&text=CertificateCancelDeletionOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public ServiceFuture<Void> cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionAsync(String,String,CertificateCancelDeletionOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Void> serviceCallback)
  name: cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Void> serviceCallback)
  nameWithType: Certificates.cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate being deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public ServiceFuture<Void> cancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  name: cancelDeletionWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  nameWithType: Certificates.cancelDeletionWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate being deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionHeaders&text=CertificateCancelDeletionHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, CertificateCancelDeletionHeaders>> cancelDeletionWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  uid: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  name: cancelDeletionWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  nameWithType: Certificates.cancelDeletionWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate being deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateCancelDeletionOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionOptions&text=CertificateCancelDeletionOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateCancelDeletionHeaders&text=CertificateCancelDeletionHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, CertificateCancelDeletionHeaders>> cancelDeletionWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.cancelDeletionWithServiceResponseAsync(String,String,CertificateCancelDeletionOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.delete(String thumbprintAlgorithm, String thumbprint)
  name: delete(String thumbprintAlgorithm, String thumbprint)
  nameWithType: Certificates.delete(String thumbprintAlgorithm, String thumbprint)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to be deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a certificate from the specified account. You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.</p>

    <p></p>
  syntax: public void delete(String thumbprintAlgorithm, String thumbprint)
  uid: com.microsoft.azure.batch.protocol.Certificates.delete(String,String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.delete(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  name: delete(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  nameWithType: Certificates.delete(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to be deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateDeleteOptions&text=CertificateDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a certificate from the specified account. You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.</p>

    <p></p>
  syntax: public void delete(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.delete(String,String,CertificateDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.deleteAsync(String thumbprintAlgorithm, String thumbprint)
  name: deleteAsync(String thumbprintAlgorithm, String thumbprint)
  nameWithType: Certificates.deleteAsync(String thumbprintAlgorithm, String thumbprint)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to be deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a certificate from the specified account. You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String thumbprintAlgorithm, String thumbprint)
  uid: com.microsoft.azure.batch.protocol.Certificates.deleteAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.deleteAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  name: deleteAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  nameWithType: Certificates.deleteAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to be deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateDeleteOptions&text=CertificateDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a certificate from the specified account. You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.deleteAsync(String,String,CertificateDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.deleteAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Certificates.deleteAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to be deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateDeleteOptions&text=CertificateDeleteOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a certificate from the specified account. You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.deleteAsync(String,String,CertificateDeleteOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.deleteAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Void> serviceCallback)
  nameWithType: Certificates.deleteAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to be deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a certificate from the specified account. You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.deleteAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.deleteWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  name: deleteWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  nameWithType: Certificates.deleteWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to be deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.CertificateDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateDeleteHeaders&text=CertificateDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a certificate from the specified account. You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, CertificateDeleteHeaders>> deleteWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  uid: com.microsoft.azure.batch.protocol.Certificates.deleteWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.deleteWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  name: deleteWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  nameWithType: Certificates.deleteWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to be deleted. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateDeleteOptions&text=CertificateDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.CertificateDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateDeleteHeaders&text=CertificateDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a certificate from the specified account. You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, CertificateDeleteHeaders>> deleteWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateDeleteOptions certificateDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.deleteWithServiceResponseAsync(String,String,CertificateDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.get(String thumbprintAlgorithm, String thumbprint)
  name: get(String thumbprintAlgorithm, String thumbprint)
  nameWithType: Certificates.get(String thumbprintAlgorithm, String thumbprint)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to get. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Certificate object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public Certificate get(String thumbprintAlgorithm, String thumbprint)
  uid: com.microsoft.azure.batch.protocol.Certificates.get(String,String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.get(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  name: get(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  nameWithType: Certificates.get(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to get. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateGetOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateGetOptions&text=CertificateGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Certificate object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public Certificate get(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.get(String,String,CertificateGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.getAsync(String thumbprintAlgorithm, String thumbprint)
  name: getAsync(String thumbprintAlgorithm, String thumbprint)
  nameWithType: Certificates.getAsync(String thumbprintAlgorithm, String thumbprint)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to get. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Certificate object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public Observable<Certificate> getAsync(String thumbprintAlgorithm, String thumbprint)
  uid: com.microsoft.azure.batch.protocol.Certificates.getAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.getAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  name: getAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  nameWithType: Certificates.getAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to get. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateGetOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateGetOptions&text=CertificateGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Certificate object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public Observable<Certificate> getAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.getAsync(String,String,CertificateGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.getAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions, final ServiceCallback<Certificate> serviceCallback)
  name: getAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions, final ServiceCallback<Certificate> serviceCallback)
  nameWithType: Certificates.getAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions, final ServiceCallback<Certificate> serviceCallback)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to get. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateGetOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateGetOptions&text=CertificateGetOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<Certificate> getAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions, final ServiceCallback<Certificate> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.getAsync(String,String,CertificateGetOptions,final ServiceCallback<Certificate>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.getAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Certificate> serviceCallback)
  name: getAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Certificate> serviceCallback)
  nameWithType: Certificates.getAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Certificate> serviceCallback)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to get. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<Certificate> getAsync(String thumbprintAlgorithm, String thumbprint, final ServiceCallback<Certificate> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.getAsync(String,String,final ServiceCallback<Certificate>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.getWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  name: getWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  nameWithType: Certificates.getWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to get. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Certificate object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.CertificateGetHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateGetHeaders&text=CertificateGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Certificate, CertificateGetHeaders>> getWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint)
  uid: com.microsoft.azure.batch.protocol.Certificates.getWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.getWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  name: getWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  nameWithType: Certificates.getWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  parameters:
  - description: <p>The algorithm used to derive the thumbprint parameter. This must be sha1. </p>
    name: thumbprintAlgorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The thumbprint of the certificate to get. </p>
    name: thumbprint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.CertificateGetOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateGetOptions&text=CertificateGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Certificate object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.CertificateGetHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateGetHeaders&text=CertificateGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Certificate, CertificateGetHeaders>> getWithServiceResponseAsync(String thumbprintAlgorithm, String thumbprint, CertificateGetOptions certificateGetOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.getWithServiceResponseAsync(String,String,CertificateGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.list()
  name: list()
  nameWithType: Certificates.list()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;Certificate&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public PagedList<Certificate> list()
  uid: com.microsoft.azure.batch.protocol.Certificates.list()
- fullName: com.microsoft.azure.batch.protocol.Certificates.list(final CertificateListOptions certificateListOptions)
  name: list(final CertificateListOptions certificateListOptions)
  nameWithType: Certificates.list(final CertificateListOptions certificateListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: certificateListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.CertificateListOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateListOptions&text=CertificateListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;Certificate&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public PagedList<Certificate> list(final CertificateListOptions certificateListOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.list(final CertificateListOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listAsync()
  name: listAsync()
  nameWithType: Certificates.listAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;Certificate&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public Observable<Page<Certificate>> listAsync()
  uid: com.microsoft.azure.batch.protocol.Certificates.listAsync()
- fullName: com.microsoft.azure.batch.protocol.Certificates.listAsync(final CertificateListOptions certificateListOptions)
  name: listAsync(final CertificateListOptions certificateListOptions)
  nameWithType: Certificates.listAsync(final CertificateListOptions certificateListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: certificateListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.CertificateListOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateListOptions&text=CertificateListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;Certificate&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public Observable<Page<Certificate>> listAsync(final CertificateListOptions certificateListOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.listAsync(final CertificateListOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listAsync(final CertificateListOptions certificateListOptions, final ListOperationCallback<Certificate> serviceCallback)
  name: listAsync(final CertificateListOptions certificateListOptions, final ListOperationCallback<Certificate> serviceCallback)
  nameWithType: Certificates.listAsync(final CertificateListOptions certificateListOptions, final ListOperationCallback<Certificate> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: certificateListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.CertificateListOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateListOptions&text=CertificateListOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<Certificate>> listAsync(final CertificateListOptions certificateListOptions, final ListOperationCallback<Certificate> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.listAsync(final CertificateListOptions,final ListOperationCallback<Certificate>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listAsync(final ListOperationCallback<Certificate> serviceCallback)
  name: listAsync(final ListOperationCallback<Certificate> serviceCallback)
  nameWithType: Certificates.listAsync(final ListOperationCallback<Certificate> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<Certificate>> listAsync(final ListOperationCallback<Certificate> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.listAsync(final ListOperationCallback<Certificate>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: Certificates.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;Certificate&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public PagedList<Certificate> listNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Certificates.listNext(final String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listNext(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  name: listNext(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  nameWithType: Certificates.listNext(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.CertificateListNextOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateListNextOptions&text=CertificateListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;Certificate&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public PagedList<Certificate> listNext(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.listNext(final String,final CertificateListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: Certificates.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;Certificate&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public Observable<Page<Certificate>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Certificates.listNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listNextAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  name: listNextAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  nameWithType: Certificates.listNextAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.CertificateListNextOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateListNextOptions&text=CertificateListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;Certificate&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public Observable<Page<Certificate>> listNextAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.listNextAsync(final String,final CertificateListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listNextAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions, final ServiceFuture<List<Certificate>> serviceFuture, final ListOperationCallback<Certificate> serviceCallback)
  name: listNextAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions, final ServiceFuture<List<Certificate>> serviceFuture, final ListOperationCallback<Certificate> serviceCallback)
  nameWithType: Certificates.listNextAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions, final ServiceFuture<List<Certificate>> serviceFuture, final ListOperationCallback<Certificate> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.CertificateListNextOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateListNextOptions&text=CertificateListNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<Certificate>> listNextAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions, final ServiceFuture<List<Certificate>> serviceFuture, final ListOperationCallback<Certificate> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.listNextAsync(final String,final CertificateListNextOptions,final ServiceFuture<List<Certificate>>,final ListOperationCallback<Certificate>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listNextAsync(final String nextPageLink, final ServiceFuture<List<Certificate>> serviceFuture, final ListOperationCallback<Certificate> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<Certificate>> serviceFuture, final ListOperationCallback<Certificate> serviceCallback)
  nameWithType: Certificates.listNextAsync(final String nextPageLink, final ServiceFuture<List<Certificate>> serviceFuture, final ListOperationCallback<Certificate> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<Certificate>> listNextAsync(final String nextPageLink, final ServiceFuture<List<Certificate>> serviceFuture, final ListOperationCallback<Certificate> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Certificates.listNextAsync(final String,final ServiceFuture<List<Certificate>>,final ListOperationCallback<Certificate>)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Certificates.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;Certificate&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.CertificateListHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateListHeaders&text=CertificateListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<Certificate>, CertificateListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Certificates.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listNextWithServiceResponseAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  name: listNextWithServiceResponseAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  nameWithType: Certificates.listNextWithServiceResponseAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: certificateListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.CertificateListNextOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateListNextOptions&text=CertificateListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;Certificate&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.CertificateListHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateListHeaders&text=CertificateListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<Certificate>, CertificateListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink, final CertificateListNextOptions certificateListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.listNextWithServiceResponseAsync(final String,final CertificateListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Certificates.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: Certificates.listWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;Certificate&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.CertificateListHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateListHeaders&text=CertificateListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<Certificate>, CertificateListHeaders>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.batch.protocol.Certificates.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.batch.protocol.Certificates.listWithServiceResponseAsync(final CertificateListOptions certificateListOptions)
  name: listWithServiceResponseAsync(final CertificateListOptions certificateListOptions)
  nameWithType: Certificates.listWithServiceResponseAsync(final CertificateListOptions certificateListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: certificateListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.CertificateListOptions?alt=com.microsoft.azure.batch.protocol.models.CertificateListOptions&text=CertificateListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;Certificate&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.CertificateListHeaders?alt=com.microsoft.azure.batch.protocol.models.CertificateListHeaders&text=CertificateListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates that have been added to the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<Certificate>, CertificateListHeaders>> listWithServiceResponseAsync(final CertificateListOptions certificateListOptions)
  uid: com.microsoft.azure.batch.protocol.Certificates.listWithServiceResponseAsync(final CertificateListOptions)
nameWithType: Certificates
syntax: public interface Certificates
type: interface
uid: com.microsoft.azure.batch.protocol.Certificates
fullName: com.microsoft.azure.batch.protocol.Certificates
name: Certificates
package: com.microsoft.azure.batch.protocol
summary: <p>An instance of this class provides access to all the operations defined in Certificates. </p>
metadata: {}
