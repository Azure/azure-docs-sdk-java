### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.ReliableCollectionsActorStateProvider()
  name: ReliableCollectionsActorStateProvider()
  nameWithType: ReliableCollectionsActorStateProvider.ReliableCollectionsActorStateProvider()
  syntax: public ReliableCollectionsActorStateProvider()
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.ReliableCollectionsActorStateProvider()
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration stateManagerConfig)
  name: ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration stateManagerConfig)
  nameWithType: ReliableCollectionsActorStateProvider.ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration stateManagerConfig)
  parameters:
  - name: stateManagerConfig
    type: <xref href="microsoft.servicefabric.data.ReliableStateManagerConfiguration?alt=microsoft.servicefabric.data.ReliableStateManagerConfiguration&text=ReliableStateManagerConfiguration" data-throw-if-not-resolved="False"/>
  syntax: public ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration stateManagerConfig)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration stateManagerConfig, int actorStateMapCount, int reminderMapCount)
  name: ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration stateManagerConfig, int actorStateMapCount, int reminderMapCount)
  nameWithType: ReliableCollectionsActorStateProvider.ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration stateManagerConfig, int actorStateMapCount, int reminderMapCount)
  parameters:
  - name: stateManagerConfig
    type: <xref href="microsoft.servicefabric.data.ReliableStateManagerConfiguration?alt=microsoft.servicefabric.data.ReliableStateManagerConfiguration&text=ReliableStateManagerConfiguration" data-throw-if-not-resolved="False"/>
  - name: actorStateMapCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: reminderMapCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration stateManagerConfig, int actorStateMapCount, int reminderMapCount)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration,int,int)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.data.StateProviderReplica" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.actors.runtime.ActorStateProvider?alt=microsoft.servicefabric.actors.runtime.ActorStateProvider&text=ActorStateProvider" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.actors.runtime.ActorStateProviderInternal.currentReplicaRole()
- microsoft.servicefabric.actors.runtime.ActorStateProviderInternal.traceId()
- microsoft.servicefabric.actors.runtime.ActorStateProviderInternal.traceType()
- microsoft.servicefabric.actors.runtime.ActorStateProviderInternal.transientErrorRetryDelay()
methods:
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.abort()
  name: abort()
  nameWithType: ReliableCollectionsActorStateProvider.abort()
  overridden: microsoft.servicefabric.data.StateProviderReplica.abort()
  summary: >-
    <p>Forcefully abort the state provider replica. </p>

    <p>

      <b>Remarks:</b>This generally occurs when a permanent fault is detected on the node, or when Service Fabric cannot reliably manage the replica's lifecycle due to internal failures. </p>
  syntax: public void abort()
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.abort()
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  name: actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.actorActivatedAsync(ActorId,CancellationToken)
  parameters:
  - description: <p>ID of the actor that is activated. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous Actor activation notification processing. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is invoked as part of the activation process of the actor with the specified Id.</p>

    <p></p>
  syntax: public CompletableFuture<?> actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.actorActivatedAsync(ActorId,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  name: backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: ReliableCollectionsActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  overridden: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parameters:
  - description: <p>The type of backup to perform. </p>
    name: option
    type: <xref href="microsoft.servicefabric.data.BackupOption?alt=microsoft.servicefabric.data.BackupOption&text=BackupOption" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout for this operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  - description: <p>Callback to be called when the backup folder has been created locally and is ready to be moved out of the node </p>
    name: backupCallback
    type: BiFunction&lt;<xref href="microsoft.servicefabric.data.BackupInfo?alt=microsoft.servicefabric.data.BackupInfo&text=BackupInfo" data-throw-if-not-resolved="False"/>, <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a full backup of all reliable state managed by this ReliableStateManager.</p>

    <p>

      <b>Remarks:</b> A FULL backup will be performed with a one-hour timeout. Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location. If false is returned, BackupAsync throws UnsupportedOperationException with the relevant message indicating backupCallback returned false. Also, backup will be marked as unsuccessful. </p>
  syntax: public CompletableFuture<?> backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  name: backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: ReliableCollectionsActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  overridden: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parameters:
  - description: <p>Callback to be called when the backup folder has been created locally and is ready to be moved out of the node </p>
    name: backupCallback
    type: BiFunction&lt;<xref href="microsoft.servicefabric.data.BackupInfo?alt=microsoft.servicefabric.data.BackupInfo&text=BackupInfo" data-throw-if-not-resolved="False"/>, <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a full backup of all reliable state managed by this ReliableStateManager.</p>

    <p>

      <b>Remarks:</b> A FULL backup will be performed with a one-hour timeout. Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location. If false is returned, BackupAsync throws UnsupportedOperationException with the relevant message indicating backupCallback returned false. Also, backup will be marked as unsuccessful. </p>
  syntax: public CompletableFuture<?> backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  name: changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.data.StateProviderReplica.changeRoleAsync(ReplicaRole,CancellationToken)
  parameters:
  - description: <p>The new replica role, such as primary or secondary. </p>
    name: newRole
    type: <xref href="system.fabric.ReplicaRole?alt=system.fabric.ReplicaRole&text=ReplicaRole" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous change role operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Notify the state provider replica that its role is changing, for example to Primary or Secondary.</p>

    <p></p>
  syntax: public CompletableFuture<?> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.changeRoleAsync(ReplicaRole,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.closeAsync(CancellationToken cancellationToken)
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.closeAsync(CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.data.StateProviderReplica.closeAsync(CancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous close operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gracefully close the state provider replica.</p>

    <p>

      <b>Remarks:</b>This generally occurs when the replica's code is being upgrade, the replica is being moved due to load balancing, or a transient fault is detected. </p>
  syntax: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.closeAsync(CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  name: containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.containsStateAsync(ActorId,String,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to check state existence. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the actor state to check for existence. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous check operation. The value of TResult parameter is true if state with specified name exists otherwise false. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks whether actor state provider contains an actor state with specified state name.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.containsStateAsync(ActorId,String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  name: deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.deleteReminderAsync(ActorId,String,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to delete the reminder. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the reminder to delete. </p>
    name: reminderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous delete operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified actor reminder if it exists.</p>

    <p></p>
  syntax: public CompletableFuture<?> deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.deleteReminderAsync(ActorId,String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  name: deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>>,CancellationToken)
  parameters:
  - description: <p>The set of reminders to delete </p>
    name: reminderNames
    type: Map&lt;<xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>, Collection&lt;String&gt;&gt;
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous delete operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified set of reminders</p>

    <p></p>
  syntax: public CompletableFuture<?> deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>>,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  name: enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.enumerateStateNamesAsync(ActorId,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to create enumerable. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous enumeration operation. The value of TResult parameter is an enumerable of all state names associated with specified actor. </p>
    type: <xref href="CompletableFuture%3CList%3CString%3E%3E?alt=CompletableFuture%3CList%3CString%3E%3E&text=CompletableFuture%3CList%3CString%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an enumerable of all the state names associated with specified actor.</p>

    <p>

      <b>Remarks:</b>The enumerator returned from actor state provider is safe to use concurrently with reads and writes to the state provider. It represents a snapshot consistent view of the state provider. </p>
  syntax: public CompletableFuture<List<String>> enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.enumerateStateNamesAsync(ActorId,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  name: getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.getActorsAsync(int,ContinuationToken,CancellationToken)
  parameters:
  - description: <p>Number of items requested to be returned. </p>
    name: numItemsToReturn
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>A continuation token to start querying the results from. A null value of continuation token means start returning values form the beginning. </p>
    name: continuationToken
    type: <xref href="microsoft.servicefabric.actors.ContinuationToken?alt=microsoft.servicefabric.actors.ContinuationToken&text=ContinuationToken" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation of call to server. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.actors.PagedResult?alt=microsoft.servicefabric.actors.PagedResult&text=PagedResult" data-throw-if-not-resolved="False"/>&lt;<xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets ActorIds from the State Provider.</p>

    <p>

      <b>Remarks:</b> The </p>
  syntax: public CompletableFuture<PagedResult<ActorId>> getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.getActorsAsync(int,ContinuationToken,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
  name: initialize(ActorTypeInformation actorTypeInformation)
  nameWithType: ReliableCollectionsActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.initialize(ActorTypeInformation)
  parameters:
  - description: <p>Type information of the actor class </p>
    name: actorTypeInformation
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTypeInformation?alt=microsoft.servicefabric.actors.runtime.ActorTypeInformation&text=ActorTypeInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes the actor state provider with type information of the actor type associated with it.</p>

    <p></p>
  syntax: public void initialize(ActorTypeInformation actorTypeInformation)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.initialize(ActorTypeInformation)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.initialize(StatefulServiceInitializationParameters initializationParameters)
  name: initialize(StatefulServiceInitializationParameters initializationParameters)
  nameWithType: ReliableCollectionsActorStateProvider.initialize(StatefulServiceInitializationParameters initializationParameters)
  overridden: microsoft.servicefabric.data.StateProviderReplica.initialize(StatefulServiceInitializationParameters)
  parameters:
  - description: <p>Service initialization information such as service name, partition id, replica id, and code package information. </p>
    name: initializationParameters
    type: <xref href="system.fabric.StatefulServiceInitializationParameters?alt=system.fabric.StatefulServiceInitializationParameters&text=StatefulServiceInitializationParameters" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initialize the state provider replica using the service initialization information.</p>

    <p>

      <b>Remarks:</b>No complex processing should be done during Initialize. Expensive or long-running initialization should be done in OpenAsync. </p>
  syntax: public void initialize(StatefulServiceInitializationParameters initializationParameters)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.initialize(StatefulServiceInitializationParameters)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
  name: loadRemindersAsync(CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.loadRemindersAsync(CancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous load operation. The value of TResult parameter is a collection of all actor reminders contained in the actor state provider. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.actors.runtime.ActorReminderCollection?alt=microsoft.servicefabric.actors.runtime.ActorReminderCollection&text=ActorReminderCollection" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Loads all the reminders contained in the actor state provider.</p>

    <p></p>
  syntax: public CompletableFuture<ActorReminderCollection> loadRemindersAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.loadRemindersAsync(CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  name: loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.loadStateAsync(ActorId,String,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to load the state. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the actor state to load. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous load operation. The value of TResult parameter contains value of actor state associated with given state name. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CT%3E?alt=%3CT%3E+CompletableFuture%3CT%3E&text=%3CT%3E+CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Loads the actor state associated with the specified state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<T> loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.loadStateAsync(ActorId,String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  name: openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.data.StateProviderReplica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
  parameters:
  - description: <p>Indicates whether this is a new or existing replica. </p>
    name: openMode
    type: <xref href="system.fabric.ReplicaOpenMode?alt=system.fabric.ReplicaOpenMode&text=ReplicaOpenMode" data-throw-if-not-resolved="False"/>
  - description: <p>The partition this replica belongs to. </p>
    name: partition
    type: <xref href="system.fabric.StatefulServicePartition?alt=system.fabric.StatefulServicePartition&text=StatefulServicePartition" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous open operation. The result contains the replicator responsible for replicating state between other state provider replicas in the partition. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.Replicator?alt=system.fabric.Replicator&text=Replicator" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Open the state provider replica for use.</p>

    <p>

      <b>Remarks:</b>Extended state provider initialization tasks can be started at this time. </p>
  syntax: public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  name: reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.reminderCallbackCompletedAsync(ActorId,ActorReminder,CancellationToken)
  parameters:
  - description: <p>ID of the actor which own reminder </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Actor reminder that completed successfully. </p>
    name: reminder
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorReminder?alt=microsoft.servicefabric.actors.runtime.ActorReminder&text=ActorReminder" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous reminder callback completed notification processing. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Invoked when a reminder fires and finishes executing its callback <xref uid="microsoft.servicefabric.actors.runtime.Remindable.receiveReminderAsync(String,byte [],Duration,Duration)" data-throw-if-not-resolved="false" data-raw-source="Remindable#receiveReminderAsync"></xref> successfully </p>
  syntax: public CompletableFuture<?> reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.reminderCallbackCompletedAsync(ActorId,ActorReminder,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  name: removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.removeActorAsync(ActorId,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to remove state. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous remove operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes all the existing states and reminders associated with specified actor atomically.</p>

    <p></p>
  syntax: public CompletableFuture<?> removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.removeActorAsync(ActorId,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.restoreAsync(String backupFolderPath)
  name: restoreAsync(String backupFolderPath)
  nameWithType: ReliableCollectionsActorStateProvider.restoreAsync(String backupFolderPath)
  overridden: microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String)
  parameters:
  - description: <p>The directory where the replica is to be restored from. This parameter cannot be null, empty or contain just whitespace. UNC paths may also be provided. </p>
    name: backupFolderPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous restore operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restore a backup taken.</p>

    <p>

      <b>Remarks:</b>A safe restore will be performed, meaning the restore will only be completed if the data to restore is ahead of state of the current replica. </p>
  syntax: public CompletableFuture<?> restoreAsync(String backupFolderPath)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.restoreAsync(String)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  name: restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String,RestorePolicy,Duration,CancellationToken)
  parameters:
  - description: <p>The directory where the replica is to be restored from. This parameter cannot be null, empty or contain just whitespace. UNC paths may also be provided. </p>
    name: backupFolderPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The restore policy. </p>
    name: restorePolicy
    type: <xref href="microsoft.servicefabric.data.RestorePolicy?alt=microsoft.servicefabric.data.RestorePolicy&text=RestorePolicy" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout for this operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous restore operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restore a backup taken</p>

    <p></p>
  syntax: public CompletableFuture<?> restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.restoreAsync(String,RestorePolicy,Duration,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  name: saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveReminderAsync(ActorId,ActorReminder,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to save the reminder. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Actor reminder to save. </p>
    name: reminder
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorReminder?alt=microsoft.servicefabric.actors.runtime.ActorReminder&text=ActorReminder" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous save operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves the specified actor reminder. If an actor reminder with given name does not exist, it adds the actor reminder otherwise existing actor reminder with same name is updated.</p>

    <p></p>
  syntax: public CompletableFuture<?> saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.saveReminderAsync(ActorId,ActorReminder,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  name: saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to save the state changes. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Collection of state changes to save. </p>
    name: stateChanges
    type: List&lt;<xref href="microsoft.servicefabric.actors.runtime.ActorStateChange?alt=microsoft.servicefabric.actors.runtime.ActorStateChange&text=ActorStateChange" data-throw-if-not-resolved="False"/>&gt;
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous save operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves the specified set of actor state changes atomically.</p>

    <p>

      <b>Remarks:</b> The collection of state changes should contain only one item for a given state name. The save operation will fail on trying to add an actor state which already exists or update/remove an actor state which does not exist. </p>
  syntax: public CompletableFuture<?> saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  name: setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  nameWithType: ReliableCollectionsActorStateProvider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  overridden: microsoft.servicefabric.data.StateProviderReplica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
  parameters:
  - description: <p>Function called as part of suspected data loss processing. Function takes in CancellationToken and returns a CompletableFuture that represents the asynchronous processing of the event. Returning true, indicates that the replica's state has been restored. False indicates that the replica's state has not been changed. </p>
    name: onDataLossAsync
    type: Function&lt;<xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  summary: >-
    <p>Function called during suspected data-loss</p>

    <p></p>
  syntax: public void setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
nameWithType: ReliableCollectionsActorStateProvider
syntax: public class ReliableCollectionsActorStateProvider implements ActorStateProvider
type: class
uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider
fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider
name: ReliableCollectionsActorStateProvider
package: microsoft.servicefabric.actors.runtime
metadata: {}
