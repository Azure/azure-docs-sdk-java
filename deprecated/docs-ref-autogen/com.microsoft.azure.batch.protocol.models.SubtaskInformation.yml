### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.containerInfo()
  name: containerInfo()
  nameWithType: SubtaskInformation.containerInfo()
  returns:
    description: <p>the containerInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation&text=TaskContainerExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the task runs in a container context.</p>

    <p></p>
  syntax: public TaskContainerExecutionInformation containerInfo()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.containerInfo()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.endTime()
  name: endTime()
  nameWithType: SubtaskInformation.endTime()
  returns:
    description: <p>the endTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the subtask is in the Completed state.</p>

    <p></p>
  syntax: public DateTime endTime()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.endTime()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.exitCode()
  name: exitCode()
  nameWithType: SubtaskInformation.exitCode()
  returns:
    description: <p>the exitCode value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.</p>

    <p></p>
  syntax: public Integer exitCode()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.exitCode()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.failureInfo()
  name: failureInfo()
  nameWithType: SubtaskInformation.failureInfo()
  returns:
    description: <p>the failureInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskFailureInformation?alt=com.microsoft.azure.batch.protocol.models.TaskFailureInformation&text=TaskFailureInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the task is in the completed state and encountered a failure.</p>

    <p></p>
  syntax: public TaskFailureInformation failureInfo()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.failureInfo()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.id()
  name: id()
  nameWithType: SubtaskInformation.id()
  returns:
    description: <p>the id value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the id value.</p>

    <p></p>
  syntax: public Integer id()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.id()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.nodeInfo()
  name: nodeInfo()
  nameWithType: SubtaskInformation.nodeInfo()
  returns:
    description: <p>the nodeInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeInformation?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeInformation&text=ComputeNodeInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the nodeInfo value.</p>

    <p></p>
  syntax: public ComputeNodeInformation nodeInfo()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.nodeInfo()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.previousState()
  name: previousState()
  nameWithType: SubtaskInformation.previousState()
  returns:
    description: <p>the previousState value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskState?alt=com.microsoft.azure.batch.protocol.models.SubtaskState&text=SubtaskState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is not set if the subtask is in its initial running state. Possible values include: 'preparing', 'running', 'completed'.</p>

    <p></p>
  syntax: public SubtaskState previousState()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.previousState()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.previousStateTransitionTime()
  name: previousStateTransitionTime()
  nameWithType: SubtaskInformation.previousStateTransitionTime()
  returns:
    description: <p>the previousStateTransitionTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is not set if the subtask is in its initial running state.</p>

    <p></p>
  syntax: public DateTime previousStateTransitionTime()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.previousStateTransitionTime()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.result()
  name: result()
  nameWithType: SubtaskInformation.result()
  returns:
    description: <p>the result value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionResult?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionResult&text=TaskExecutionResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if the value is 'failed', then the details of the failure can be found in the failureInfo property. Possible values include: 'success', 'failure'.</p>

    <p></p>
  syntax: public TaskExecutionResult result()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.result()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.startTime()
  name: startTime()
  nameWithType: SubtaskInformation.startTime()
  returns:
    description: <p>the startTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the startTime value.</p>

    <p></p>
  syntax: public DateTime startTime()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.startTime()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.state()
  name: state()
  nameWithType: SubtaskInformation.state()
  returns:
    description: <p>the state value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskState?alt=com.microsoft.azure.batch.protocol.models.SubtaskState&text=SubtaskState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get possible values include: 'preparing', 'running', 'completed'.</p>

    <p></p>
  syntax: public SubtaskState state()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.state()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.stateTransitionTime()
  name: stateTransitionTime()
  nameWithType: SubtaskInformation.stateTransitionTime()
  returns:
    description: <p>the stateTransitionTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the stateTransitionTime value.</p>

    <p></p>
  syntax: public DateTime stateTransitionTime()
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.stateTransitionTime()
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withContainerInfo(TaskContainerExecutionInformation containerInfo)
  name: withContainerInfo(TaskContainerExecutionInformation containerInfo)
  nameWithType: SubtaskInformation.withContainerInfo(TaskContainerExecutionInformation containerInfo)
  parameters:
  - description: <p>the containerInfo value to set </p>
    name: containerInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation&text=TaskContainerExecutionInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the task runs in a container context.</p>

    <p></p>
  syntax: public SubtaskInformation withContainerInfo(TaskContainerExecutionInformation containerInfo)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withContainerInfo(TaskContainerExecutionInformation)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withEndTime(DateTime endTime)
  name: withEndTime(DateTime endTime)
  nameWithType: SubtaskInformation.withEndTime(DateTime endTime)
  parameters:
  - description: <p>the endTime value to set </p>
    name: endTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the subtask is in the Completed state.</p>

    <p></p>
  syntax: public SubtaskInformation withEndTime(DateTime endTime)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withEndTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withExitCode(Integer exitCode)
  name: withExitCode(Integer exitCode)
  nameWithType: SubtaskInformation.withExitCode(Integer exitCode)
  parameters:
  - description: <p>the exitCode value to set </p>
    name: exitCode
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.</p>

    <p></p>
  syntax: public SubtaskInformation withExitCode(Integer exitCode)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withExitCode(Integer)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withFailureInfo(TaskFailureInformation failureInfo)
  name: withFailureInfo(TaskFailureInformation failureInfo)
  nameWithType: SubtaskInformation.withFailureInfo(TaskFailureInformation failureInfo)
  parameters:
  - description: <p>the failureInfo value to set </p>
    name: failureInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskFailureInformation?alt=com.microsoft.azure.batch.protocol.models.TaskFailureInformation&text=TaskFailureInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the task is in the completed state and encountered a failure.</p>

    <p></p>
  syntax: public SubtaskInformation withFailureInfo(TaskFailureInformation failureInfo)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withFailureInfo(TaskFailureInformation)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withId(Integer id)
  name: withId(Integer id)
  nameWithType: SubtaskInformation.withId(Integer id)
  parameters:
  - description: <p>the id value to set </p>
    name: id
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the id value.</p>

    <p></p>
  syntax: public SubtaskInformation withId(Integer id)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withId(Integer)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withNodeInfo(ComputeNodeInformation nodeInfo)
  name: withNodeInfo(ComputeNodeInformation nodeInfo)
  nameWithType: SubtaskInformation.withNodeInfo(ComputeNodeInformation nodeInfo)
  parameters:
  - description: <p>the nodeInfo value to set </p>
    name: nodeInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeInformation?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeInformation&text=ComputeNodeInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the nodeInfo value.</p>

    <p></p>
  syntax: public SubtaskInformation withNodeInfo(ComputeNodeInformation nodeInfo)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withNodeInfo(ComputeNodeInformation)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withPreviousState(SubtaskState previousState)
  name: withPreviousState(SubtaskState previousState)
  nameWithType: SubtaskInformation.withPreviousState(SubtaskState previousState)
  parameters:
  - description: <p>the previousState value to set </p>
    name: previousState
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskState?alt=com.microsoft.azure.batch.protocol.models.SubtaskState&text=SubtaskState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is not set if the subtask is in its initial running state. Possible values include: 'preparing', 'running', 'completed'.</p>

    <p></p>
  syntax: public SubtaskInformation withPreviousState(SubtaskState previousState)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withPreviousState(SubtaskState)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withPreviousStateTransitionTime(DateTime previousStateTransitionTime)
  name: withPreviousStateTransitionTime(DateTime previousStateTransitionTime)
  nameWithType: SubtaskInformation.withPreviousStateTransitionTime(DateTime previousStateTransitionTime)
  parameters:
  - description: <p>the previousStateTransitionTime value to set </p>
    name: previousStateTransitionTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is not set if the subtask is in its initial running state.</p>

    <p></p>
  syntax: public SubtaskInformation withPreviousStateTransitionTime(DateTime previousStateTransitionTime)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withPreviousStateTransitionTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withResult(TaskExecutionResult result)
  name: withResult(TaskExecutionResult result)
  nameWithType: SubtaskInformation.withResult(TaskExecutionResult result)
  parameters:
  - description: <p>the result value to set </p>
    name: result
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionResult?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionResult&text=TaskExecutionResult" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if the value is 'failed', then the details of the failure can be found in the failureInfo property. Possible values include: 'success', 'failure'.</p>

    <p></p>
  syntax: public SubtaskInformation withResult(TaskExecutionResult result)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withResult(TaskExecutionResult)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withStartTime(DateTime startTime)
  name: withStartTime(DateTime startTime)
  nameWithType: SubtaskInformation.withStartTime(DateTime startTime)
  parameters:
  - description: <p>the startTime value to set </p>
    name: startTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the startTime value.</p>

    <p></p>
  syntax: public SubtaskInformation withStartTime(DateTime startTime)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withStartTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withState(SubtaskState state)
  name: withState(SubtaskState state)
  nameWithType: SubtaskInformation.withState(SubtaskState state)
  parameters:
  - description: <p>the state value to set </p>
    name: state
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskState?alt=com.microsoft.azure.batch.protocol.models.SubtaskState&text=SubtaskState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set possible values include: 'preparing', 'running', 'completed'.</p>

    <p></p>
  syntax: public SubtaskInformation withState(SubtaskState state)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withState(SubtaskState)
- fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withStateTransitionTime(DateTime stateTransitionTime)
  name: withStateTransitionTime(DateTime stateTransitionTime)
  nameWithType: SubtaskInformation.withStateTransitionTime(DateTime stateTransitionTime)
  parameters:
  - description: <p>the stateTransitionTime value to set </p>
    name: stateTransitionTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SubtaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SubtaskInformation?alt=com.microsoft.azure.batch.protocol.models.SubtaskInformation&text=SubtaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the stateTransitionTime value.</p>

    <p></p>
  syntax: public SubtaskInformation withStateTransitionTime(DateTime stateTransitionTime)
  uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation.withStateTransitionTime(DateTime)
nameWithType: SubtaskInformation
syntax: public class SubtaskInformation
type: class
uid: com.microsoft.azure.batch.protocol.models.SubtaskInformation
fullName: com.microsoft.azure.batch.protocol.models.SubtaskInformation
name: SubtaskInformation
package: com.microsoft.azure.batch.protocol.models
summary: <p>Information about an Azure Batch subtask. </p>
metadata: {}
