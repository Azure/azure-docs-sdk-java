### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.build()
  name: build()
  nameWithType: AsyncDocumentClient.Builder.build()
  returns:
    type: <xref href="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient?alt=com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient&text=AsyncDocumentClient" data-throw-if-not-resolved="False"/>
  syntax: public AsyncDocumentClient build()
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.build()
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getConfigs()
  name: getConfigs()
  nameWithType: AsyncDocumentClient.Builder.getConfigs()
  returns:
    type: <xref href="Configs?alt=Configs&text=Configs" data-throw-if-not-resolved="False"/>
  syntax: public Configs getConfigs()
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getConfigs()
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getConnectionPolicy()
  name: getConnectionPolicy()
  nameWithType: AsyncDocumentClient.Builder.getConnectionPolicy()
  returns:
    type: <xref href="com.microsoft.azure.cosmosdb.ConnectionPolicy?alt=com.microsoft.azure.cosmosdb.ConnectionPolicy&text=ConnectionPolicy" data-throw-if-not-resolved="False"/>
  syntax: public ConnectionPolicy getConnectionPolicy()
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getConnectionPolicy()
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getDesiredConsistencyLevel()
  name: getDesiredConsistencyLevel()
  nameWithType: AsyncDocumentClient.Builder.getDesiredConsistencyLevel()
  returns:
    type: <xref href="com.microsoft.azure.cosmosdb.ConsistencyLevel?alt=com.microsoft.azure.cosmosdb.ConsistencyLevel&text=ConsistencyLevel" data-throw-if-not-resolved="False"/>
  syntax: public ConsistencyLevel getDesiredConsistencyLevel()
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getDesiredConsistencyLevel()
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getMasterKeyOrResourceToken()
  name: getMasterKeyOrResourceToken()
  nameWithType: AsyncDocumentClient.Builder.getMasterKeyOrResourceToken()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getMasterKeyOrResourceToken()
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getMasterKeyOrResourceToken()
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getPermissionFeed()
  name: getPermissionFeed()
  nameWithType: AsyncDocumentClient.Builder.getPermissionFeed()
  returns:
    type: List&lt;<xref href="com.microsoft.azure.cosmosdb.Permission?alt=com.microsoft.azure.cosmosdb.Permission&text=Permission" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<Permission> getPermissionFeed()
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getPermissionFeed()
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getServiceEndpoint()
  name: getServiceEndpoint()
  nameWithType: AsyncDocumentClient.Builder.getServiceEndpoint()
  returns:
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  syntax: public URI getServiceEndpoint()
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getServiceEndpoint()
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getTokenResolver()
  name: getTokenResolver()
  nameWithType: AsyncDocumentClient.Builder.getTokenResolver()
  returns:
    type: <xref href="com.microsoft.azure.cosmosdb.TokenResolver?alt=com.microsoft.azure.cosmosdb.TokenResolver&text=TokenResolver" data-throw-if-not-resolved="False"/>
  syntax: public TokenResolver getTokenResolver()
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.getTokenResolver()
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setConfigs(Configs configs)
  name: setConfigs(Configs configs)
  nameWithType: AsyncDocumentClient.Builder.setConfigs(Configs configs)
  parameters:
  - name: configs
    type: <xref href="Configs?alt=Configs&text=Configs" data-throw-if-not-resolved="False"/>
  syntax: public void setConfigs(Configs configs)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setConfigs(Configs)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setConnectionPolicy(ConnectionPolicy connectionPolicy)
  name: setConnectionPolicy(ConnectionPolicy connectionPolicy)
  nameWithType: AsyncDocumentClient.Builder.setConnectionPolicy(ConnectionPolicy connectionPolicy)
  parameters:
  - name: connectionPolicy
    type: <xref href="com.microsoft.azure.cosmosdb.ConnectionPolicy?alt=com.microsoft.azure.cosmosdb.ConnectionPolicy&text=ConnectionPolicy" data-throw-if-not-resolved="False"/>
  syntax: public void setConnectionPolicy(ConnectionPolicy connectionPolicy)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setConnectionPolicy(ConnectionPolicy)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setDesiredConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)
  name: setDesiredConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)
  nameWithType: AsyncDocumentClient.Builder.setDesiredConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)
  parameters:
  - name: desiredConsistencyLevel
    type: <xref href="com.microsoft.azure.cosmosdb.ConsistencyLevel?alt=com.microsoft.azure.cosmosdb.ConsistencyLevel&text=ConsistencyLevel" data-throw-if-not-resolved="False"/>
  syntax: public void setDesiredConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setDesiredConsistencyLevel(ConsistencyLevel)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setMasterKeyOrResourceToken(String masterKeyOrResourceToken)
  name: setMasterKeyOrResourceToken(String masterKeyOrResourceToken)
  nameWithType: AsyncDocumentClient.Builder.setMasterKeyOrResourceToken(String masterKeyOrResourceToken)
  parameters:
  - name: masterKeyOrResourceToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void setMasterKeyOrResourceToken(String masterKeyOrResourceToken)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setMasterKeyOrResourceToken(String)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setPermissionFeed(List<Permission> permissionFeed)
  name: setPermissionFeed(List<Permission> permissionFeed)
  nameWithType: AsyncDocumentClient.Builder.setPermissionFeed(List<Permission> permissionFeed)
  parameters:
  - name: permissionFeed
    type: List&lt;<xref href="com.microsoft.azure.cosmosdb.Permission?alt=com.microsoft.azure.cosmosdb.Permission&text=Permission" data-throw-if-not-resolved="False"/>&gt;
  syntax: public void setPermissionFeed(List<Permission> permissionFeed)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setPermissionFeed(List<Permission>)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setServiceEndpoint(URI serviceEndpoint)
  name: setServiceEndpoint(URI serviceEndpoint)
  nameWithType: AsyncDocumentClient.Builder.setServiceEndpoint(URI serviceEndpoint)
  parameters:
  - name: serviceEndpoint
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  syntax: public void setServiceEndpoint(URI serviceEndpoint)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setServiceEndpoint(URI)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setTokenResolver(TokenResolver tokenResolver)
  name: setTokenResolver(TokenResolver tokenResolver)
  nameWithType: AsyncDocumentClient.Builder.setTokenResolver(TokenResolver tokenResolver)
  parameters:
  - name: tokenResolver
    type: <xref href="com.microsoft.azure.cosmosdb.TokenResolver?alt=com.microsoft.azure.cosmosdb.TokenResolver&text=TokenResolver" data-throw-if-not-resolved="False"/>
  syntax: public void setTokenResolver(TokenResolver tokenResolver)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.setTokenResolver(TokenResolver)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withConfigs(Configs configs)
  name: withConfigs(Configs configs)
  nameWithType: AsyncDocumentClient.Builder.withConfigs(Configs configs)
  parameters:
  - name: configs
    type: <xref href="Configs?alt=Configs&text=Configs" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder?alt=com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder&text=AsyncDocumentClient.Builder" data-throw-if-not-resolved="False"/>
  syntax: public Builder withConfigs(Configs configs)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withConfigs(Configs)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withConnectionPolicy(ConnectionPolicy connectionPolicy)
  name: withConnectionPolicy(ConnectionPolicy connectionPolicy)
  nameWithType: AsyncDocumentClient.Builder.withConnectionPolicy(ConnectionPolicy connectionPolicy)
  parameters:
  - name: connectionPolicy
    type: <xref href="com.microsoft.azure.cosmosdb.ConnectionPolicy?alt=com.microsoft.azure.cosmosdb.ConnectionPolicy&text=ConnectionPolicy" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder?alt=com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder&text=AsyncDocumentClient.Builder" data-throw-if-not-resolved="False"/>
  syntax: public Builder withConnectionPolicy(ConnectionPolicy connectionPolicy)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withConnectionPolicy(ConnectionPolicy)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)
  name: withConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)
  nameWithType: AsyncDocumentClient.Builder.withConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)
  parameters:
  - name: desiredConsistencyLevel
    type: <xref href="com.microsoft.azure.cosmosdb.ConsistencyLevel?alt=com.microsoft.azure.cosmosdb.ConsistencyLevel&text=ConsistencyLevel" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder?alt=com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder&text=AsyncDocumentClient.Builder" data-throw-if-not-resolved="False"/>
  syntax: public Builder withConsistencyLevel(ConsistencyLevel desiredConsistencyLevel)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withConsistencyLevel(ConsistencyLevel)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withMasterKey(String masterKeyOrResourceToken)
  name: withMasterKey(String masterKeyOrResourceToken)
  nameWithType: AsyncDocumentClient.Builder.withMasterKey(String masterKeyOrResourceToken)
  parameters:
  - description: <p>MasterKey or resourceToken for authentication. </p>
    name: masterKeyOrResourceToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>current Builder. </p>
    type: <xref href="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder?alt=com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder&text=AsyncDocumentClient.Builder" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>New method withMasterKeyOrResourceToken will take either master key or resource token and perform authentication for accessing resource.</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000017">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withMasterKeyOrResourceToken(String)" data-throw-if-not-resolved="false" data-raw-source="withMasterKeyOrResourceToken(String)"></xref> instead. </p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: public Builder withMasterKey(String masterKeyOrResourceToken)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withMasterKey(String)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withMasterKeyOrResourceToken(String masterKeyOrResourceToken)
  name: withMasterKeyOrResourceToken(String masterKeyOrResourceToken)
  nameWithType: AsyncDocumentClient.Builder.withMasterKeyOrResourceToken(String masterKeyOrResourceToken)
  parameters:
  - description: <p>MasterKey or resourceToken for authentication. </p>
    name: masterKeyOrResourceToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>current Builder. </p>
    type: <xref href="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder?alt=com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder&text=AsyncDocumentClient.Builder" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method will accept the master key , additionally it can also consume resource token too for authentication.</p>

    <p></p>
  syntax: public Builder withMasterKeyOrResourceToken(String masterKeyOrResourceToken)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withMasterKeyOrResourceToken(String)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withPermissionFeed(List<Permission> permissionFeed)
  name: withPermissionFeed(List<Permission> permissionFeed)
  nameWithType: AsyncDocumentClient.Builder.withPermissionFeed(List<Permission> permissionFeed)
  parameters:
  - description: <p>Permission list for authentication. </p>
    name: permissionFeed
    type: List&lt;<xref href="com.microsoft.azure.cosmosdb.Permission?alt=com.microsoft.azure.cosmosdb.Permission&text=Permission" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>current Builder. </p>
    type: <xref href="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder?alt=com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder&text=AsyncDocumentClient.Builder" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method will accept the permission list , which contains the resource tokens needed to access resources.</p>

    <p></p>
  syntax: public Builder withPermissionFeed(List<Permission> permissionFeed)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withPermissionFeed(List<Permission>)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withServiceEndpoint(String serviceEndpoint)
  name: withServiceEndpoint(String serviceEndpoint)
  nameWithType: AsyncDocumentClient.Builder.withServiceEndpoint(String serviceEndpoint)
  parameters:
  - name: serviceEndpoint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder?alt=com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder&text=AsyncDocumentClient.Builder" data-throw-if-not-resolved="False"/>
  syntax: public Builder withServiceEndpoint(String serviceEndpoint)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withServiceEndpoint(String)
- fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withTokenResolver(TokenResolver tokenResolver)
  name: withTokenResolver(TokenResolver tokenResolver)
  nameWithType: AsyncDocumentClient.Builder.withTokenResolver(TokenResolver tokenResolver)
  parameters:
  - description: <p>tokenResolver function for authentication. </p>
    name: tokenResolver
    type: <xref href="com.microsoft.azure.cosmosdb.TokenResolver?alt=com.microsoft.azure.cosmosdb.TokenResolver&text=TokenResolver" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>current Builder. This method will accept functional interface TokenResolver which helps in generation authorization token per request. AsyncDocumentClient can be successfully initialized with this API without passing any MasterKey, ResourceToken or PermissionFeed. </p>
    type: <xref href="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder?alt=com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder&text=AsyncDocumentClient.Builder" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method will accept tokenResolver which is rx function, it takes arguments<br />

     T1 requestVerb(String),<br />

     T2 resourceIdOrFullName(String),<br />

     T3 resourceType(com.microsoft.azure.cosmosdb.internal.ResourceType),<br />

     T4 request headers(Map&lt;String, String&gt;)<br /><br />

     and return<br />

     R authenticationToken(String)<br /></p>

    <p></p>
  syntax: public Builder withTokenResolver(TokenResolver tokenResolver)
  uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.withTokenResolver(TokenResolver)
nameWithType: AsyncDocumentClient.Builder
syntax: public class Builder
type: class
uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder
fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder
name: AsyncDocumentClient.Builder
package: com.microsoft.azure.cosmosdb.rx
summary: >-
  <p>Helper class to build <xref uid="com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient" data-throw-if-not-resolved="false" data-raw-source="AsyncDocumentClient"></xref> instances as logical representation of the Azure Cosmos DB database service.</p>

  <p>

    <pre>

      <code>ConnectionPolicy connectionPolicy = new ConnectionPolicy();

      connectionPolicy.setConnectionMode(ConnectionMode.Direct);

      AsyncDocumentClient client = new AsyncDocumentClient.Builder()

              .withServiceEndpoint(serviceEndpoint)

              .withMasterKeyOrResourceToken(masterKey)

              .withConnectionPolicy(connectionPolicy)

              .withConsistencyLevel(ConsistencyLevel.Session)

              .build();

      </code>

    </pre>

  </p>
metadata: {}
