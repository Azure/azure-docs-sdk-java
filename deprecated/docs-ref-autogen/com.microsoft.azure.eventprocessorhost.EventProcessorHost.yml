### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName)
  name: EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName)
  nameWithType: EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName)
  parameters:
  - description: <p>A name for this event processor host. See method notes. </p>
    name: hostName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the Event Hub to receive events from. </p>
    name: eventHubPath
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the consumer group to use when receiving from the Event Hub. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string for the Event Hub to receive from. </p>
    name: eventHubConnectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string for the Azure Storage account to use for persisting leases and checkpoints. </p>
    name: storageConnectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Azure Storage container name for use by built-in lease and checkpoint manager. </p>
    name: storageContainerName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new host instance to process events from an Event Hub. </p>

    <p>Since Event Hubs are generally used for scale-out, high-traffic scenarios, in most scenarios there will be only one host instances per process, and the processes will be run on separate machines. Besides scale, this also provides isolation: one process or machine crashing will not take out multiple host instances. However, it is supported to run multiple host instances on one machine, or even within one process, for development and testing. </p>

    <p>The hostName parameter is a name for this event processor host, which must be unique among all event processor host instances receiving from this event hub+consumer group combination: the unique name is used to distinguish which event processor host instance owns the lease for a given partition. An easy way to generate a unique hostName which also includes other information is to call EventProcessorHost.createHostName("mystring"). </p>

    <p>This overload of the constructor uses the built-in lease and checkpoint managers. The Azure Storage account specified by the storageConnectionString parameter is used by the built-in managers to record leases and checkpoints, in the specified container. </p>

    <p>The Event Hub connection string may be conveniently constructed using the ConnectionStringBuilder class from the Java Event Hub client.</p>

    <p></p>
  syntax: public EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String,final String,final String,final String,final String,final String)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final ScheduledExecutorService executorService)
  name: EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final ScheduledExecutorService executorService)
  nameWithType: EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final ScheduledExecutorService executorService)
  parameters:
  - description: <p>A name for this event processor host. See method notes. </p>
    name: hostName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the Event Hub to receive events from. </p>
    name: eventHubPath
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the consumer group to use when receiving from the Event Hub. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string for the Event Hub to receive from. </p>
    name: eventHubConnectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string for the Azure Storage account to use for persisting leases and checkpoints. </p>
    name: storageConnectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Azure Storage container name for use by built-in lease and checkpoint manager. </p>
    name: storageContainerName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>User-supplied thread executor, or null to use EventProcessorHost-internal executor. </p>
    name: executorService
    type: <xref href="final+ScheduledExecutorService?alt=final+ScheduledExecutorService&text=final+ScheduledExecutorService" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new host to process events from an Event Hub. </p>

    <p>This overload adds an argument to specify a user-provided thread pool. The number of partitions in the target event hub and the number of host instances should be considered when choosing the size of the thread pool: how many partitions is one instance expected to own under normal circumstances? One thread per partition should provide good performance, while being able to support more partitions adequately if a host instance fails and its partitions must be redistributed.</p>

    <p></p>
  syntax: public EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final ScheduledExecutorService executorService)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String,final String,final String,final String,final String,final String,final ScheduledExecutorService)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final String storageBlobPrefix)
  name: EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final String storageBlobPrefix)
  nameWithType: EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final String storageBlobPrefix)
  parameters:
  - description: <p>A name for this event processor host. See method notes. </p>
    name: hostName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the Event Hub to receive events from. </p>
    name: eventHubPath
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the consumer group to use when receiving from the Event Hub. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string for the Event Hub to receive from. </p>
    name: eventHubConnectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string for the Azure Storage account to use for persisting leases and checkpoints. </p>
    name: storageConnectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Azure Storage container name for use by built-in lease and checkpoint manager. </p>
    name: storageContainerName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Prefix used when naming blobs within the storage container. </p>
    name: storageBlobPrefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new host to process events from an Event Hub. </p>

    <p>This overload adds an argument to specify a prefix used by the built-in lease manager when naming blobs in Azure Storage.</p>

    <p></p>
  syntax: public EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final String storageBlobPrefix)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String,final String,final String,final String,final String,final String,final String)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final String storageBlobPrefix, final ScheduledExecutorService executorService)
  name: EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final String storageBlobPrefix, final ScheduledExecutorService executorService)
  nameWithType: EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final String storageBlobPrefix, final ScheduledExecutorService executorService)
  parameters:
  - description: <p>A name for this event processor host. See method notes. </p>
    name: hostName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the Event Hub to receive events from. </p>
    name: eventHubPath
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the consumer group to use when receiving from the Event Hub. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string for the Event Hub to receive from. </p>
    name: eventHubConnectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string for the Azure Storage account to use for persisting leases and checkpoints. </p>
    name: storageConnectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Azure Storage container name for use by built-in lease and checkpoint manager. </p>
    name: storageContainerName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Prefix used when naming blobs within the storage container. </p>
    name: storageBlobPrefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>User-supplied thread executor, or null to use EventProcessorHost-internal executor. </p>
    name: executorService
    type: <xref href="final+ScheduledExecutorService?alt=final+ScheduledExecutorService&text=final+ScheduledExecutorService" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new host to process events from an Event Hub. </p>

    <p>This overload allows the caller to specify both a user-supplied thread pool and a prefix used by the built-in lease manager when naming blobs in Azure Storage.</p>

    <p></p>
  syntax: public EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, final String storageConnectionString, final String storageContainerName, final String storageBlobPrefix, final ScheduledExecutorService executorService)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String,final String,final String,final String,final String,final String,final String,final ScheduledExecutorService)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, ICheckpointManager checkpointManager, ILeaseManager leaseManager)
  name: EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, ICheckpointManager checkpointManager, ILeaseManager leaseManager)
  nameWithType: EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, ICheckpointManager checkpointManager, ILeaseManager leaseManager)
  parameters:
  - description: <p>A name for this event processor host. See method notes. </p>
    name: hostName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the Event Hub to receive events from. </p>
    name: eventHubPath
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the consumer group to use when receiving from the Event Hub. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string for the Event Hub to receive from. </p>
    name: eventHubConnectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Implementation of ICheckpointManager, to be replacement checkpoint manager. </p>
    name: checkpointManager
    type: <xref href="com.microsoft.azure.eventprocessorhost.ICheckpointManager?alt=com.microsoft.azure.eventprocessorhost.ICheckpointManager&text=ICheckpointManager" data-throw-if-not-resolved="False"/>
  - description: <p>Implementation of ILeaseManager, to be replacement lease manager. </p>
    name: leaseManager
    type: <xref href="com.microsoft.azure.eventprocessorhost.ILeaseManager?alt=com.microsoft.azure.eventprocessorhost.ILeaseManager&text=ILeaseManager" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new host to process events from an Event Hub. </p>

    <p>This overload allows the caller to provide their own lease and checkpoint managers to replace the built-in ones based on Azure Storage.</p>

    <p></p>
  syntax: public EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, ICheckpointManager checkpointManager, ILeaseManager leaseManager)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String,final String,final String,final String,ICheckpointManager,ILeaseManager)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, ICheckpointManager checkpointManager, ILeaseManager leaseManager, ScheduledExecutorService executorService, RetryPolicy retryPolicy)
  name: EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, ICheckpointManager checkpointManager, ILeaseManager leaseManager, ScheduledExecutorService executorService, RetryPolicy retryPolicy)
  nameWithType: EventProcessorHost.EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, ICheckpointManager checkpointManager, ILeaseManager leaseManager, ScheduledExecutorService executorService, RetryPolicy retryPolicy)
  parameters:
  - description: <p>A name for this event processor host. See method notes. </p>
    name: hostName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the Event Hub to receive events from. </p>
    name: eventHubPath
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the consumer group to use when receiving from the Event Hub. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string for the Event Hub to receive from. </p>
    name: eventHubConnectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Implementation of ICheckpointManager, to be replacement checkpoint manager. </p>
    name: checkpointManager
    type: <xref href="com.microsoft.azure.eventprocessorhost.ICheckpointManager?alt=com.microsoft.azure.eventprocessorhost.ICheckpointManager&text=ICheckpointManager" data-throw-if-not-resolved="False"/>
  - description: <p>Implementation of ILeaseManager, to be replacement lease manager. </p>
    name: leaseManager
    type: <xref href="com.microsoft.azure.eventprocessorhost.ILeaseManager?alt=com.microsoft.azure.eventprocessorhost.ILeaseManager&text=ILeaseManager" data-throw-if-not-resolved="False"/>
  - description: <p>User-supplied thread executor, or null to use EventProcessorHost-internal executor. </p>
    name: executorService
    type: <xref href="ScheduledExecutorService?alt=ScheduledExecutorService&text=ScheduledExecutorService" data-throw-if-not-resolved="False"/>
  - description: <p>Retry policy governing communications with the event hub. </p>
    name: retryPolicy
    type: <xref href="com.microsoft.azure.eventhubs.RetryPolicy?alt=com.microsoft.azure.eventhubs.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new host to process events from an Event Hub. </p>

    <p>This overload allows the caller to provide their own lease and checkpoint managers to replace the built-in ones based on Azure Storage, and to provide an executor service and a retry policy for communications with the event hub.</p>

    <p></p>
  syntax: public EventProcessorHost(final String hostName, final String eventHubPath, final String consumerGroupName, final String eventHubConnectionString, ICheckpointManager checkpointManager, ILeaseManager leaseManager, ScheduledExecutorService executorService, RetryPolicy retryPolicy)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.EventProcessorHost(final String,final String,final String,final String,ICheckpointManager,ILeaseManager,ScheduledExecutorService,RetryPolicy)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.createHostName(String prefix)
  name: createHostName(String prefix)
  nameWithType: EventProcessorHost.createHostName(String prefix)
  parameters:
  - description: <p>String to use as the beginning of the name. If null or empty, a default is used. </p>
    name: prefix
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A unique host name to pass to EventProcessorHost constructors. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Convenience method for generating unique host names, safe to pass to the EventProcessorHost constructors that take a hostName argument. </p>

    <p>If a prefix is supplied, the constructed name begins with that string. If the prefix argument is null or an empty string, the constructed name begins with "javahost". Then a dash '-' and a UUID are appended to create a unique name.</p>

    <p></p>
  syntax: public static String createHostName(String prefix)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.createHostName(String)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.getHostName()
  name: getHostName()
  nameWithType: EventProcessorHost.getHostName()
  returns:
    description: <p>The processor host name </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The processor host name is supplied by the user at constructor time, but being able to get it is useful because it means not having to carry both the host object and the name around. As long as you have the host object, you can get the name back, such as for logging.</p>

    <p></p>
  syntax: public String getHostName()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.getHostName()
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.getPartitionManagerOptions()
  name: getPartitionManagerOptions()
  nameWithType: EventProcessorHost.getPartitionManagerOptions()
  returns:
    description: <p>the internally-created PartitionManangerObjects object or any replacement object set with setPartitionManangerOptions </p>
    type: <xref href="com.microsoft.azure.eventprocessorhost.PartitionManagerOptions?alt=com.microsoft.azure.eventprocessorhost.PartitionManagerOptions&text=PartitionManagerOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the existing partition manager options object. Unless you are providing implementations of ILeaseManager and ICheckpointMananger, to change partition manager options, call this method to get the existing object and call setters on it to adjust the values.</p>

    <p></p>
  syntax: public PartitionManagerOptions getPartitionManagerOptions()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.getPartitionManagerOptions()
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessor(Class<T> eventProcessorType)
  name: registerEventProcessor(Class<T> eventProcessorType)
  nameWithType: EventProcessorHost.registerEventProcessor(Class<T> eventProcessorType)
  parameters:
  - description: <p>Class that implements IEventProcessor. </p>
    name: eventProcessorType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Future that completes when initialization is finished. </p>
    type: '&lt;T extends <xref href="com.microsoft.azure.eventprocessorhost.IEventProcessor?alt=com.microsoft.azure.eventprocessorhost.IEventProcessor&text=IEventProcessor" data-throw-if-not-resolved="False"/>&gt; CompletableFuture&lt;Void&gt;'
  summary: >-
    <p>Register class for event processor and start processing. </p>

    <p>This overload uses the default event processor factory, which simply creates new instances of the registered event processor class, and uses all the default options. </p>

    <p>The returned CompletableFuture completes when host initialization is finished. Initialization failures are reported by completing the future with an exception, so it is important to call get() on the future and handle any exceptions thrown. <pre>

    class MyEventProcessor implements IEventProcessor { ... }

    EventProcessorHost host = new EventProcessorHost(...);

    { CompletableFuture&lt;Void&gt;} foo = host.registerEventProcessor(MyEventProcessor.class);

    foo.get();

    </pre></p>

    <p></p>
  syntax: public <T extends IEventProcessor> CompletableFuture<Void> registerEventProcessor(Class<T> eventProcessorType)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessor(Class<T>)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessor(Class<T> eventProcessorType, EventProcessorOptions processorOptions)
  name: registerEventProcessor(Class<T> eventProcessorType, EventProcessorOptions processorOptions)
  nameWithType: EventProcessorHost.registerEventProcessor(Class<T> eventProcessorType, EventProcessorOptions processorOptions)
  parameters:
  - description: <p>Class that implements IEventProcessor. </p>
    name: eventProcessorType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Options for the processor host and event processor(s). </p>
    name: processorOptions
    type: <xref href="com.microsoft.azure.eventprocessorhost.EventProcessorOptions?alt=com.microsoft.azure.eventprocessorhost.EventProcessorOptions&text=EventProcessorOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Future that completes when initialization is finished. </p>
    type: '&lt;T extends <xref href="com.microsoft.azure.eventprocessorhost.IEventProcessor?alt=com.microsoft.azure.eventprocessorhost.IEventProcessor&text=IEventProcessor" data-throw-if-not-resolved="False"/>&gt; CompletableFuture&lt;Void&gt;'
  summary: >-
    <p>Register class for event processor and start processing. </p>

    <p>This overload uses the default event processor factory, which simply creates new instances of the registered event processor class, but takes user-specified options. </p>

    <p>The returned CompletableFuture completes when host initialization is finished. Initialization failures are reported by completing the future with an exception, so it is important to call get() on the future and handle any exceptions thrown.</p>

    <p></p>
  syntax: public <T extends IEventProcessor> CompletableFuture<Void> registerEventProcessor(Class<T> eventProcessorType, EventProcessorOptions processorOptions)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessor(Class<T>,EventProcessorOptions)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessorFactory(IEventProcessorFactory<?> factory)
  name: registerEventProcessorFactory(IEventProcessorFactory<?> factory)
  nameWithType: EventProcessorHost.registerEventProcessorFactory(IEventProcessorFactory<?> factory)
  parameters:
  - description: <p>User-supplied event processor factory object. </p>
    name: factory
    type: <xref href="com.microsoft.azure.eventprocessorhost.IEventProcessorFactory?alt=com.microsoft.azure.eventprocessorhost.IEventProcessorFactory&text=IEventProcessorFactory" data-throw-if-not-resolved="False"/>&lt;?&gt;
  returns:
    description: <p>Future that completes when initialization is finished. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Register a user-supplied event processor factory and start processing. </p>

    <p>If creating a new event processor requires more work than just new'ing an objects, the user must create an object that implements IEventProcessorFactory and pass it to this method, instead of calling registerEventProcessor. </p>

    <p>This overload uses default options for the processor host and event processor(s). </p>

    <p>The returned CompletableFuture completes when host initialization is finished. Initialization failures are reported by completing the future with an exception, so it is important to call get() on the future and handle any exceptions thrown.</p>

    <p></p>
  syntax: public CompletableFuture<Void> registerEventProcessorFactory(IEventProcessorFactory<?> factory)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessorFactory(IEventProcessorFactory<?>)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessorFactory(IEventProcessorFactory<?> factory, EventProcessorOptions processorOptions)
  name: registerEventProcessorFactory(IEventProcessorFactory<?> factory, EventProcessorOptions processorOptions)
  nameWithType: EventProcessorHost.registerEventProcessorFactory(IEventProcessorFactory<?> factory, EventProcessorOptions processorOptions)
  parameters:
  - description: <p>User-supplied event processor factory object. </p>
    name: factory
    type: <xref href="com.microsoft.azure.eventprocessorhost.IEventProcessorFactory?alt=com.microsoft.azure.eventprocessorhost.IEventProcessorFactory&text=IEventProcessorFactory" data-throw-if-not-resolved="False"/>&lt;?&gt;
  - description: <p>Options for the processor host and event processor(s). </p>
    name: processorOptions
    type: <xref href="com.microsoft.azure.eventprocessorhost.EventProcessorOptions?alt=com.microsoft.azure.eventprocessorhost.EventProcessorOptions&text=EventProcessorOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Future that completes when initialization is finished. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Register user-supplied event processor factory and start processing. </p>

    <p>This overload takes user-specified options. </p>

    <p>The returned CompletableFuture completes when host initialization is finished. Initialization failures are reported by completing the future with an exception, so it is important to call get() on the future and handle any exceptions thrown.</p>

    <p></p>
  syntax: public CompletableFuture<Void> registerEventProcessorFactory(IEventProcessorFactory<?> factory, EventProcessorOptions processorOptions)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessorFactory(IEventProcessorFactory<?>,EventProcessorOptions)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.safeCreateUUID()
  name: safeCreateUUID()
  nameWithType: EventProcessorHost.safeCreateUUID()
  returns:
    description: <p>A string UUID with dashes but no curly brackets. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronized string UUID generation convenience method. </p>

    <p>We saw null and empty strings returned from UUID.randomUUID().toString() when used from multiple threads and there is no clear answer on the net about whether it is really thread-safe or not. </p>

    <p>One of the major users of UUIDs is the built-in lease and checkpoint manager, which can be replaced by user implementations. This UUID generation method is public so user implementations can use it as well and avoid the problems.</p>

    <p></p>
  syntax: public static String safeCreateUUID()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.safeCreateUUID()
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.setPartitionManagerOptions(PartitionManagerOptions options)
  name: setPartitionManagerOptions(PartitionManagerOptions options)
  nameWithType: EventProcessorHost.setPartitionManagerOptions(PartitionManagerOptions options)
  parameters:
  - description: <p>- a PartitionManangerOptions object (or derived object) representing the desired options </p>
    name: options
    type: <xref href="com.microsoft.azure.eventprocessorhost.PartitionManagerOptions?alt=com.microsoft.azure.eventprocessorhost.PartitionManagerOptions&text=PartitionManagerOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the partition manager options all at once. Normally this method is used only when providing user implementations of ILeaseManager and ICheckpointManager, because it allows passing an object of a class derived from PartitionManagerOptions, which could contain options specific to the user-implemented ILeaseManager or ICheckpointMananger. When using the default, Azure Storage-based implementation, the recommendation is to call getPartitionManangerOptions to return the existing options object, then call setters on that object to adjust the values.</p>

    <p></p>
  syntax: public void setPartitionManagerOptions(PartitionManagerOptions options)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.setPartitionManagerOptions(PartitionManagerOptions)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.unregisterEventProcessor()
  name: unregisterEventProcessor()
  nameWithType: EventProcessorHost.unregisterEventProcessor()
  returns:
    description: <p>A CompletableFuture that completes when shutdown is finished. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stop processing events and shut down this host instance.</p>

    <p></p>
  syntax: public CompletableFuture<Void> unregisterEventProcessor()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.unregisterEventProcessor()
nameWithType: EventProcessorHost
syntax: public class EventProcessorHost
type: class
uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost
fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
name: EventProcessorHost
package: com.microsoft.azure.eventprocessorhost
metadata: {}
