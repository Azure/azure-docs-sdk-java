### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.TableQuery()
  name: TableQuery()
  nameWithType: TableQuery<T>.TableQuery()
  summary: <p>Initializes an empty <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance. This table query cannot be executed without setting a table entity type. </p>
  syntax: public TableQuery()
  uid: com.microsoft.azure.storage.table.TableQuery.TableQuery()
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.TableQuery(final Class<T> clazzType)
  name: TableQuery(final Class<T> clazzType)
  nameWithType: TableQuery<T>.TableQuery(final Class<T> clazzType)
  parameters:
  - description: <p>The <code>java.lang.Class</code> of the class <code>T</code> that represents the table entity type for the query. Class <code>T</code> must be a type that implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> and has a nullary constructor. </p>
    name: clazzType
    type: <xref href="final+Class%3CT%3E?alt=final+Class%3CT%3E&text=final+Class%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> with the specified table entity type. Callers may specify <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> as the class type parameter if no more specialized type is required.</p>

    <p></p>
  syntax: public TableQuery(final Class<T> clazzType)
  uid: com.microsoft.azure.storage.table.TableQuery.TableQuery(final Class<T>)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.combineFilters(String filterA, String operator, String filterB)
  name: combineFilters(String filterA, String operator, String filterB)
  nameWithType: TableQuery<T>.combineFilters(String filterA, String operator, String filterB)
  parameters:
  - description: <p>A <code>String</code> which specifies the first formatted filter condition. </p>
    name: filterA
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies <code>Operators.AND</code> or <code>Operators.OR</code>. </p>
    name: operator
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the first formatted filter condition. </p>
    name: filterB
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the combined filter expression. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a filter condition using the specified logical operator on two filter conditions.</p>

    <p></p>
  syntax: public static String combineFilters(String filterA, String operator, String filterB)
  uid: com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.from(final Class<T> clazzType)
  name: from(final Class<T> clazzType)
  nameWithType: TableQuery<T>.from(final Class<T> clazzType)
  parameters:
  - description: <p>The <code>java.lang.Class</code> of the class <code>T</code> implementing the <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> interface that represents the table entity type for the query.</p>
    name: clazzType
    type: <xref href="final+Class%3CT%3E?alt=final+Class%3CT%3E&text=final+Class%3CT%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance with the entity type specialization set. </p>
    type: static&lt;T extends <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>&gt; <xref href="com.microsoft.azure.storage.table.TableQuery?alt=com.microsoft.azure.storage.table.TableQuery&text=TableQuery" data-throw-if-not-resolved="False"/>&lt;T&gt;
  summary: >-
    <p>A static factory method that constructs a <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance and defines its table entity type. The method returns the <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance reference, allowing additional methods to be chained to modify the query. </p>

    <p>The created <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance is specialized for table entities of the specified class type T. Callers may specify <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> as the class type parameter if no more specialized type is required.</p>

    <p></p>
  syntax: public static static<T extends TableEntity> TableQuery<T> from(final Class<T> clazzType)
  uid: com.microsoft.azure.storage.table.TableQuery.from(final Class<T>)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final boolean value)
  name: generateFilterCondition(String propertyName, String operation, final boolean value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final boolean value)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    name: operation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>boolean</code> which specifies the value to compare with the property. </p>
    name: value
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the formatted filter condition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a boolean, as in the following example: </p>

    <p></p>

    <p>This statement sets  to the following value: </p>

    <p></p>

    <p></p>
  syntax: public static String generateFilterCondition(String propertyName, String operation, final boolean value)
  uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final byte[] value)
  name: generateFilterCondition(String propertyName, String operation, final byte[] value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final byte[] value)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    name: operation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>byte</code> array which specifies the value to compare with the property. </p>
    name: value
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the formatted filter condition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a binary value, as in the following example: </p>

    <p></p>

    <p>This statement sets  to the following value: </p>

    <p></p>

    <p></p>
  syntax: public static String generateFilterCondition(String propertyName, String operation, final byte[] value)
  uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final byte [])
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final Byte[] value)
  name: generateFilterCondition(String propertyName, String operation, final Byte[] value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final Byte[] value)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    name: operation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>Byte</code> array which specifies the value to compare with the property. </p>
    name: value
    type: <xref href="final+Byte+%5B%5D?alt=final+Byte+%5B%5D&text=final+Byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the formatted filter condition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a binary value, as in the following example: </p>

    <p></p>

    <p>This statement sets  to the following value: </p>

    <p></p>

    <p></p>
  syntax: public static String generateFilterCondition(String propertyName, String operation, final Byte[] value)
  uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final Byte [])
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final Date value)
  name: generateFilterCondition(String propertyName, String operation, final Date value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final Date value)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    name: operation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>java.util.Date</code> which specifies the value to compare with the property. </p>
    name: value
    type: <xref href="final+Date?alt=final+Date&text=final+Date" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the formatted filter condition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a datetime value, as in the following example: </p>

    <p></p>

    <p>This statement sets  to something like the following value: </p>

    <p></p>

    <p></p>
  syntax: public static String generateFilterCondition(String propertyName, String operation, final Date value)
  uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final Date)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final double value)
  name: generateFilterCondition(String propertyName, String operation, final double value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final double value)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    name: operation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>double</code> which specifies the value to compare with the property. </p>
    name: value
    type: <xref href="final+double?alt=final+double&text=final+double" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the formatted filter condition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a double value, as in the following example: </p>

    <p></p>

    <p>This statement sets  to the following value: </p>

    <p></p>

    <p></p>
  syntax: public static String generateFilterCondition(String propertyName, String operation, final double value)
  uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final double)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final int value)
  name: generateFilterCondition(String propertyName, String operation, final int value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final int value)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    name: operation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which specifies the value to compare with the property. </p>
    name: value
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the formatted filter condition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a property filter condition string for an  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a numeric value, as in the following example: </p>

    <p></p>

    <p>This statement sets  to the following value: </p>

    <p></p>

    <p></p>
  syntax: public static String generateFilterCondition(String propertyName, String operation, final int value)
  uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final int)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final long value)
  name: generateFilterCondition(String propertyName, String operation, final long value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final long value)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    name: operation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which specifies the value to compare with the property. </p>
    name: value
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the formatted filter condition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a numeric value, as in the following example: </p>

    <p></p>

    <p>This statement sets  to the following value: </p>

    <p></p>

    <p></p>
  syntax: public static String generateFilterCondition(String propertyName, String operation, final long value)
  uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final long)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final String value)
  name: generateFilterCondition(String propertyName, String operation, final String value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final String value)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    name: operation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the value to compare with the property. </p>
    name: value
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the formatted filter condition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a string value, as in the following example: </p>

    <p></p>

    <p>This statement sets  to the following value: </p>

    <p></p>

    <p></p>
  syntax: public static String generateFilterCondition(String propertyName, String operation, final String value)
  uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final String)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final UUID value)
  name: generateFilterCondition(String propertyName, String operation, final UUID value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final UUID value)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    name: operation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>UUID</code> which specifies the value to compare with the property. </p>
    name: value
    type: <xref href="final+UUID?alt=final+UUID&text=final+UUID" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the formatted filter condition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a UUID value, as in the following example: </p>

    <p></p>

    <p>This statement sets  to the following value: </p>

    <p></p>

    <p></p>
  syntax: public static String generateFilterCondition(String propertyName, String operation, final UUID value)
  uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final UUID)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)
  name: generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    name: operation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which specifies the value to compare with the property. </p>
    name: value
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.EdmType" data-throw-if-not-resolved="false" data-raw-source="EdmType"></xref> to format the value as. </p>
    name: edmType
    type: <xref href="com.microsoft.azure.storage.table.EdmType?alt=com.microsoft.azure.storage.table.EdmType&text=EdmType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the formatted filter condition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a property filter condition string. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as the specified <xref uid="com.microsoft.azure.storage.table.EdmType" data-throw-if-not-resolved="false" data-raw-source="EdmType"></xref>.</p>

    <p></p>
  syntax: public static String generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)
  uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,String,EdmType)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateQueryBuilder()
  name: generateQueryBuilder()
  nameWithType: TableQuery<T>.generateQueryBuilder()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>if an error occurs in adding or encoding the query parameters. </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="UriQueryBuilder"></xref> object representing the table query.</p>
    type: <xref href="com.microsoft.azure.storage.core.UriQueryBuilder?alt=com.microsoft.azure.storage.core.UriQueryBuilder&text=UriQueryBuilder" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reserved for internal use. Creates a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="UriQueryBuilder"></xref> object representing the table query.</p>

    <p></p>
  syntax: protected UriQueryBuilder generateQueryBuilder()
  uid: com.microsoft.azure.storage.table.TableQuery.generateQueryBuilder()
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getClazzType()
  name: getClazzType()
  nameWithType: TableQuery<T>.getClazzType()
  returns:
    description: <p>The <code>java.lang.Class</code> of the class <code>T</code> that represents the table entity type for the query. </p>
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the class type of the table entities returned by the query.</p>

    <p></p>
  syntax: public Class<T> getClazzType()
  uid: com.microsoft.azure.storage.table.TableQuery.getClazzType()
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getColumns()
  name: getColumns()
  nameWithType: TableQuery<T>.getColumns()
  returns:
    description: <p>An array of <code>String</code> objects which represents the property names of the table entity properties to return in the query. </p>
    type: <xref href="String+%5B%5D?alt=String+%5B%5D&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets an array of the table entity property names specified in the table query. All properties in the table are returned by default if no property names are specified with a select clause in the table query. The table entity properties to return may be specified with a call to the <xref uid="com.microsoft.azure.storage.table.TableQuery.setColumns(final String [])" data-throw-if-not-resolved="false" data-raw-source="setColumns"></xref> or <xref uid="com.microsoft.azure.storage.table.TableQuery.select(final String [])" data-throw-if-not-resolved="false" data-raw-source="select"></xref> methods with a array of property names as parameter. </p>

    <p>Note that the system properties , , and  are automatically requested from the table service whether specified in the <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> or not.</p>

    <p></p>
  syntax: public String [] getColumns()
  uid: com.microsoft.azure.storage.table.TableQuery.getColumns()
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getFilterString()
  name: getFilterString()
  nameWithType: TableQuery<T>.getFilterString()
  returns:
    description: <p>A <code>String</code> which represents the filter expression used in the query. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the filter expression specified in the table query. All entities in the table are returned by default if no filter expression is specified in the table query. A filter for the entities to return may be specified with a call to the <xref uid="com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)" data-throw-if-not-resolved="false" data-raw-source="setFilterString"></xref> or <xref uid="com.microsoft.azure.storage.table.TableQuery.where(final String)" data-throw-if-not-resolved="false" data-raw-source="where"></xref> methods.</p>

    <p></p>
  syntax: public String getFilterString()
  uid: com.microsoft.azure.storage.table.TableQuery.getFilterString()
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getSourceTableName()
  name: getSourceTableName()
  nameWithType: TableQuery<T>.getSourceTableName()
  returns:
    description: <p>A <code>String</code> which represents the name of the source table used in the query. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the source table specified in the table query.</p>

    <p></p>
  syntax: protected String getSourceTableName()
  uid: com.microsoft.azure.storage.table.TableQuery.getSourceTableName()
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getTakeCount()
  name: getTakeCount()
  nameWithType: TableQuery<T>.getTakeCount()
  returns:
    description: <p>An <code>Integer</code> which represents the maximum number of entities for the table query to return. </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of entities the query returns specified in the table query. If this value is not specified in a table query, a maximum of 1,000 entries will be returned. The number of entities to return may be specified with a call to the <xref uid="com.microsoft.azure.storage.table.TableQuery.setTakeCount(final Integer)" data-throw-if-not-resolved="false" data-raw-source="setTakeCount"></xref> or <xref uid="com.microsoft.azure.storage.table.TableQuery.take(final Integer)" data-throw-if-not-resolved="false" data-raw-source="take"></xref> methods. </p>

    <p>If the value returned by  is greater than 1,000, the query will throw a <xref uid="com.microsoft.azure.storage.StorageException" data-throw-if-not-resolved="false" data-raw-source="StorageException"></xref> when executed.</p>

    <p></p>
  syntax: public Integer getTakeCount()
  uid: com.microsoft.azure.storage.table.TableQuery.getTakeCount()
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.select(final String[] columns)
  name: select(final String[] columns)
  nameWithType: TableQuery<T>.select(final String[] columns)
  parameters:
  - description: <p>An array of <code>String</code> objects which specify the property names of the table entity properties to return when the query is executed.</p>
    name: columns
    type: <xref href="final+String+%5B%5D?alt=final+String+%5B%5D&text=final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A reference to the <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance with the table entity properties to return set. </p>
    type: <xref href="com.microsoft.azure.storage.table.TableQuery?alt=com.microsoft.azure.storage.table.TableQuery&text=TableQuery" data-throw-if-not-resolved="False"/>&lt;T&gt;
  summary: >-
    <p>Defines the property names of the table entity properties to return when the table query is executed. The  clause is optional on a table query, used to limit the table properties returned from the server. By default, a query will return all properties from the table entity. </p>

    <p>Note that the system properties , , and  are automatically requested from the table service whether specified in the <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> or not.</p>

    <p></p>
  syntax: public TableQuery<T> select(final String[] columns)
  uid: com.microsoft.azure.storage.table.TableQuery.select(final String [])
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setClazzType(final Class<T> clazzType)
  name: setClazzType(final Class<T> clazzType)
  nameWithType: TableQuery<T>.setClazzType(final Class<T> clazzType)
  parameters:
  - description: <p>The <code>java.lang.Class</code> of the class <code>T</code> that represents the table entity type for the query. Class <code>T</code> must be a type that implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> and has a nullary constructor, </p>
    name: clazzType
    type: <xref href="final+Class%3CT%3E?alt=final+Class%3CT%3E&text=final+Class%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the class type of the table entities returned by the query. A class type is required to execute a table query. </p>

    <p>Callers may specify <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> as the class type parameter if no more specialized type is required.</p>

    <p></p>
  syntax: public void setClazzType(final Class<T> clazzType)
  uid: com.microsoft.azure.storage.table.TableQuery.setClazzType(final Class<T>)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setColumns(final String[] columns)
  name: setColumns(final String[] columns)
  nameWithType: TableQuery<T>.setColumns(final String[] columns)
  parameters:
  - description: <p>An array of <code>String</code> objects which specify the property names of the table entity properties to return when the query is executed. </p>
    name: columns
    type: <xref href="final+String+%5B%5D?alt=final+String+%5B%5D&text=final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the property names of the table entity properties to return when the table query is executed. By default, a query will return all properties from the table entity. </p>

    <p>Note that the system properties , , and  are automatically requested from the table service whether specified in the <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> or not.</p>

    <p></p>
  syntax: public void setColumns(final String[] columns)
  uid: com.microsoft.azure.storage.table.TableQuery.setColumns(final String [])
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setFilterString(final String filterString)
  name: setFilterString(final String filterString)
  nameWithType: TableQuery<T>.setFilterString(final String filterString)
  parameters:
  - description: <p>A <code>String</code> which represents the filter expression to use in the query. </p>
    name: filterString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the filter expression to use in the table query. A filter expression is optional; by default a table query will return all entities in the table. </p>

    <p>Filter expressions for use with the <xref uid="com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)" data-throw-if-not-resolved="false" data-raw-source="setFilterString"></xref> method can be created using fluent syntax with the overloaded <xref uid="com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)" data-throw-if-not-resolved="false" data-raw-source="generateFilterCondition"></xref> methods and <xref uid="com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)" data-throw-if-not-resolved="false" data-raw-source="combineFilters"></xref> method, using the comparison operators defined in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QueryComparisons"></xref> and the logical operators defined in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Operators"></xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are  types for comparison purposes. For example, to query all entities with a PartitionKey value of "AccessLogs" on table query : </p>

    <p></p>

    <p>The values that may be used in table queries are explained in more detail in the MSDN topic</p>

    <p>

      <a href="http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx">Querying Tables and Entities</a>, but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed. </p>

    <p>Note that no more than 15 discrete comparisons are permitted within a filter string.</p>

    <p></p>
  syntax: public void setFilterString(final String filterString)
  uid: com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setSourceTableName(final String sourceTableName)
  name: setSourceTableName(final String sourceTableName)
  nameWithType: TableQuery<T>.setSourceTableName(final String sourceTableName)
  parameters:
  - description: <p>A <code>String</code> which specifies the name of the source table to use in the query. </p>
    name: sourceTableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the name of the source table for the table query. A table query must have a source table to be executed.</p>

    <p></p>
  syntax: protected void setSourceTableName(final String sourceTableName)
  uid: com.microsoft.azure.storage.table.TableQuery.setSourceTableName(final String)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setTakeCount(final Integer takeCount)
  name: setTakeCount(final Integer takeCount)
  nameWithType: TableQuery<T>.setTakeCount(final Integer takeCount)
  parameters:
  - description: <p>An <code>Integer</code> which represents the maximum number of entities for the table query to return. </p>
    name: takeCount
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the upper bound for the number of entities the query returns. If this value is not specified in a table query, by default a maximum of 1,000 entries will be returned. </p>

    <p>If the value specified for the  parameter is greater than 1,000, the query will throw a <xref uid="com.microsoft.azure.storage.StorageException" data-throw-if-not-resolved="false" data-raw-source="StorageException"></xref> when executed.</p>

    <p></p>
  syntax: public void setTakeCount(final Integer takeCount)
  uid: com.microsoft.azure.storage.table.TableQuery.setTakeCount(final Integer)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.take(final Integer take)
  name: take(final Integer take)
  nameWithType: TableQuery<T>.take(final Integer take)
  parameters:
  - description: <p>An <code>Integer</code> which represents the maximum number of entities for the table query to return.</p>
    name: take
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A reference to the <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance with the number of entities to return set. </p>
    type: <xref href="com.microsoft.azure.storage.table.TableQuery?alt=com.microsoft.azure.storage.table.TableQuery&text=TableQuery" data-throw-if-not-resolved="False"/>&lt;T&gt;
  summary: >-
    <p>Defines the upper bound for the number of entities the query returns. If this value is not specified in a table query, by default a maximum of 1,000 entries will be returned. </p>

    <p>If the value specified for the  parameter is greater than 1,000, the query will throw a <xref uid="com.microsoft.azure.storage.StorageException" data-throw-if-not-resolved="false" data-raw-source="StorageException"></xref> when executed.</p>

    <p></p>
  syntax: public TableQuery<T> take(final Integer take)
  uid: com.microsoft.azure.storage.table.TableQuery.take(final Integer)
- fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.where(final String filter)
  name: where(final String filter)
  nameWithType: TableQuery<T>.where(final String filter)
  parameters:
  - description: <p>A <code>String</code> which specifies the filter expression to apply to the table query. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A reference to the <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance with the filter on entities to return set. </p>
    type: <xref href="com.microsoft.azure.storage.table.TableQuery?alt=com.microsoft.azure.storage.table.TableQuery&text=TableQuery" data-throw-if-not-resolved="False"/>&lt;T&gt;
  summary: >-
    <p>Defines a filter expression for the table query. Only entities that satisfy the specified filter expression will be returned by the query. Setting a filter expression is optional; by default, all entities in the table are returned if no filter expression is specified in the table query. </p>

    <p>Filter expressions for use with the <xref uid="com.microsoft.azure.storage.table.TableQuery.where(final String)" data-throw-if-not-resolved="false" data-raw-source="where"></xref> method can be created using fluent syntax with the overloaded <xref uid="com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)" data-throw-if-not-resolved="false" data-raw-source="generateFilterCondition"></xref> methods and <xref uid="com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)" data-throw-if-not-resolved="false" data-raw-source="combineFilters"></xref> method, using the comparison operators defined in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QueryComparisons"></xref> and the logical operators defined in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Operators"></xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are  types for comparison purposes. For example, to query all entities with a PartitionKey value of "AccessLogs" on table query : </p>

    <p></p>

    <p>The values that may be used in table queries are explained in more detail in the MSDN topic</p>

    <p>

      <a href="http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx">Querying Tables and Entities</a>, but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed. </p>

    <p>Note that no more than 15 discrete comparisons are permitted within a filter string.</p>

    <p></p>
  syntax: public TableQuery<T> where(final String filter)
  uid: com.microsoft.azure.storage.table.TableQuery.where(final String)
nameWithType: TableQuery<T>
syntax: public class TableQuery<T extends TableEntity>
type: class
typeParameters:
- description: '<p>A class type which implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> and contains a nullary constructor. Note: when using an inner class to define the class type, mark the class as static. </p>'
  name: T
uid: com.microsoft.azure.storage.table.TableQuery
fullName: com.microsoft.azure.storage.table.TableQuery<T>
name: TableQuery<T>
package: com.microsoft.azure.storage.table
summary: >-
  <p>A class which represents a query against a specified table. A <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance aggregates the query parameters to use when the query is executed. One of the  or  methods of <xref uid="com.microsoft.azure.storage.table.CloudTableClient" data-throw-if-not-resolved="false" data-raw-source="CloudTableClient"></xref> must be called to execute the query. The parameters are encoded and passed to the server when the table query is executed. </p>

  <p>To create a table query with fluent syntax, the <xref uid="com.microsoft.azure.storage.table.TableQuery.from(final Class&lt;T&gt;)" data-throw-if-not-resolved="false" data-raw-source="from"></xref> static factory method and the <xref uid="com.microsoft.azure.storage.table.TableQuery.where(final String)" data-throw-if-not-resolved="false" data-raw-source="where"></xref>, <xref uid="com.microsoft.azure.storage.table.TableQuery.select(final String [])" data-throw-if-not-resolved="false" data-raw-source="select"></xref>, and <xref uid="com.microsoft.azure.storage.table.TableQuery.take(final Integer)" data-throw-if-not-resolved="false" data-raw-source="take"></xref> mutator methods each return a reference to the object which can be chained into a single expression. Use the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="from(Class)"></xref> static class factory method to create a  instance that executes on the named table with entities of the specified <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> implementing type. Use the <xref uid="com.microsoft.azure.storage.table.TableQuery.where(final String)" data-throw-if-not-resolved="false" data-raw-source="where"></xref> method to specify a filter expression for the entities returned. Use the <xref uid="com.microsoft.azure.storage.table.TableQuery.select(final String [])" data-throw-if-not-resolved="false" data-raw-source="select"></xref> method to specify the table entity properties to return. Use the <xref uid="com.microsoft.azure.storage.table.TableQuery.take(final Integer)" data-throw-if-not-resolved="false" data-raw-source="take"></xref> method to limit the number of entities returned by the query. Note that nothing prevents calling these methods more than once on a , so the values saved in the  will be the last encountered in order of execution. </p>

  <p>As an example, you could construct a table query using fluent syntax: </p>

  <p></p>

  <p>This example creates a query on the "Products" table for all entities where the PartitionKey value is "ProductsMNO" and the RowKey value is greater than or equal to "Napkin" and requests the first 25 matching entities, selecting only the common properties and the property named "InventoryCount", and returns them as <xref uid="com.microsoft.azure.storage.table.DynamicTableEntity" data-throw-if-not-resolved="false" data-raw-source="DynamicTableEntity"></xref> objects. </p>

  <p>Filter expressions for use with the <xref uid="com.microsoft.azure.storage.table.TableQuery.where(final String)" data-throw-if-not-resolved="false" data-raw-source="where"></xref> method or <xref uid="com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)" data-throw-if-not-resolved="false" data-raw-source="setFilterString"></xref> method can be created using fluent syntax with the overloaded <xref uid="com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)" data-throw-if-not-resolved="false" data-raw-source="generateFilterCondition"></xref> methods and <xref uid="com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)" data-throw-if-not-resolved="false" data-raw-source="combineFilters"></xref> method, using the comparison operators defined in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QueryComparisons"></xref> and the logical operators defined in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Operators"></xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are  types for comparison purposes. </p>

  <p>The values that may be used in table queries are explained in more detail in the MSDN topic <a href="http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx">Querying Tables and Entities</a>, but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed. </p>

  <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TableQuery#TableQuery(Class)"></xref> constructor and <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TableQuery#from(Class)"></xref> static factory methods require a class type which implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> and contains a nullary constructor. If the query will be executed using an <xref uid="com.microsoft.azure.storage.table.EntityResolver" data-throw-if-not-resolved="false" data-raw-source="EntityResolver"></xref>, the caller may specify <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> as the class type.</p>

  <p></p>
metadata: {}
