### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Resource" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.accountId()
  name: accountId()
  nameWithType: DataLakeStoreAccount.accountId()
  returns:
    description: <p>the accountId value </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the accountId value.</p>

    <p></p>
  syntax: public UUID accountId()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.accountId()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.creationTime()
  name: creationTime()
  nameWithType: DataLakeStoreAccount.creationTime()
  returns:
    description: <p>the creationTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the creationTime value.</p>

    <p></p>
  syntax: public DateTime creationTime()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.creationTime()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.currentTier()
  name: currentTier()
  nameWithType: DataLakeStoreAccount.currentTier()
  returns:
    description: <p>the currentTier value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TierType?alt=com.microsoft.azure.management.datalake.store.models.TierType&text=TierType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the currentTier value.</p>

    <p></p>
  syntax: public TierType currentTier()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.currentTier()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.defaultGroup()
  name: defaultGroup()
  nameWithType: DataLakeStoreAccount.defaultGroup()
  returns:
    description: <p>the defaultGroup value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the defaultGroup value.</p>

    <p></p>
  syntax: public String defaultGroup()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.defaultGroup()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.encryptionConfig()
  name: encryptionConfig()
  nameWithType: DataLakeStoreAccount.encryptionConfig()
  returns:
    description: <p>the encryptionConfig value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.EncryptionConfig?alt=com.microsoft.azure.management.datalake.store.models.EncryptionConfig&text=EncryptionConfig" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the encryptionConfig value.</p>

    <p></p>
  syntax: public EncryptionConfig encryptionConfig()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.encryptionConfig()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.encryptionProvisioningState()
  name: encryptionProvisioningState()
  nameWithType: DataLakeStoreAccount.encryptionProvisioningState()
  returns:
    description: <p>the encryptionProvisioningState value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.EncryptionProvisioningState?alt=com.microsoft.azure.management.datalake.store.models.EncryptionProvisioningState&text=EncryptionProvisioningState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the encryptionProvisioningState value.</p>

    <p></p>
  syntax: public EncryptionProvisioningState encryptionProvisioningState()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.encryptionProvisioningState()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.encryptionState()
  name: encryptionState()
  nameWithType: DataLakeStoreAccount.encryptionState()
  returns:
    description: <p>the encryptionState value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.EncryptionState?alt=com.microsoft.azure.management.datalake.store.models.EncryptionState&text=EncryptionState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the encryptionState value.</p>

    <p></p>
  syntax: public EncryptionState encryptionState()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.encryptionState()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.endpoint()
  name: endpoint()
  nameWithType: DataLakeStoreAccount.endpoint()
  returns:
    description: <p>the endpoint value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the endpoint value.</p>

    <p></p>
  syntax: public String endpoint()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.endpoint()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.firewallAllowAzureIps()
  name: firewallAllowAzureIps()
  nameWithType: DataLakeStoreAccount.firewallAllowAzureIps()
  returns:
    description: <p>the firewallAllowAzureIps value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallAllowAzureIpsState?alt=com.microsoft.azure.management.datalake.store.models.FirewallAllowAzureIpsState&text=FirewallAllowAzureIpsState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the firewallAllowAzureIps value.</p>

    <p></p>
  syntax: public FirewallAllowAzureIpsState firewallAllowAzureIps()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.firewallAllowAzureIps()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.firewallRules()
  name: firewallRules()
  nameWithType: DataLakeStoreAccount.firewallRules()
  returns:
    description: <p>the firewallRules value </p>
    type: List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the firewallRules value.</p>

    <p></p>
  syntax: public List<FirewallRule> firewallRules()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.firewallRules()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.firewallState()
  name: firewallState()
  nameWithType: DataLakeStoreAccount.firewallState()
  returns:
    description: <p>the firewallState value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallState?alt=com.microsoft.azure.management.datalake.store.models.FirewallState&text=FirewallState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the firewallState value.</p>

    <p></p>
  syntax: public FirewallState firewallState()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.firewallState()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.identity()
  name: identity()
  nameWithType: DataLakeStoreAccount.identity()
  returns:
    description: <p>the identity value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.EncryptionIdentity?alt=com.microsoft.azure.management.datalake.store.models.EncryptionIdentity&text=EncryptionIdentity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the identity value.</p>

    <p></p>
  syntax: public EncryptionIdentity identity()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.identity()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.lastModifiedTime()
  name: lastModifiedTime()
  nameWithType: DataLakeStoreAccount.lastModifiedTime()
  returns:
    description: <p>the lastModifiedTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the lastModifiedTime value.</p>

    <p></p>
  syntax: public DateTime lastModifiedTime()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.lastModifiedTime()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.newTier()
  name: newTier()
  nameWithType: DataLakeStoreAccount.newTier()
  returns:
    description: <p>the newTier value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TierType?alt=com.microsoft.azure.management.datalake.store.models.TierType&text=TierType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the newTier value.</p>

    <p></p>
  syntax: public TierType newTier()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.newTier()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.provisioningState()
  name: provisioningState()
  nameWithType: DataLakeStoreAccount.provisioningState()
  returns:
    description: <p>the provisioningState value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountStatus?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountStatus&text=DataLakeStoreAccountStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the provisioningState value.</p>

    <p></p>
  syntax: public DataLakeStoreAccountStatus provisioningState()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.provisioningState()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.state()
  name: state()
  nameWithType: DataLakeStoreAccount.state()
  returns:
    description: <p>the state value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountState?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountState&text=DataLakeStoreAccountState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the state value.</p>

    <p></p>
  syntax: public DataLakeStoreAccountState state()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.state()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.trustedIdProviders()
  name: trustedIdProviders()
  nameWithType: DataLakeStoreAccount.trustedIdProviders()
  returns:
    description: <p>the trustedIdProviders value </p>
    type: List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the trustedIdProviders value.</p>

    <p></p>
  syntax: public List<TrustedIdProvider> trustedIdProviders()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.trustedIdProviders()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.trustedIdProviderState()
  name: trustedIdProviderState()
  nameWithType: DataLakeStoreAccount.trustedIdProviderState()
  returns:
    description: <p>the trustedIdProviderState value </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProviderState?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProviderState&text=TrustedIdProviderState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the trustedIdProviderState value.</p>

    <p></p>
  syntax: public TrustedIdProviderState trustedIdProviderState()
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.trustedIdProviderState()
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withDefaultGroup(String defaultGroup)
  name: withDefaultGroup(String defaultGroup)
  nameWithType: DataLakeStoreAccount.withDefaultGroup(String defaultGroup)
  parameters:
  - description: <p>the defaultGroup value to set </p>
    name: defaultGroup
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DataLakeStoreAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the defaultGroup value.</p>

    <p></p>
  syntax: public DataLakeStoreAccount withDefaultGroup(String defaultGroup)
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withDefaultGroup(String)
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withEncryptionConfig(EncryptionConfig encryptionConfig)
  name: withEncryptionConfig(EncryptionConfig encryptionConfig)
  nameWithType: DataLakeStoreAccount.withEncryptionConfig(EncryptionConfig encryptionConfig)
  parameters:
  - description: <p>the encryptionConfig value to set </p>
    name: encryptionConfig
    type: <xref href="com.microsoft.azure.management.datalake.store.models.EncryptionConfig?alt=com.microsoft.azure.management.datalake.store.models.EncryptionConfig&text=EncryptionConfig" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DataLakeStoreAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the encryptionConfig value.</p>

    <p></p>
  syntax: public DataLakeStoreAccount withEncryptionConfig(EncryptionConfig encryptionConfig)
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withEncryptionConfig(EncryptionConfig)
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withEncryptionState(EncryptionState encryptionState)
  name: withEncryptionState(EncryptionState encryptionState)
  nameWithType: DataLakeStoreAccount.withEncryptionState(EncryptionState encryptionState)
  parameters:
  - description: <p>the encryptionState value to set </p>
    name: encryptionState
    type: <xref href="com.microsoft.azure.management.datalake.store.models.EncryptionState?alt=com.microsoft.azure.management.datalake.store.models.EncryptionState&text=EncryptionState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DataLakeStoreAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the encryptionState value.</p>

    <p></p>
  syntax: public DataLakeStoreAccount withEncryptionState(EncryptionState encryptionState)
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withEncryptionState(EncryptionState)
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps)
  name: withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps)
  nameWithType: DataLakeStoreAccount.withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps)
  parameters:
  - description: <p>the firewallAllowAzureIps value to set </p>
    name: firewallAllowAzureIps
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallAllowAzureIpsState?alt=com.microsoft.azure.management.datalake.store.models.FirewallAllowAzureIpsState&text=FirewallAllowAzureIpsState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DataLakeStoreAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the firewallAllowAzureIps value.</p>

    <p></p>
  syntax: public DataLakeStoreAccount withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps)
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withFirewallAllowAzureIps(FirewallAllowAzureIpsState)
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withFirewallRules(List<FirewallRule> firewallRules)
  name: withFirewallRules(List<FirewallRule> firewallRules)
  nameWithType: DataLakeStoreAccount.withFirewallRules(List<FirewallRule> firewallRules)
  parameters:
  - description: <p>the firewallRules value to set </p>
    name: firewallRules
    type: List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the DataLakeStoreAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the firewallRules value.</p>

    <p></p>
  syntax: public DataLakeStoreAccount withFirewallRules(List<FirewallRule> firewallRules)
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withFirewallRules(List<FirewallRule>)
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withFirewallState(FirewallState firewallState)
  name: withFirewallState(FirewallState firewallState)
  nameWithType: DataLakeStoreAccount.withFirewallState(FirewallState firewallState)
  parameters:
  - description: <p>the firewallState value to set </p>
    name: firewallState
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallState?alt=com.microsoft.azure.management.datalake.store.models.FirewallState&text=FirewallState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DataLakeStoreAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the firewallState value.</p>

    <p></p>
  syntax: public DataLakeStoreAccount withFirewallState(FirewallState firewallState)
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withFirewallState(FirewallState)
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withIdentity(EncryptionIdentity identity)
  name: withIdentity(EncryptionIdentity identity)
  nameWithType: DataLakeStoreAccount.withIdentity(EncryptionIdentity identity)
  parameters:
  - description: <p>the identity value to set </p>
    name: identity
    type: <xref href="com.microsoft.azure.management.datalake.store.models.EncryptionIdentity?alt=com.microsoft.azure.management.datalake.store.models.EncryptionIdentity&text=EncryptionIdentity" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DataLakeStoreAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the identity value.</p>

    <p></p>
  syntax: public DataLakeStoreAccount withIdentity(EncryptionIdentity identity)
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withIdentity(EncryptionIdentity)
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withNewTier(TierType newTier)
  name: withNewTier(TierType newTier)
  nameWithType: DataLakeStoreAccount.withNewTier(TierType newTier)
  parameters:
  - description: <p>the newTier value to set </p>
    name: newTier
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TierType?alt=com.microsoft.azure.management.datalake.store.models.TierType&text=TierType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DataLakeStoreAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the newTier value.</p>

    <p></p>
  syntax: public DataLakeStoreAccount withNewTier(TierType newTier)
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withNewTier(TierType)
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withTrustedIdProviders(List<TrustedIdProvider> trustedIdProviders)
  name: withTrustedIdProviders(List<TrustedIdProvider> trustedIdProviders)
  nameWithType: DataLakeStoreAccount.withTrustedIdProviders(List<TrustedIdProvider> trustedIdProviders)
  parameters:
  - description: <p>the trustedIdProviders value to set </p>
    name: trustedIdProviders
    type: List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the DataLakeStoreAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the trustedIdProviders value.</p>

    <p></p>
  syntax: public DataLakeStoreAccount withTrustedIdProviders(List<TrustedIdProvider> trustedIdProviders)
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withTrustedIdProviders(List<TrustedIdProvider>)
- fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withTrustedIdProviderState(TrustedIdProviderState trustedIdProviderState)
  name: withTrustedIdProviderState(TrustedIdProviderState trustedIdProviderState)
  nameWithType: DataLakeStoreAccount.withTrustedIdProviderState(TrustedIdProviderState trustedIdProviderState)
  parameters:
  - description: <p>the trustedIdProviderState value to set </p>
    name: trustedIdProviderState
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProviderState?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProviderState&text=TrustedIdProviderState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DataLakeStoreAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the trustedIdProviderState value.</p>

    <p></p>
  syntax: public DataLakeStoreAccount withTrustedIdProviderState(TrustedIdProviderState trustedIdProviderState)
  uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount.withTrustedIdProviderState(TrustedIdProviderState)
nameWithType: DataLakeStoreAccount
syntax: public class DataLakeStoreAccount
type: class
uid: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount
fullName: com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount
name: DataLakeStoreAccount
package: com.microsoft.azure.management.datalake.store.models
summary: <p>Data Lake Store account information. </p>
metadata: {}
