### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.service.twin.Twin.Twin()
  name: Twin()
  nameWithType: Twin.Twin()
  summary: <p>Constructor to create an instance for a device. </p>
  syntax: public Twin()
  uid: com.microsoft.azure.sdk.iot.service.twin.Twin.Twin()
- fullName: com.microsoft.azure.sdk.iot.service.twin.Twin.Twin(String deviceId)
  name: Twin(String deviceId)
  nameWithType: Twin.Twin(String deviceId)
  parameters:
  - description: <p>Id for this device. </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>This exception is thrown if the device Id is<code>null 

          </code> or empty </p>
  summary: >-
    <p>Constructor to create instance for a device.</p>

    <p></p>
  syntax: public Twin(String deviceId)
  uid: com.microsoft.azure.sdk.iot.service.twin.Twin.Twin(String)
- fullName: com.microsoft.azure.sdk.iot.service.twin.Twin.Twin(String deviceId, String moduleId)
  name: Twin(String deviceId, String moduleId)
  nameWithType: Twin.Twin(String deviceId, String moduleId)
  parameters:
  - description: <p>Id for this device. </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id for this device's module. </p>
    name: moduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>This exception is thrown if the device id is<code>null 

          </code> or empty. </p>
  summary: >-
    <p>Constructor to create an instance for a module.</p>

    <p></p>
  syntax: public Twin(String deviceId, String moduleId)
  uid: com.microsoft.azure.sdk.iot.service.twin.Twin.Twin(String,String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.service.twin.Twin.fromJson(String json)
  name: fromJson(String json)
  nameWithType: Twin.fromJson(String json)
  parameters:
  - name: json
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.Twin?alt=com.microsoft.azure.sdk.iot.service.twin.Twin&text=Twin" data-throw-if-not-resolved="False"/>
  syntax: public static Twin fromJson(String json)
  uid: com.microsoft.azure.sdk.iot.service.twin.Twin.fromJson(String)
- fullName: com.microsoft.azure.sdk.iot.service.twin.Twin.getDesiredProperties()
  name: getDesiredProperties()
  nameWithType: Twin.getDesiredProperties()
  returns:
    description: <p>A set of desired property pairs. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.service.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter to get the desired properties setter.</p>

    <p></p>
  syntax: public TwinCollection getDesiredProperties()
  uid: com.microsoft.azure.sdk.iot.service.twin.Twin.getDesiredProperties()
- fullName: com.microsoft.azure.sdk.iot.service.twin.Twin.getReportedProperties()
  name: getReportedProperties()
  nameWithType: Twin.getReportedProperties()
  returns:
    description: <p>A set of reported property pairs. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.service.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter to get reported properties setter.</p>

    <p></p>
  syntax: public TwinCollection getReportedProperties()
  uid: com.microsoft.azure.sdk.iot.service.twin.Twin.getReportedProperties()
- fullName: com.microsoft.azure.sdk.iot.service.twin.Twin.getTags()
  name: getTags()
  nameWithType: Twin.getTags()
  returns:
    description: <p>A set of tag key/value pairs. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.service.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the twin tags.</p>

    <p></p>
  syntax: public TwinCollection getTags()
  uid: com.microsoft.azure.sdk.iot.service.twin.Twin.getTags()
- fullName: com.microsoft.azure.sdk.iot.service.twin.Twin.toString()
  name: toString()
  nameWithType: Twin.toString()
  returns:
    description: <p>String representation for this device. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>String representation for this device containing device Id, tags, desired and reported properties.</p>

    <p></p>
  syntax: public String toString()
  uid: com.microsoft.azure.sdk.iot.service.twin.Twin.toString()
nameWithType: Twin
syntax: public class Twin
type: class
uid: com.microsoft.azure.sdk.iot.service.twin.Twin
fullName: com.microsoft.azure.sdk.iot.service.twin.Twin
name: Twin
package: com.microsoft.azure.sdk.iot.service.twin
summary: >-
  <p>Represent the twin on IoT hub. Implementing constructors and serialization functionality. </p>

  <p>The object is a representation of a module twin if and only if the moduleId is set.</p>
metadata: {}
