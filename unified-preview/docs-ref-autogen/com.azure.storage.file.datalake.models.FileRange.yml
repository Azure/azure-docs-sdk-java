### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.datalake.models.FileRange"
  id: "FileRange"
  parent: "com.azure.storage.file.datalake.models"
  children:
  - "com.azure.storage.file.datalake.models.FileRange.FileRange(long)"
  - "com.azure.storage.file.datalake.models.FileRange.FileRange(long,java.lang.Long)"
  - "com.azure.storage.file.datalake.models.FileRange.getCount()"
  - "com.azure.storage.file.datalake.models.FileRange.getOffset()"
  - "com.azure.storage.file.datalake.models.FileRange.toHeaderValue()"
  - "com.azure.storage.file.datalake.models.FileRange.toString()"
  langs:
  - "java"
  name: "FileRange"
  nameWithType: "FileRange"
  fullName: "com.azure.storage.file.datalake.models.FileRange"
  type: "Class"
  package: "com.azure.storage.file.datalake.models"
  summary: "This is a representation of a range of bytes on a file, typically used during a download operation. This type is immutable to ensure thread-safety of requests, so changing the values for a different operation requires construction of a new object. Passing null as a FileRange value will default to the entire range of the file."
  syntax:
    content: "public final class FileRange"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.datalake.models.FileRange.FileRange(long)"
  id: "FileRange(long)"
  parent: "com.azure.storage.file.datalake.models.FileRange"
  langs:
  - "java"
  name: "FileRange(long offset)"
  nameWithType: "FileRange.FileRange(long offset)"
  fullName: "com.azure.storage.file.datalake.models.FileRange.FileRange(long offset)"
  overload: "com.azure.storage.file.datalake.models.FileRange.FileRange*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake.models"
  summary: "Specifies the download operation to start from the offset position (zero-based) and download the rest of the entire file to the end."
  syntax:
    content: "public FileRange(long offset)"
    parameters:
    - id: "offset"
      type: "long"
      description: "the zero-based position to start downloading"
- uid: "com.azure.storage.file.datalake.models.FileRange.FileRange(long,java.lang.Long)"
  id: "FileRange(long,java.lang.Long)"
  parent: "com.azure.storage.file.datalake.models.FileRange"
  langs:
  - "java"
  name: "FileRange(long offset, Long count)"
  nameWithType: "FileRange.FileRange(long offset, Long count)"
  fullName: "com.azure.storage.file.datalake.models.FileRange.FileRange(long offset, Long count)"
  overload: "com.azure.storage.file.datalake.models.FileRange.FileRange*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake.models"
  summary: "Specifies the download operation to start from the offset position (zero-based) and download the count number of bytes."
  syntax:
    content: "public FileRange(long offset, Long count)"
    parameters:
    - id: "offset"
      type: "long"
      description: "the zero-based position to start downloading"
    - id: "count"
      type: "java.lang.Long"
      description: "the number of bytes to download"
- uid: "com.azure.storage.file.datalake.models.FileRange.getCount()"
  id: "getCount()"
  parent: "com.azure.storage.file.datalake.models.FileRange"
  langs:
  - "java"
  name: "getCount()"
  nameWithType: "FileRange.getCount()"
  fullName: "com.azure.storage.file.datalake.models.FileRange.getCount()"
  overload: "com.azure.storage.file.datalake.models.FileRange.getCount*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "How many bytes to include in the range. Must be greater than or equal to 0 if specified."
  syntax:
    content: "public Long getCount()"
    return:
      type: "java.lang.Long"
      description: "the number bytes to include in the range"
- uid: "com.azure.storage.file.datalake.models.FileRange.getOffset()"
  id: "getOffset()"
  parent: "com.azure.storage.file.datalake.models.FileRange"
  langs:
  - "java"
  name: "getOffset()"
  nameWithType: "FileRange.getOffset()"
  fullName: "com.azure.storage.file.datalake.models.FileRange.getOffset()"
  overload: "com.azure.storage.file.datalake.models.FileRange.getOffset*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "The start of the range. Must be greater than or equal to 0."
  syntax:
    content: "public long getOffset()"
    return:
      type: "long"
      description: "the offset for the range"
- uid: "com.azure.storage.file.datalake.models.FileRange.toHeaderValue()"
  id: "toHeaderValue()"
  parent: "com.azure.storage.file.datalake.models.FileRange"
  langs:
  - "java"
  name: "toHeaderValue()"
  nameWithType: "FileRange.toHeaderValue()"
  fullName: "com.azure.storage.file.datalake.models.FileRange.toHeaderValue()"
  overload: "com.azure.storage.file.datalake.models.FileRange.toHeaderValue*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  syntax:
    content: "public String toHeaderValue()"
    return:
      type: "java.lang.String"
      description: "<xref uid=\"com.azure.storage.file.datalake.models.FileRange.toString()\" data-throw-if-not-resolved=\"false\">FileRange#toString()</xref> if <code>count</code> isn't <code>null</code> or <code>offset</code> isn't 0, otherwise\n null."
- uid: "com.azure.storage.file.datalake.models.FileRange.toString()"
  id: "toString()"
  parent: "com.azure.storage.file.datalake.models.FileRange"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "FileRange.toString()"
  fullName: "com.azure.storage.file.datalake.models.FileRange.toString()"
  overload: "com.azure.storage.file.datalake.models.FileRange.toString*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> compliant with the format of the Azure Storage x-ms-range and Range headers."
references:
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.azure.storage.file.datalake.models.FileRange.FileRange*"
  name: "FileRange"
  nameWithType: "FileRange.FileRange"
  fullName: "com.azure.storage.file.datalake.models.FileRange.FileRange"
  package: "com.azure.storage.file.datalake.models"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.azure.storage.file.datalake.models.FileRange.getOffset*"
  name: "getOffset"
  nameWithType: "FileRange.getOffset"
  fullName: "com.azure.storage.file.datalake.models.FileRange.getOffset"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.FileRange.getCount*"
  name: "getCount"
  nameWithType: "FileRange.getCount"
  fullName: "com.azure.storage.file.datalake.models.FileRange.getCount"
  package: "com.azure.storage.file.datalake.models"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.datalake.models.FileRange.toString*"
  name: "toString"
  nameWithType: "FileRange.toString"
  fullName: "com.azure.storage.file.datalake.models.FileRange.toString"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.FileRange.toHeaderValue*"
  name: "toHeaderValue"
  nameWithType: "FileRange.toHeaderValue"
  fullName: "com.azure.storage.file.datalake.models.FileRange.toHeaderValue"
  package: "com.azure.storage.file.datalake.models"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
