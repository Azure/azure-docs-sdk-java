### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosContainerProperties"
  id: "CosmosContainerProperties"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(com.azure.cosmos.implementation.DocumentCollection)"
  - "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(java.lang.String)"
  - "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(java.lang.String,com.azure.cosmos.PartitionKeyDefinition)"
  - "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(java.lang.String,java.lang.String)"
  - "com.azure.cosmos.CosmosContainerProperties.getConflictResolutionPolicy()"
  - "com.azure.cosmos.CosmosContainerProperties.getDefaultTimeToLiveInSeconds()"
  - "com.azure.cosmos.CosmosContainerProperties.getFromV2Results(java.util.List<com.azure.cosmos.implementation.DocumentCollection>)"
  - "com.azure.cosmos.CosmosContainerProperties.getIndexingPolicy()"
  - "com.azure.cosmos.CosmosContainerProperties.getPartitionKeyDefinition()"
  - "com.azure.cosmos.CosmosContainerProperties.getUniqueKeyPolicy()"
  - "com.azure.cosmos.CosmosContainerProperties.getV2Collection()"
  - "com.azure.cosmos.CosmosContainerProperties.setConflictResolutionPolicy(com.azure.cosmos.ConflictResolutionPolicy)"
  - "com.azure.cosmos.CosmosContainerProperties.setDefaultTimeToLiveInSeconds(java.lang.Integer)"
  - "com.azure.cosmos.CosmosContainerProperties.setIndexingPolicy(com.azure.cosmos.IndexingPolicy)"
  - "com.azure.cosmos.CosmosContainerProperties.setPartitionKeyDefinition(com.azure.cosmos.PartitionKeyDefinition)"
  - "com.azure.cosmos.CosmosContainerProperties.setUniqueKeyPolicy(com.azure.cosmos.UniqueKeyPolicy)"
  langs:
  - "java"
  name: "CosmosContainerProperties"
  nameWithType: "CosmosContainerProperties"
  fullName: "com.azure.cosmos.CosmosContainerProperties"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Represents a item container in the Azure Cosmos DB database service. A cosmos container is a named logical container for cosmos items.\n\nA database may contain zero or more named containers and each container consists of zero or more JSON items. Being schema-free, the items in a container do not need to share the same structure or fields. Since containers are application resources, they can be authorized using either the master key or resource keys."
  syntax:
    content: "public class CosmosContainerProperties extends Resource"
  inheritance:
  - "java.lang.Object"
  - "com.azure.cosmos.JsonSerializable"
  - "com.azure.cosmos.Resource"
  inheritedMembers:
  - "com.azure.cosmos.JsonSerializable.<T>getCollection(java.lang.String,java.lang.Class<T>,boolean...)"
  - "com.azure.cosmos.JsonSerializable.<T>getList(java.lang.String,java.lang.Class<T>,boolean...)"
  - "com.azure.cosmos.JsonSerializable.<T>getObject(java.lang.String,java.lang.Class<T>,boolean...)"
  - "com.azure.cosmos.JsonSerializable.<T>set(java.lang.String,T)"
  - "com.azure.cosmos.JsonSerializable.<T>toObject(java.lang.Class<T>)"
  - "com.azure.cosmos.JsonSerializable.get(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getBoolean(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getCollection(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getDouble(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getInt(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getLogger()"
  - "com.azure.cosmos.JsonSerializable.getLong(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getMap()"
  - "com.azure.cosmos.JsonSerializable.getObject(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getObjectByPath(java.util.List<java.lang.String>)"
  - "com.azure.cosmos.JsonSerializable.getString(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getValue(com.fasterxml.jackson.databind.JsonNode)"
  - "com.azure.cosmos.JsonSerializable.has(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.populatePropertyBag()"
  - "com.azure.cosmos.JsonSerializable.remove(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.setMapper(com.fasterxml.jackson.databind.ObjectMapper)"
  - "com.azure.cosmos.JsonSerializable.toJson()"
  - "com.azure.cosmos.JsonSerializable.toJson(com.azure.cosmos.SerializationFormattingPolicy)"
  - "com.azure.cosmos.JsonSerializable.toString()"
  - "com.azure.cosmos.Resource.getAltLink()"
  - "com.azure.cosmos.Resource.getETag()"
  - "com.azure.cosmos.Resource.getId()"
  - "com.azure.cosmos.Resource.getResourceId()"
  - "com.azure.cosmos.Resource.getSelfLink()"
  - "com.azure.cosmos.Resource.getTimestamp()"
  - "com.azure.cosmos.Resource.setAltLink(java.lang.String)"
  - "com.azure.cosmos.Resource.setETag(java.lang.String)"
  - "com.azure.cosmos.Resource.setId(java.lang.String)"
  - "com.azure.cosmos.Resource.setResourceId(java.lang.String)"
  - "com.azure.cosmos.Resource.setSelfLink(java.lang.String)"
  - "com.azure.cosmos.Resource.setTimestamp(java.time.OffsetDateTime)"
  - "com.azure.cosmos.Resource.validateResource(com.azure.cosmos.Resource)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(com.azure.cosmos.implementation.DocumentCollection)"
  id: "CosmosContainerProperties(com.azure.cosmos.implementation.DocumentCollection)"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "CosmosContainerProperties(DocumentCollection collection)"
  nameWithType: "CosmosContainerProperties.CosmosContainerProperties(DocumentCollection collection)"
  fullName: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(DocumentCollection collection)"
  overload: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosContainerProperties(DocumentCollection collection)"
    parameters:
    - id: "collection"
      type: "com.azure.cosmos.implementation.DocumentCollection"
- uid: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(java.lang.String)"
  id: "CosmosContainerProperties(java.lang.String)"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "CosmosContainerProperties(String json)"
  nameWithType: "CosmosContainerProperties.CosmosContainerProperties(String json)"
  fullName: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(String json)"
  overload: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosContainerProperties(String json)"
    parameters:
    - id: "json"
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(java.lang.String,com.azure.cosmos.PartitionKeyDefinition)"
  id: "CosmosContainerProperties(java.lang.String,com.azure.cosmos.PartitionKeyDefinition)"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "CosmosContainerProperties(String id, PartitionKeyDefinition partitionKeyDefinition)"
  nameWithType: "CosmosContainerProperties.CosmosContainerProperties(String id, PartitionKeyDefinition partitionKeyDefinition)"
  fullName: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(String id, PartitionKeyDefinition partitionKeyDefinition)"
  overload: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties*"
  type: "Constructor"
  package: "com.azure.cosmos"
  summary: "Constructor"
  syntax:
    content: "public CosmosContainerProperties(String id, PartitionKeyDefinition partitionKeyDefinition)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "id of the container"
    - id: "partitionKeyDefinition"
      type: "com.azure.cosmos.PartitionKeyDefinition"
      description: "the <xref uid=\"com.azure.cosmos.PartitionKeyDefinition\" data-throw-if-not-resolved=\"false\">PartitionKeyDefinition</xref>"
- uid: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(java.lang.String,java.lang.String)"
  id: "CosmosContainerProperties(java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "CosmosContainerProperties(String id, String partitionKeyPath)"
  nameWithType: "CosmosContainerProperties.CosmosContainerProperties(String id, String partitionKeyPath)"
  fullName: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties(String id, String partitionKeyPath)"
  overload: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties*"
  type: "Constructor"
  package: "com.azure.cosmos"
  summary: "Constructor"
  syntax:
    content: "public CosmosContainerProperties(String id, String partitionKeyPath)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "id of the Container"
    - id: "partitionKeyPath"
      type: "java.lang.String"
      description: "partition key path"
- uid: "com.azure.cosmos.CosmosContainerProperties.getConflictResolutionPolicy()"
  id: "getConflictResolutionPolicy()"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "getConflictResolutionPolicy()"
  nameWithType: "CosmosContainerProperties.getConflictResolutionPolicy()"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getConflictResolutionPolicy()"
  overload: "com.azure.cosmos.CosmosContainerProperties.getConflictResolutionPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the conflictResolutionPolicy that is used for resolving conflicting writes on documents in different regions, in a collection in the Azure Cosmos DB service."
  syntax:
    content: "public ConflictResolutionPolicy getConflictResolutionPolicy()"
    return:
      type: "com.azure.cosmos.ConflictResolutionPolicy"
      description: "ConflictResolutionPolicy"
- uid: "com.azure.cosmos.CosmosContainerProperties.getDefaultTimeToLiveInSeconds()"
  id: "getDefaultTimeToLiveInSeconds()"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "getDefaultTimeToLiveInSeconds()"
  nameWithType: "CosmosContainerProperties.getDefaultTimeToLiveInSeconds()"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getDefaultTimeToLiveInSeconds()"
  overload: "com.azure.cosmos.CosmosContainerProperties.getDefaultTimeToLiveInSeconds*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the collection's default time-to-live value."
  syntax:
    content: "public Integer getDefaultTimeToLiveInSeconds()"
    return:
      type: "java.lang.Integer"
      description: "the default time-to-live value in seconds."
- uid: "com.azure.cosmos.CosmosContainerProperties.getFromV2Results(java.util.List<com.azure.cosmos.implementation.DocumentCollection>)"
  id: "getFromV2Results(java.util.List<com.azure.cosmos.implementation.DocumentCollection>)"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "getFromV2Results(List<DocumentCollection> results)"
  nameWithType: "CosmosContainerProperties.getFromV2Results(List<DocumentCollection> results)"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getFromV2Results(List<DocumentCollection> results)"
  overload: "com.azure.cosmos.CosmosContainerProperties.getFromV2Results*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: "static List<CosmosContainerProperties> getFromV2Results(List<DocumentCollection> results)"
    parameters:
    - id: "results"
      type: "java.util.List<com.azure.cosmos.implementation.DocumentCollection>"
    return:
      type: "java.util.List<com.azure.cosmos.CosmosContainerProperties>"
- uid: "com.azure.cosmos.CosmosContainerProperties.getIndexingPolicy()"
  id: "getIndexingPolicy()"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "getIndexingPolicy()"
  nameWithType: "CosmosContainerProperties.getIndexingPolicy()"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getIndexingPolicy()"
  overload: "com.azure.cosmos.CosmosContainerProperties.getIndexingPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the container's indexing policy."
  syntax:
    content: "public IndexingPolicy getIndexingPolicy()"
    return:
      type: "com.azure.cosmos.IndexingPolicy"
      description: "the indexing policy."
- uid: "com.azure.cosmos.CosmosContainerProperties.getPartitionKeyDefinition()"
  id: "getPartitionKeyDefinition()"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "getPartitionKeyDefinition()"
  nameWithType: "CosmosContainerProperties.getPartitionKeyDefinition()"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getPartitionKeyDefinition()"
  overload: "com.azure.cosmos.CosmosContainerProperties.getPartitionKeyDefinition*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the containers's partition key definition."
  syntax:
    content: "public PartitionKeyDefinition getPartitionKeyDefinition()"
    return:
      type: "com.azure.cosmos.PartitionKeyDefinition"
      description: "the partition key definition."
- uid: "com.azure.cosmos.CosmosContainerProperties.getUniqueKeyPolicy()"
  id: "getUniqueKeyPolicy()"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "getUniqueKeyPolicy()"
  nameWithType: "CosmosContainerProperties.getUniqueKeyPolicy()"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getUniqueKeyPolicy()"
  overload: "com.azure.cosmos.CosmosContainerProperties.getUniqueKeyPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the containers unique key policy"
  syntax:
    content: "public UniqueKeyPolicy getUniqueKeyPolicy()"
    return:
      type: "com.azure.cosmos.UniqueKeyPolicy"
      description: "the unique key policy"
- uid: "com.azure.cosmos.CosmosContainerProperties.getV2Collection()"
  id: "getV2Collection()"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "getV2Collection()"
  nameWithType: "CosmosContainerProperties.getV2Collection()"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getV2Collection()"
  overload: "com.azure.cosmos.CosmosContainerProperties.getV2Collection*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " DocumentCollection getV2Collection()"
    return:
      type: "com.azure.cosmos.implementation.DocumentCollection"
- uid: "com.azure.cosmos.CosmosContainerProperties.setConflictResolutionPolicy(com.azure.cosmos.ConflictResolutionPolicy)"
  id: "setConflictResolutionPolicy(com.azure.cosmos.ConflictResolutionPolicy)"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "setConflictResolutionPolicy(ConflictResolutionPolicy value)"
  nameWithType: "CosmosContainerProperties.setConflictResolutionPolicy(ConflictResolutionPolicy value)"
  fullName: "com.azure.cosmos.CosmosContainerProperties.setConflictResolutionPolicy(ConflictResolutionPolicy value)"
  overload: "com.azure.cosmos.CosmosContainerProperties.setConflictResolutionPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the conflictResolutionPolicy that is used for resolving conflicting writes on documents in different regions, in a collection in the Azure Cosmos DB service."
  syntax:
    content: "public CosmosContainerProperties setConflictResolutionPolicy(ConflictResolutionPolicy value)"
    parameters:
    - id: "value"
      type: "com.azure.cosmos.ConflictResolutionPolicy"
      description: "ConflictResolutionPolicy to be used."
    return:
      type: "com.azure.cosmos.CosmosContainerProperties"
      description: "the CosmosContainerProperties."
- uid: "com.azure.cosmos.CosmosContainerProperties.setDefaultTimeToLiveInSeconds(java.lang.Integer)"
  id: "setDefaultTimeToLiveInSeconds(java.lang.Integer)"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "setDefaultTimeToLiveInSeconds(Integer timeToLive)"
  nameWithType: "CosmosContainerProperties.setDefaultTimeToLiveInSeconds(Integer timeToLive)"
  fullName: "com.azure.cosmos.CosmosContainerProperties.setDefaultTimeToLiveInSeconds(Integer timeToLive)"
  overload: "com.azure.cosmos.CosmosContainerProperties.setDefaultTimeToLiveInSeconds*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the collection's default time-to-live value.\n\nThe default time-to-live value on a collection is an optional property. If set, the documents within the collection expires after the specified number of seconds since their last write time. The value of this property should be one of the following:\n\nnull - indicates evaluation of time-to-live is disabled and documents within the collection will never expire, regardless whether individual documents have their time-to-live set.\n\nnonzero positive integer - indicates the default time-to-live value for all documents within the collection. This value can be overridden by individual documents' time-to-live value.\n\n\\-1 - indicates by default all documents within the collection never expire. This value can be overridden by individual documents' time-to-live value."
  syntax:
    content: "public void setDefaultTimeToLiveInSeconds(Integer timeToLive)"
    parameters:
    - id: "timeToLive"
      type: "java.lang.Integer"
      description: "the default time-to-live value in seconds."
- uid: "com.azure.cosmos.CosmosContainerProperties.setIndexingPolicy(com.azure.cosmos.IndexingPolicy)"
  id: "setIndexingPolicy(com.azure.cosmos.IndexingPolicy)"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "setIndexingPolicy(IndexingPolicy indexingPolicy)"
  nameWithType: "CosmosContainerProperties.setIndexingPolicy(IndexingPolicy indexingPolicy)"
  fullName: "com.azure.cosmos.CosmosContainerProperties.setIndexingPolicy(IndexingPolicy indexingPolicy)"
  overload: "com.azure.cosmos.CosmosContainerProperties.setIndexingPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the container's indexing policy"
  syntax:
    content: "public CosmosContainerProperties setIndexingPolicy(IndexingPolicy indexingPolicy)"
    parameters:
    - id: "indexingPolicy"
      type: "com.azure.cosmos.IndexingPolicy"
      description: "<xref uid=\"com.azure.cosmos.IndexingPolicy\" data-throw-if-not-resolved=\"false\">IndexingPolicy</xref> the indexing policy"
    return:
      type: "com.azure.cosmos.CosmosContainerProperties"
      description: "the CosmosContainerProperties."
- uid: "com.azure.cosmos.CosmosContainerProperties.setPartitionKeyDefinition(com.azure.cosmos.PartitionKeyDefinition)"
  id: "setPartitionKeyDefinition(com.azure.cosmos.PartitionKeyDefinition)"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "setPartitionKeyDefinition(PartitionKeyDefinition partitionKeyDefinition)"
  nameWithType: "CosmosContainerProperties.setPartitionKeyDefinition(PartitionKeyDefinition partitionKeyDefinition)"
  fullName: "com.azure.cosmos.CosmosContainerProperties.setPartitionKeyDefinition(PartitionKeyDefinition partitionKeyDefinition)"
  overload: "com.azure.cosmos.CosmosContainerProperties.setPartitionKeyDefinition*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the containers's partition key definition."
  syntax:
    content: "public CosmosContainerProperties setPartitionKeyDefinition(PartitionKeyDefinition partitionKeyDefinition)"
    parameters:
    - id: "partitionKeyDefinition"
      type: "com.azure.cosmos.PartitionKeyDefinition"
      description: "the partition key definition."
    return:
      type: "com.azure.cosmos.CosmosContainerProperties"
      description: "the CosmosContainerProperties."
- uid: "com.azure.cosmos.CosmosContainerProperties.setUniqueKeyPolicy(com.azure.cosmos.UniqueKeyPolicy)"
  id: "setUniqueKeyPolicy(com.azure.cosmos.UniqueKeyPolicy)"
  parent: "com.azure.cosmos.CosmosContainerProperties"
  langs:
  - "java"
  name: "setUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  nameWithType: "CosmosContainerProperties.setUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  fullName: "com.azure.cosmos.CosmosContainerProperties.setUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  overload: "com.azure.cosmos.CosmosContainerProperties.setUniqueKeyPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the Containers unique key policy"
  syntax:
    content: "public CosmosContainerProperties setUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
    parameters:
    - id: "uniqueKeyPolicy"
      type: "com.azure.cosmos.UniqueKeyPolicy"
      description: "the unique key policy"
    return:
      type: "com.azure.cosmos.CosmosContainerProperties"
      description: "the CosmosContainerProperties."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties*"
  name: "CosmosContainerProperties"
  nameWithType: "CosmosContainerProperties.CosmosContainerProperties"
  fullName: "com.azure.cosmos.CosmosContainerProperties.CosmosContainerProperties"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.PartitionKeyDefinition"
  name: "PartitionKeyDefinition"
  nameWithType: "PartitionKeyDefinition"
  fullName: "com.azure.cosmos.PartitionKeyDefinition"
- uid: "com.azure.cosmos.implementation.DocumentCollection"
  name: "DocumentCollection"
  nameWithType: "DocumentCollection"
  fullName: "com.azure.cosmos.implementation.DocumentCollection"
- uid: "java.util.List<com.azure.cosmos.implementation.DocumentCollection>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.implementation.DocumentCollection"
    name: "DocumentCollection"
    fullName: "com.azure.cosmos.implementation.DocumentCollection"
  - name: ">"
    fullName: ">"
- uid: "java.util.List<com.azure.cosmos.CosmosContainerProperties>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.CosmosContainerProperties"
    name: "CosmosContainerProperties"
    fullName: "com.azure.cosmos.CosmosContainerProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosContainerProperties.getFromV2Results*"
  name: "getFromV2Results"
  nameWithType: "CosmosContainerProperties.getFromV2Results"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getFromV2Results"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.IndexingPolicy"
  name: "IndexingPolicy"
  nameWithType: "IndexingPolicy"
  fullName: "com.azure.cosmos.IndexingPolicy"
- uid: "com.azure.cosmos.CosmosContainerProperties.getIndexingPolicy*"
  name: "getIndexingPolicy"
  nameWithType: "CosmosContainerProperties.getIndexingPolicy"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getIndexingPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosContainerProperties.setIndexingPolicy*"
  name: "setIndexingPolicy"
  nameWithType: "CosmosContainerProperties.setIndexingPolicy"
  fullName: "com.azure.cosmos.CosmosContainerProperties.setIndexingPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.UniqueKeyPolicy"
  name: "UniqueKeyPolicy"
  nameWithType: "UniqueKeyPolicy"
  fullName: "com.azure.cosmos.UniqueKeyPolicy"
- uid: "com.azure.cosmos.CosmosContainerProperties.getUniqueKeyPolicy*"
  name: "getUniqueKeyPolicy"
  nameWithType: "CosmosContainerProperties.getUniqueKeyPolicy"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getUniqueKeyPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosContainerProperties.setUniqueKeyPolicy*"
  name: "setUniqueKeyPolicy"
  nameWithType: "CosmosContainerProperties.setUniqueKeyPolicy"
  fullName: "com.azure.cosmos.CosmosContainerProperties.setUniqueKeyPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosContainerProperties.getPartitionKeyDefinition*"
  name: "getPartitionKeyDefinition"
  nameWithType: "CosmosContainerProperties.getPartitionKeyDefinition"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getPartitionKeyDefinition"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosContainerProperties.setPartitionKeyDefinition*"
  name: "setPartitionKeyDefinition"
  nameWithType: "CosmosContainerProperties.setPartitionKeyDefinition"
  fullName: "com.azure.cosmos.CosmosContainerProperties.setPartitionKeyDefinition"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConflictResolutionPolicy"
  name: "ConflictResolutionPolicy"
  nameWithType: "ConflictResolutionPolicy"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy"
- uid: "com.azure.cosmos.CosmosContainerProperties.getConflictResolutionPolicy*"
  name: "getConflictResolutionPolicy"
  nameWithType: "CosmosContainerProperties.getConflictResolutionPolicy"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getConflictResolutionPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosContainerProperties.setConflictResolutionPolicy*"
  name: "setConflictResolutionPolicy"
  nameWithType: "CosmosContainerProperties.setConflictResolutionPolicy"
  fullName: "com.azure.cosmos.CosmosContainerProperties.setConflictResolutionPolicy"
  package: "com.azure.cosmos"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.azure.cosmos.CosmosContainerProperties.getDefaultTimeToLiveInSeconds*"
  name: "getDefaultTimeToLiveInSeconds"
  nameWithType: "CosmosContainerProperties.getDefaultTimeToLiveInSeconds"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getDefaultTimeToLiveInSeconds"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosContainerProperties.setDefaultTimeToLiveInSeconds*"
  name: "setDefaultTimeToLiveInSeconds"
  nameWithType: "CosmosContainerProperties.setDefaultTimeToLiveInSeconds"
  fullName: "com.azure.cosmos.CosmosContainerProperties.setDefaultTimeToLiveInSeconds"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosContainerProperties.getV2Collection*"
  name: "getV2Collection"
  nameWithType: "CosmosContainerProperties.getV2Collection"
  fullName: "com.azure.cosmos.CosmosContainerProperties.getV2Collection"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.Resource"
  name: "Resource"
  nameWithType: "Resource"
  fullName: "com.azure.cosmos.Resource"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "com.azure.cosmos.JsonSerializable.<T>getObject(java.lang.String,java.lang.Class<T>,boolean...)"
  name: "JsonSerializable.<T>getObject(String,Class<T>,)"
  nameWithType: "JsonSerializable.<T>getObject(String,Class<T>,)"
  fullName: "com.azure.cosmos.JsonSerializable.<T>getObject(java.lang.String,java.lang.Class<T>,boolean...)"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.azure.cosmos.JsonSerializable.<T>set(java.lang.String,T)"
  name: "JsonSerializable.<T>set(String,T)"
  nameWithType: "JsonSerializable.<T>set(String,T)"
  fullName: "com.azure.cosmos.JsonSerializable.<T>set(java.lang.String,T)"
- uid: "com.azure.cosmos.JsonSerializable.getObjectByPath(java.util.List<java.lang.String>)"
  name: "JsonSerializable.getObjectByPath(List<String>)"
  nameWithType: "JsonSerializable.getObjectByPath(List<String>)"
  fullName: "com.azure.cosmos.JsonSerializable.getObjectByPath(java.util.List<java.lang.String>)"
- uid: "com.azure.cosmos.JsonSerializable.toJson()"
  name: "JsonSerializable.toJson()"
  nameWithType: "JsonSerializable.toJson()"
  fullName: "com.azure.cosmos.JsonSerializable.toJson()"
- uid: "com.azure.cosmos.Resource.setId(java.lang.String)"
  name: "Resource.setId(String)"
  nameWithType: "Resource.setId(String)"
  fullName: "com.azure.cosmos.Resource.setId(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.getMap()"
  name: "JsonSerializable.getMap()"
  nameWithType: "JsonSerializable.getMap()"
  fullName: "com.azure.cosmos.JsonSerializable.getMap()"
- uid: "com.azure.cosmos.JsonSerializable.setMapper(com.fasterxml.jackson.databind.ObjectMapper)"
  name: "JsonSerializable.setMapper(ObjectMapper)"
  nameWithType: "JsonSerializable.setMapper(ObjectMapper)"
  fullName: "com.azure.cosmos.JsonSerializable.setMapper(com.fasterxml.jackson.databind.ObjectMapper)"
- uid: "com.azure.cosmos.Resource.getETag()"
  name: "Resource.getETag()"
  nameWithType: "Resource.getETag()"
  fullName: "com.azure.cosmos.Resource.getETag()"
- uid: "com.azure.cosmos.JsonSerializable.getCollection(java.lang.String)"
  name: "JsonSerializable.getCollection(String)"
  nameWithType: "JsonSerializable.getCollection(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getCollection(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.getBoolean(java.lang.String)"
  name: "JsonSerializable.getBoolean(String)"
  nameWithType: "JsonSerializable.getBoolean(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getBoolean(java.lang.String)"
- uid: "com.azure.cosmos.Resource.setETag(java.lang.String)"
  name: "Resource.setETag(String)"
  nameWithType: "Resource.setETag(String)"
  fullName: "com.azure.cosmos.Resource.setETag(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.remove(java.lang.String)"
  name: "JsonSerializable.remove(String)"
  nameWithType: "JsonSerializable.remove(String)"
  fullName: "com.azure.cosmos.JsonSerializable.remove(java.lang.String)"
- uid: "com.azure.cosmos.Resource.getAltLink()"
  name: "Resource.getAltLink()"
  nameWithType: "Resource.getAltLink()"
  fullName: "com.azure.cosmos.Resource.getAltLink()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "com.azure.cosmos.JsonSerializable.getValue(com.fasterxml.jackson.databind.JsonNode)"
  name: "JsonSerializable.getValue(JsonNode)"
  nameWithType: "JsonSerializable.getValue(JsonNode)"
  fullName: "com.azure.cosmos.JsonSerializable.getValue(com.fasterxml.jackson.databind.JsonNode)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.Resource.getSelfLink()"
  name: "Resource.getSelfLink()"
  nameWithType: "Resource.getSelfLink()"
  fullName: "com.azure.cosmos.Resource.getSelfLink()"
- uid: "com.azure.cosmos.Resource.setResourceId(java.lang.String)"
  name: "Resource.setResourceId(String)"
  nameWithType: "Resource.setResourceId(String)"
  fullName: "com.azure.cosmos.Resource.setResourceId(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.getObject(java.lang.String)"
  name: "JsonSerializable.getObject(String)"
  nameWithType: "JsonSerializable.getObject(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getObject(java.lang.String)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.azure.cosmos.Resource.validateResource(com.azure.cosmos.Resource)"
  name: "Resource.validateResource(Resource)"
  nameWithType: "Resource.validateResource(Resource)"
  fullName: "com.azure.cosmos.Resource.validateResource(com.azure.cosmos.Resource)"
- uid: "com.azure.cosmos.JsonSerializable.has(java.lang.String)"
  name: "JsonSerializable.has(String)"
  nameWithType: "JsonSerializable.has(String)"
  fullName: "com.azure.cosmos.JsonSerializable.has(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.getLong(java.lang.String)"
  name: "JsonSerializable.getLong(String)"
  nameWithType: "JsonSerializable.getLong(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getLong(java.lang.String)"
- uid: "com.azure.cosmos.Resource.setSelfLink(java.lang.String)"
  name: "Resource.setSelfLink(String)"
  nameWithType: "Resource.setSelfLink(String)"
  fullName: "com.azure.cosmos.Resource.setSelfLink(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.toJson(com.azure.cosmos.SerializationFormattingPolicy)"
  name: "JsonSerializable.toJson(SerializationFormattingPolicy)"
  nameWithType: "JsonSerializable.toJson(SerializationFormattingPolicy)"
  fullName: "com.azure.cosmos.JsonSerializable.toJson(com.azure.cosmos.SerializationFormattingPolicy)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "com.azure.cosmos.Resource.setTimestamp(java.time.OffsetDateTime)"
  name: "Resource.setTimestamp(OffsetDateTime)"
  nameWithType: "Resource.setTimestamp(OffsetDateTime)"
  fullName: "com.azure.cosmos.Resource.setTimestamp(java.time.OffsetDateTime)"
- uid: "com.azure.cosmos.Resource.setAltLink(java.lang.String)"
  name: "Resource.setAltLink(String)"
  nameWithType: "Resource.setAltLink(String)"
  fullName: "com.azure.cosmos.Resource.setAltLink(java.lang.String)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.azure.cosmos.Resource.getId()"
  name: "Resource.getId()"
  nameWithType: "Resource.getId()"
  fullName: "com.azure.cosmos.Resource.getId()"
- uid: "com.azure.cosmos.JsonSerializable.getString(java.lang.String)"
  name: "JsonSerializable.getString(String)"
  nameWithType: "JsonSerializable.getString(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getString(java.lang.String)"
- uid: "com.azure.cosmos.Resource.getResourceId()"
  name: "Resource.getResourceId()"
  nameWithType: "Resource.getResourceId()"
  fullName: "com.azure.cosmos.Resource.getResourceId()"
- uid: "com.azure.cosmos.JsonSerializable.populatePropertyBag()"
  name: "JsonSerializable.populatePropertyBag()"
  nameWithType: "JsonSerializable.populatePropertyBag()"
  fullName: "com.azure.cosmos.JsonSerializable.populatePropertyBag()"
- uid: "com.azure.cosmos.JsonSerializable.getInt(java.lang.String)"
  name: "JsonSerializable.getInt(String)"
  nameWithType: "JsonSerializable.getInt(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getInt(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.getDouble(java.lang.String)"
  name: "JsonSerializable.getDouble(String)"
  nameWithType: "JsonSerializable.getDouble(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getDouble(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.<T>toObject(java.lang.Class<T>)"
  name: "JsonSerializable.<T>toObject(Class<T>)"
  nameWithType: "JsonSerializable.<T>toObject(Class<T>)"
  fullName: "com.azure.cosmos.JsonSerializable.<T>toObject(java.lang.Class<T>)"
- uid: "com.azure.cosmos.JsonSerializable.getLogger()"
  name: "JsonSerializable.getLogger()"
  nameWithType: "JsonSerializable.getLogger()"
  fullName: "com.azure.cosmos.JsonSerializable.getLogger()"
- uid: "com.azure.cosmos.JsonSerializable.<T>getList(java.lang.String,java.lang.Class<T>,boolean...)"
  name: "JsonSerializable.<T>getList(String,Class<T>,)"
  nameWithType: "JsonSerializable.<T>getList(String,Class<T>,)"
  fullName: "com.azure.cosmos.JsonSerializable.<T>getList(java.lang.String,java.lang.Class<T>,boolean...)"
- uid: "com.azure.cosmos.Resource.getTimestamp()"
  name: "Resource.getTimestamp()"
  nameWithType: "Resource.getTimestamp()"
  fullName: "com.azure.cosmos.Resource.getTimestamp()"
- uid: "com.azure.cosmos.JsonSerializable.toString()"
  name: "JsonSerializable.toString()"
  nameWithType: "JsonSerializable.toString()"
  fullName: "com.azure.cosmos.JsonSerializable.toString()"
- uid: "com.azure.cosmos.JsonSerializable.<T>getCollection(java.lang.String,java.lang.Class<T>,boolean...)"
  name: "JsonSerializable.<T>getCollection(String,Class<T>,)"
  nameWithType: "JsonSerializable.<T>getCollection(String,Class<T>,)"
  fullName: "com.azure.cosmos.JsonSerializable.<T>getCollection(java.lang.String,java.lang.Class<T>,boolean...)"
- uid: "com.azure.cosmos.JsonSerializable.get(java.lang.String)"
  name: "JsonSerializable.get(String)"
  nameWithType: "JsonSerializable.get(String)"
  fullName: "com.azure.cosmos.JsonSerializable.get(java.lang.String)"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "T>,boolean...)"
  name: "T>,)"
  nameWithType: "T>,)"
  fullName: "T>,boolean...)"
- uid: "com.azure.cosmos.JsonSerializable."
  name: "JsonSerializable."
  nameWithType: "JsonSerializable."
  fullName: "com.azure.cosmos.JsonSerializable."
- uid: "T>getObject(java.lang.String,java.lang.Class"
  name: "T>getObject(String,Class"
  nameWithType: "T>getObject(String,Class"
  fullName: "T>getObject(java.lang.String,java.lang.Class"
- uid: "T>set(java.lang.String,T)"
  name: "T>set(String,T)"
  nameWithType: "T>set(String,T)"
  fullName: "T>set(java.lang.String,T)"
- uid: "com.azure.cosmos.JsonSerializable.getObjectByPath(java.util.List"
  name: "JsonSerializable.getObjectByPath(List"
  nameWithType: "JsonSerializable.getObjectByPath(List"
  fullName: "com.azure.cosmos.JsonSerializable.getObjectByPath(java.util.List"
- uid: "java.lang.String>)"
  name: "String>)"
  nameWithType: "String>)"
  fullName: "java.lang.String>)"
- uid: "T>toObject(java.lang.Class"
  name: "T>toObject(Class"
  nameWithType: "T>toObject(Class"
  fullName: "T>toObject(java.lang.Class"
- uid: "T>)"
  name: "T>)"
  nameWithType: "T>)"
  fullName: "T>)"
- uid: "T>getList(java.lang.String,java.lang.Class"
  name: "T>getList(String,Class"
  nameWithType: "T>getList(String,Class"
  fullName: "T>getList(java.lang.String,java.lang.Class"
- uid: "T>getCollection(java.lang.String,java.lang.Class"
  name: "T>getCollection(String,Class"
  nameWithType: "T>getCollection(String,Class"
  fullName: "T>getCollection(java.lang.String,java.lang.Class"
