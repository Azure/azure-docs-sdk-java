### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions"
  id: "ChangeFeedProcessorOptions"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.ChangeFeedProcessorOptions.ChangeFeedProcessorOptions()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getDiscardExistingLeases()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getFeedPollDelay()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseAcquireInterval()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseExpirationInterval()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getLeasePrefix()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseRenewInterval()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxItemCount()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxScaleCount()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getMinScaleCount()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getStartContinuation()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getStartFromBeginning()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.getStartTime()"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setDiscardExistingLeases(boolean)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setFeedPollDelay(java.time.Duration)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseAcquireInterval(java.time.Duration)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseExpirationInterval(java.time.Duration)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setLeasePrefix(java.lang.String)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseRenewInterval(java.time.Duration)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxItemCount(int)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxScaleCount(int)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setMinScaleCount(int)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setStartContinuation(java.lang.String)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setStartFromBeginning(boolean)"
  - "com.azure.cosmos.ChangeFeedProcessorOptions.setStartTime(java.time.OffsetDateTime)"
  langs:
  - "java"
  name: "ChangeFeedProcessorOptions"
  nameWithType: "ChangeFeedProcessorOptions"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Specifies the options associated with <xref uid=\"com.azure.cosmos.ChangeFeedProcessor\" data-throw-if-not-resolved=\"false\">ChangeFeedProcessor</xref>."
  syntax:
    content: "public class ChangeFeedProcessorOptions"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.ChangeFeedProcessorOptions()"
  id: "ChangeFeedProcessorOptions()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "ChangeFeedProcessorOptions()"
  nameWithType: "ChangeFeedProcessorOptions.ChangeFeedProcessorOptions()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.ChangeFeedProcessorOptions()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.ChangeFeedProcessorOptions*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: "public ChangeFeedProcessorOptions()"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getDiscardExistingLeases()"
  id: "getDiscardExistingLeases()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getDiscardExistingLeases()"
  nameWithType: "ChangeFeedProcessorOptions.getDiscardExistingLeases()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getDiscardExistingLeases()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getDiscardExistingLeases*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets a value indicating whether on start of the host all existing leases should be deleted and the host should start from scratch."
  syntax:
    content: "public boolean getDiscardExistingLeases()"
    return:
      type: "boolean"
      description: "a value indicating whether on start of the host all existing leases should be deleted and the host \n should start from scratch."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getFeedPollDelay()"
  id: "getFeedPollDelay()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getFeedPollDelay()"
  nameWithType: "ChangeFeedProcessorOptions.getFeedPollDelay()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getFeedPollDelay()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getFeedPollDelay*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the delay in between polling a partition for new changes on the feed, after all current changes are drained."
  syntax:
    content: "public Duration getFeedPollDelay()"
    return:
      type: "java.time.Duration"
      description: "the delay in between polling a partition for new changes on the feed."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseAcquireInterval()"
  id: "getLeaseAcquireInterval()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getLeaseAcquireInterval()"
  nameWithType: "ChangeFeedProcessorOptions.getLeaseAcquireInterval()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseAcquireInterval()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseAcquireInterval*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the interval to kick off a task to compute if partitions are distributed evenly among known host instances."
  syntax:
    content: "public Duration getLeaseAcquireInterval()"
    return:
      type: "java.time.Duration"
      description: "the interval to kick off a task to compute if partitions are distributed evenly among known host \n instances."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseExpirationInterval()"
  id: "getLeaseExpirationInterval()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getLeaseExpirationInterval()"
  nameWithType: "ChangeFeedProcessorOptions.getLeaseExpirationInterval()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseExpirationInterval()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseExpirationInterval*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the interval for which the lease is taken on a lease representing a partition.\n\nIf the lease is not renewed within this interval, it will cause it to expire and ownership of the partition will move to another <xref uid=\"com.azure.cosmos.ChangeFeedProcessor\" data-throw-if-not-resolved=\"false\">ChangeFeedProcessor</xref> instance."
  syntax:
    content: "public Duration getLeaseExpirationInterval()"
    return:
      type: "java.time.Duration"
      description: "the interval for which the lease is taken on a lease representing a partition."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeasePrefix()"
  id: "getLeasePrefix()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getLeasePrefix()"
  nameWithType: "ChangeFeedProcessorOptions.getLeasePrefix()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeasePrefix()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeasePrefix*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets a prefix to be used as part of the lease ID.\n\nThis can be used to support multiple instances of <xref uid=\"com.azure.cosmos.ChangeFeedProcessor\" data-throw-if-not-resolved=\"false\">ChangeFeedProcessor</xref> instances pointing at the same feed while using the same auxiliary collection."
  syntax:
    content: "public String getLeasePrefix()"
    return:
      type: "java.lang.String"
      description: "a prefix to be used as part of the lease ID."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseRenewInterval()"
  id: "getLeaseRenewInterval()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getLeaseRenewInterval()"
  nameWithType: "ChangeFeedProcessorOptions.getLeaseRenewInterval()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseRenewInterval()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseRenewInterval*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the renew interval for all leases for partitions currently held by <xref uid=\"com.azure.cosmos.ChangeFeedProcessor\" data-throw-if-not-resolved=\"false\">ChangeFeedProcessor</xref> instance."
  syntax:
    content: "public Duration getLeaseRenewInterval()"
    return:
      type: "java.time.Duration"
      description: "the renew interval for all leases for partitions."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxItemCount()"
  id: "getMaxItemCount()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getMaxItemCount()"
  nameWithType: "ChangeFeedProcessorOptions.getMaxItemCount()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxItemCount()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxItemCount*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the maximum number of items to be returned in the enumeration operation in the Azure Cosmos DB service."
  syntax:
    content: "public int getMaxItemCount()"
    return:
      type: "int"
      description: "the maximum number of items to be returned in the enumeration operation in the Azure Cosmos DB service."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxScaleCount()"
  id: "getMaxScaleCount()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getMaxScaleCount()"
  nameWithType: "ChangeFeedProcessorOptions.getMaxScaleCount()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxScaleCount()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxScaleCount*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the maximum number of partitions the host can serve.\n\nThis can be used property to limit the number of partitions for the host and thus override equal distribution (which is the default) of leases between hosts. DEFAULT is 0 (unlimited)."
  syntax:
    content: "public int getMaxScaleCount()"
    return:
      type: "int"
      description: "the maximum number of partitions the host can serve."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getMinScaleCount()"
  id: "getMinScaleCount()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getMinScaleCount()"
  nameWithType: "ChangeFeedProcessorOptions.getMinScaleCount()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getMinScaleCount()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getMinScaleCount*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the minimum partition count for the host.\n\nThis can be used to increase the number of partitions for the host and thus override equal distribution (which is the default) of leases between hosts."
  syntax:
    content: "public int getMinScaleCount()"
    return:
      type: "int"
      description: "the minimum scale count for the host."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartContinuation()"
  id: "getStartContinuation()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getStartContinuation()"
  nameWithType: "ChangeFeedProcessorOptions.getStartContinuation()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartContinuation()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartContinuation*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the start request continuation token to start looking for changes after.\n\nThis is only used when lease store is not initialized and is ignored if a lease for partition exists and has continuation token. If this is specified, both StartTime and StartFromBeginning are ignored."
  syntax:
    content: "public String getStartContinuation()"
    return:
      type: "java.lang.String"
      description: "the start request continuation token to start looking for changes after."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartFromBeginning()"
  id: "getStartFromBeginning()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getStartFromBeginning()"
  nameWithType: "ChangeFeedProcessorOptions.getStartFromBeginning()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartFromBeginning()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartFromBeginning*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets a value indicating whether change feed in the Azure Cosmos DB service should start from beginning (true) or from current (false). By default it's start from current (false).\n\nThis is only used when: (1) Lease store is not initialized and is ignored if a lease for partition exists and has continuation token. (2) StartContinuation is not specified. (3) StartTime is not specified."
  syntax:
    content: "public boolean getStartFromBeginning()"
    return:
      type: "boolean"
      description: "a value indicating whether change feed in the Azure Cosmos DB service should start from."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartTime()"
  id: "getStartTime()"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "getStartTime()"
  nameWithType: "ChangeFeedProcessorOptions.getStartTime()"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartTime()"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartTime*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the time (exclusive) to start looking for changes after.\n\nThis is only used when: (1) Lease store is not initialized and is ignored if a lease for partition exists and has continuation token. (2) StartContinuation is not specified. If this is specified, StartFromBeginning is ignored."
  syntax:
    content: "public OffsetDateTime getStartTime()"
    return:
      type: "java.time.OffsetDateTime"
      description: "the time (exclusive) to start looking for changes after."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setDiscardExistingLeases(boolean)"
  id: "setDiscardExistingLeases(boolean)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setDiscardExistingLeases(boolean discardExistingLeases)"
  nameWithType: "ChangeFeedProcessorOptions.setDiscardExistingLeases(boolean discardExistingLeases)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setDiscardExistingLeases(boolean discardExistingLeases)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setDiscardExistingLeases*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets a value indicating whether on start of the host all existing leases should be deleted and the host should start from scratch."
  syntax:
    content: "public ChangeFeedProcessorOptions setDiscardExistingLeases(boolean discardExistingLeases)"
    parameters:
    - id: "discardExistingLeases"
      type: "boolean"
      description: "Indicates whether to discard all existing leases if true"
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setFeedPollDelay(java.time.Duration)"
  id: "setFeedPollDelay(java.time.Duration)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setFeedPollDelay(Duration feedPollDelay)"
  nameWithType: "ChangeFeedProcessorOptions.setFeedPollDelay(Duration feedPollDelay)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setFeedPollDelay(Duration feedPollDelay)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setFeedPollDelay*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the delay in between polling a partition for new changes on the feed, after all current changes are drained."
  syntax:
    content: "public ChangeFeedProcessorOptions setFeedPollDelay(Duration feedPollDelay)"
    parameters:
    - id: "feedPollDelay"
      type: "java.time.Duration"
      description: "the delay in between polling a partition for new changes on the feed, after all current \n changes are drained."
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseAcquireInterval(java.time.Duration)"
  id: "setLeaseAcquireInterval(java.time.Duration)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setLeaseAcquireInterval(Duration leaseAcquireInterval)"
  nameWithType: "ChangeFeedProcessorOptions.setLeaseAcquireInterval(Duration leaseAcquireInterval)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseAcquireInterval(Duration leaseAcquireInterval)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseAcquireInterval*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets he interval to kick off a task to compute if partitions are distributed evenly among known host instances."
  syntax:
    content: "public ChangeFeedProcessorOptions setLeaseAcquireInterval(Duration leaseAcquireInterval)"
    parameters:
    - id: "leaseAcquireInterval"
      type: "java.time.Duration"
      description: "he interval to kick off a task to compute if partitions are distributed evenly \n among known host instances."
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseExpirationInterval(java.time.Duration)"
  id: "setLeaseExpirationInterval(java.time.Duration)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setLeaseExpirationInterval(Duration leaseExpirationInterval)"
  nameWithType: "ChangeFeedProcessorOptions.setLeaseExpirationInterval(Duration leaseExpirationInterval)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseExpirationInterval(Duration leaseExpirationInterval)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseExpirationInterval*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the interval for which the lease is taken on a lease representing a partition.\n\nIf the lease is not renewed within this interval, it will cause it to expire and ownership of the partition will move to another <xref uid=\"com.azure.cosmos.ChangeFeedProcessor\" data-throw-if-not-resolved=\"false\">ChangeFeedProcessor</xref> instance."
  syntax:
    content: "public ChangeFeedProcessorOptions setLeaseExpirationInterval(Duration leaseExpirationInterval)"
    parameters:
    - id: "leaseExpirationInterval"
      type: "java.time.Duration"
      description: "the interval for which the lease is taken on a lease representing a partition."
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeasePrefix(java.lang.String)"
  id: "setLeasePrefix(java.lang.String)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setLeasePrefix(String leasePrefix)"
  nameWithType: "ChangeFeedProcessorOptions.setLeasePrefix(String leasePrefix)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeasePrefix(String leasePrefix)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeasePrefix*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets a prefix to be used as part of the lease ID."
  syntax:
    content: "public ChangeFeedProcessorOptions setLeasePrefix(String leasePrefix)"
    parameters:
    - id: "leasePrefix"
      type: "java.lang.String"
      description: "a prefix to be used as part of the lease ID."
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseRenewInterval(java.time.Duration)"
  id: "setLeaseRenewInterval(java.time.Duration)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setLeaseRenewInterval(Duration leaseRenewInterval)"
  nameWithType: "ChangeFeedProcessorOptions.setLeaseRenewInterval(Duration leaseRenewInterval)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseRenewInterval(Duration leaseRenewInterval)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseRenewInterval*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the renew interval for all leases for partitions currently held by <xref uid=\"com.azure.cosmos.ChangeFeedProcessor\" data-throw-if-not-resolved=\"false\">ChangeFeedProcessor</xref> instance."
  syntax:
    content: "public ChangeFeedProcessorOptions setLeaseRenewInterval(Duration leaseRenewInterval)"
    parameters:
    - id: "leaseRenewInterval"
      type: "java.time.Duration"
      description: "the renew interval for all leases for partitions currently held by\n <xref uid=\"com.azure.cosmos.ChangeFeedProcessor\" data-throw-if-not-resolved=\"false\">ChangeFeedProcessor</xref> instance."
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxItemCount(int)"
  id: "setMaxItemCount(int)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setMaxItemCount(int maxItemCount)"
  nameWithType: "ChangeFeedProcessorOptions.setMaxItemCount(int maxItemCount)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxItemCount(int maxItemCount)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxItemCount*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the maximum number of items to be returned in the enumeration operation."
  syntax:
    content: "public ChangeFeedProcessorOptions setMaxItemCount(int maxItemCount)"
    parameters:
    - id: "maxItemCount"
      type: "int"
      description: "the maximum number of items to be returned in the enumeration operation."
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxScaleCount(int)"
  id: "setMaxScaleCount(int)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setMaxScaleCount(int maxScaleCount)"
  nameWithType: "ChangeFeedProcessorOptions.setMaxScaleCount(int maxScaleCount)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxScaleCount(int maxScaleCount)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxScaleCount*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the maximum number of partitions the host can serve."
  syntax:
    content: "public ChangeFeedProcessorOptions setMaxScaleCount(int maxScaleCount)"
    parameters:
    - id: "maxScaleCount"
      type: "int"
      description: "the maximum number of partitions the host can serve."
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setMinScaleCount(int)"
  id: "setMinScaleCount(int)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setMinScaleCount(int minScaleCount)"
  nameWithType: "ChangeFeedProcessorOptions.setMinScaleCount(int minScaleCount)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setMinScaleCount(int minScaleCount)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setMinScaleCount*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the minimum partition count for the host.\n\nThis can be used to increase the number of partitions for the host and thus override equal distribution (which is the default) of leases between hosts."
  syntax:
    content: "public ChangeFeedProcessorOptions setMinScaleCount(int minScaleCount)"
    parameters:
    - id: "minScaleCount"
      type: "int"
      description: "the minimum partition count for the host."
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartContinuation(java.lang.String)"
  id: "setStartContinuation(java.lang.String)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setStartContinuation(String startContinuation)"
  nameWithType: "ChangeFeedProcessorOptions.setStartContinuation(String startContinuation)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartContinuation(String startContinuation)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartContinuation*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the start request continuation token to start looking for changes after.\n\nThis is only used when lease store is not initialized and is ignored if a lease for partition exists and has continuation token. If this is specified, both StartTime and StartFromBeginning are ignored."
  syntax:
    content: "public ChangeFeedProcessorOptions setStartContinuation(String startContinuation)"
    parameters:
    - id: "startContinuation"
      type: "java.lang.String"
      description: "the start request continuation token to start looking for changes after."
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartFromBeginning(boolean)"
  id: "setStartFromBeginning(boolean)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setStartFromBeginning(boolean startFromBeginning)"
  nameWithType: "ChangeFeedProcessorOptions.setStartFromBeginning(boolean startFromBeginning)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartFromBeginning(boolean startFromBeginning)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartFromBeginning*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets a value indicating whether change feed in the Azure Cosmos DB service should start from beginning.\n\nThis is only used when: (1) Lease store is not initialized and is ignored if a lease for partition exists and has continuation token. (2) StartContinuation is not specified. (3) StartTime is not specified."
  syntax:
    content: "public ChangeFeedProcessorOptions setStartFromBeginning(boolean startFromBeginning)"
    parameters:
    - id: "startFromBeginning"
      type: "boolean"
      description: "Indicates to start from beginning if true"
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartTime(java.time.OffsetDateTime)"
  id: "setStartTime(java.time.OffsetDateTime)"
  parent: "com.azure.cosmos.ChangeFeedProcessorOptions"
  langs:
  - "java"
  name: "setStartTime(OffsetDateTime startTime)"
  nameWithType: "ChangeFeedProcessorOptions.setStartTime(OffsetDateTime startTime)"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartTime(OffsetDateTime startTime)"
  overload: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartTime*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the time (exclusive) to start looking for changes after (UTC time).\n\nThis is only used when: (1) Lease store is not initialized and is ignored if a lease for partition exists and has continuation token. (2) StartContinuation is not specified. If this is specified, StartFromBeginning is ignored."
  syntax:
    content: "public ChangeFeedProcessorOptions setStartTime(OffsetDateTime startTime)"
    parameters:
    - id: "startTime"
      type: "java.time.OffsetDateTime"
      description: "the time (exclusive) to start looking for changes after."
    return:
      type: "com.azure.cosmos.ChangeFeedProcessorOptions"
      description: "the current ChangeFeedProcessorOptions instance."
references:
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.ChangeFeedProcessorOptions*"
  name: "ChangeFeedProcessorOptions"
  nameWithType: "ChangeFeedProcessorOptions.ChangeFeedProcessorOptions"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.ChangeFeedProcessorOptions"
  package: "com.azure.cosmos"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseRenewInterval*"
  name: "getLeaseRenewInterval"
  nameWithType: "ChangeFeedProcessorOptions.getLeaseRenewInterval"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseRenewInterval"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseRenewInterval*"
  name: "setLeaseRenewInterval"
  nameWithType: "ChangeFeedProcessorOptions.setLeaseRenewInterval"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseRenewInterval"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseAcquireInterval*"
  name: "getLeaseAcquireInterval"
  nameWithType: "ChangeFeedProcessorOptions.getLeaseAcquireInterval"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseAcquireInterval"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseAcquireInterval*"
  name: "setLeaseAcquireInterval"
  nameWithType: "ChangeFeedProcessorOptions.setLeaseAcquireInterval"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseAcquireInterval"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseExpirationInterval*"
  name: "getLeaseExpirationInterval"
  nameWithType: "ChangeFeedProcessorOptions.getLeaseExpirationInterval"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeaseExpirationInterval"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseExpirationInterval*"
  name: "setLeaseExpirationInterval"
  nameWithType: "ChangeFeedProcessorOptions.setLeaseExpirationInterval"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeaseExpirationInterval"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getFeedPollDelay*"
  name: "getFeedPollDelay"
  nameWithType: "ChangeFeedProcessorOptions.getFeedPollDelay"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getFeedPollDelay"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setFeedPollDelay*"
  name: "setFeedPollDelay"
  nameWithType: "ChangeFeedProcessorOptions.setFeedPollDelay"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setFeedPollDelay"
  package: "com.azure.cosmos"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeasePrefix*"
  name: "getLeasePrefix"
  nameWithType: "ChangeFeedProcessorOptions.getLeasePrefix"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getLeasePrefix"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeasePrefix*"
  name: "setLeasePrefix"
  nameWithType: "ChangeFeedProcessorOptions.setLeasePrefix"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setLeasePrefix"
  package: "com.azure.cosmos"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxItemCount*"
  name: "getMaxItemCount"
  nameWithType: "ChangeFeedProcessorOptions.getMaxItemCount"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxItemCount"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxItemCount*"
  name: "setMaxItemCount"
  nameWithType: "ChangeFeedProcessorOptions.setMaxItemCount"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxItemCount"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartContinuation*"
  name: "getStartContinuation"
  nameWithType: "ChangeFeedProcessorOptions.getStartContinuation"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartContinuation"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartContinuation*"
  name: "setStartContinuation"
  nameWithType: "ChangeFeedProcessorOptions.setStartContinuation"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartContinuation"
  package: "com.azure.cosmos"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartTime*"
  name: "getStartTime"
  nameWithType: "ChangeFeedProcessorOptions.getStartTime"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartTime"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartTime*"
  name: "setStartTime"
  nameWithType: "ChangeFeedProcessorOptions.setStartTime"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartTime"
  package: "com.azure.cosmos"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartFromBeginning*"
  name: "getStartFromBeginning"
  nameWithType: "ChangeFeedProcessorOptions.getStartFromBeginning"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getStartFromBeginning"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartFromBeginning*"
  name: "setStartFromBeginning"
  nameWithType: "ChangeFeedProcessorOptions.setStartFromBeginning"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setStartFromBeginning"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getMinScaleCount*"
  name: "getMinScaleCount"
  nameWithType: "ChangeFeedProcessorOptions.getMinScaleCount"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getMinScaleCount"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setMinScaleCount*"
  name: "setMinScaleCount"
  nameWithType: "ChangeFeedProcessorOptions.setMinScaleCount"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setMinScaleCount"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxScaleCount*"
  name: "getMaxScaleCount"
  nameWithType: "ChangeFeedProcessorOptions.getMaxScaleCount"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getMaxScaleCount"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxScaleCount*"
  name: "setMaxScaleCount"
  nameWithType: "ChangeFeedProcessorOptions.setMaxScaleCount"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setMaxScaleCount"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.getDiscardExistingLeases*"
  name: "getDiscardExistingLeases"
  nameWithType: "ChangeFeedProcessorOptions.getDiscardExistingLeases"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.getDiscardExistingLeases"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ChangeFeedProcessorOptions.setDiscardExistingLeases*"
  name: "setDiscardExistingLeases"
  nameWithType: "ChangeFeedProcessorOptions.setDiscardExistingLeases"
  fullName: "com.azure.cosmos.ChangeFeedProcessorOptions.setDiscardExistingLeases"
  package: "com.azure.cosmos"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
