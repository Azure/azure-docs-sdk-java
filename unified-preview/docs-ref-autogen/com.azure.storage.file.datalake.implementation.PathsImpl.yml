### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl"
  id: "PathsImpl"
  parent: "com.azure.storage.file.datalake.implementation"
  children:
  - "com.azure.storage.file.datalake.implementation.PathsImpl.PathsImpl(com.azure.storage.file.datalake.implementation.DataLakeStorageClientImpl)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.Long,java.lang.Integer,java.lang.Long,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.createWithRestResponseAsync(com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.createWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathResourceType,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathRenameMode,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.storage.file.datalake.implementation.models.SourceModifiedAccessConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.deleteWithRestResponseAsync(com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.deleteWithRestResponseAsync(java.lang.Boolean,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.flushDataWithRestResponseAsync(com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.flushDataWithRestResponseAsync(java.lang.Integer,java.lang.Long,java.lang.Boolean,java.lang.Boolean,java.lang.Long,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.getPropertiesWithRestResponseAsync(com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.getPropertiesWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathGetPropertiesAction,java.lang.Boolean,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathLeaseAction,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathLeaseAction,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.readWithRestResponseAsync(com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.readWithRestResponseAsync(java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.setAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.setAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.updateWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathUpdateAction,reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.core.util.Context)"
  - "com.azure.storage.file.datalake.implementation.PathsImpl.updateWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathUpdateAction,reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.Long,java.lang.Boolean,java.lang.Boolean,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "PathsImpl"
  nameWithType: "PathsImpl"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl"
  type: "Class"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "An instance of this class provides access to all the operations defined in Paths."
  syntax:
    content: "public final class PathsImpl"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.PathsImpl(com.azure.storage.file.datalake.implementation.DataLakeStorageClientImpl)"
  id: "PathsImpl(com.azure.storage.file.datalake.implementation.DataLakeStorageClientImpl)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "PathsImpl(DataLakeStorageClientImpl client)"
  nameWithType: "PathsImpl.PathsImpl(DataLakeStorageClientImpl client)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.PathsImpl(DataLakeStorageClientImpl client)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.PathsImpl*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Initializes an instance of PathsImpl."
  syntax:
    content: "public PathsImpl(DataLakeStorageClientImpl client)"
    parameters:
    - id: "client"
      type: "com.azure.storage.file.datalake.implementation.DataLakeStorageClientImpl"
      description: "the instance of the service client containing this operation class."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.core.util.Context)"
  id: "appendDataWithRestResponseAsync(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Context context)"
  nameWithType: "PathsImpl.appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Append data to the file."
  syntax:
    content: "public Mono<PathsAppendDataResponse> appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Context context)"
    parameters:
    - id: "body"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "Initial data."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.Long,java.lang.Integer,java.lang.Long,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.core.util.Context)"
  id: "appendDataWithRestResponseAsync(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.Long,java.lang.Integer,java.lang.Long,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Long position, Integer timeout, Long contentLength, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, Context context)"
  nameWithType: "PathsImpl.appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Long position, Integer timeout, Long contentLength, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Long position, Integer timeout, Long contentLength, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Append data to the file."
  syntax:
    content: "public Mono<PathsAppendDataResponse> appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Long position, Integer timeout, Long contentLength, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, Context context)"
    parameters:
    - id: "body"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "Initial data."
    - id: "position"
      type: "java.lang.Long"
      description: "This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of the file after all data has been written, and there must not be a request entity body included with the request."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "contentLength"
      type: "java.lang.Long"
      description: "Required for \"Append Data\" and \"Flush Data\".  Must be 0 for \"Flush Data\".  Must be the length of the request content in bytes for \"Append Data\"."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "pathHttpHeaders"
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "Additional parameters for the operation."
    - id: "leaseAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.createWithRestResponseAsync(com.azure.core.util.Context)"
  id: "createWithRestResponseAsync(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "createWithRestResponseAsync(Context context)"
  nameWithType: "PathsImpl.createWithRestResponseAsync(Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.createWithRestResponseAsync(Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.createWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Create File | Create Directory | Rename File | Rename Directory Create or rename a file or directory. By default, the destination is overwritten and if the destination already exists and has a lease the lease is broken. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). To fail if the destination already exists, use a conditional request with If-None-Match: \"\\*\"."
  syntax:
    content: "public Mono<PathsCreateResponse> createWithRestResponseAsync(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsCreateResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.createWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathResourceType,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathRenameMode,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.storage.file.datalake.implementation.models.SourceModifiedAccessConditions,com.azure.core.util.Context)"
  id: "createWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathResourceType,java.lang.String,com.azure.storage.file.datalake.implementation.models.PathRenameMode,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.storage.file.datalake.implementation.models.SourceModifiedAccessConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "createWithRestResponseAsync(PathResourceType resource, String continuation, PathRenameMode mode, String renameSource, String sourceLeaseId, String properties, String permissions, String umask, String requestId, Integer timeout, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, SourceModifiedAccessConditions sourceModifiedAccessConditions, Context context)"
  nameWithType: "PathsImpl.createWithRestResponseAsync(PathResourceType resource, String continuation, PathRenameMode mode, String renameSource, String sourceLeaseId, String properties, String permissions, String umask, String requestId, Integer timeout, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, SourceModifiedAccessConditions sourceModifiedAccessConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.createWithRestResponseAsync(PathResourceType resource, String continuation, PathRenameMode mode, String renameSource, String sourceLeaseId, String properties, String permissions, String umask, String requestId, Integer timeout, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, SourceModifiedAccessConditions sourceModifiedAccessConditions, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.createWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Create File | Create Directory | Rename File | Rename Directory Create or rename a file or directory. By default, the destination is overwritten and if the destination already exists and has a lease the lease is broken. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). To fail if the destination already exists, use a conditional request with If-None-Match: \"\\*\"."
  syntax:
    content: "public Mono<PathsCreateResponse> createWithRestResponseAsync(PathResourceType resource, String continuation, PathRenameMode mode, String renameSource, String sourceLeaseId, String properties, String permissions, String umask, String requestId, Integer timeout, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, SourceModifiedAccessConditions sourceModifiedAccessConditions, Context context)"
    parameters:
    - id: "resource"
      type: "com.azure.storage.file.datalake.implementation.models.PathResourceType"
      description: "Required only for Create File and Create Directory. The value must be \"file\" or \"directory\". Possible values include: 'directory', 'file'."
    - id: "continuation"
      type: "java.lang.String"
      description: "Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory."
    - id: "mode"
      type: "com.azure.storage.file.datalake.implementation.models.PathRenameMode"
      description: "Optional. Valid only when namespace is enabled. This parameter determines the behavior of the rename operation. The value must be \"legacy\" or \"posix\", and the default value will be \"posix\". Possible values include: 'legacy', 'posix'."
    - id: "renameSource"
      type: "java.lang.String"
      description: "An optional file or directory to be renamed.  The value must have the following format: \"/{filesystem}/{path}\".  If \"x-ms-properties\" is specified, the properties will overwrite the existing properties; otherwise, the existing properties will be preserved. This value must be a URL percent-encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set."
    - id: "sourceLeaseId"
      type: "java.lang.String"
      description: "A lease ID for the source path. If specified, the source path must have an active lease and the leaase ID must match."
    - id: "properties"
      type: "java.lang.String"
      description: "Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs \"n1=v1, n2=v2, ...\", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties."
    - id: "permissions"
      type: "java.lang.String"
      description: "Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported."
    - id: "umask"
      type: "java.lang.String"
      description: "Optional and only valid if Hierarchical Namespace is enabled for the account. When creating a file or directory and the parent folder does not have a default ACL, the umask restricts the permissions of the file or directory to be created.  The resulting permission is given by p bitwise and not u, where p is the permission and u is the umask.  For example, if p is 0777 and u is 0057, then the resulting permission is 0720.  The default permission is 0777 for a directory and 0666 for a file.  The default umask is 0027.  The umask must be specified in 4-digit octal notation (e.g. 0766)."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "pathHttpHeaders"
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "Additional parameters for the operation."
    - id: "leaseAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
      description: "Additional parameters for the operation."
    - id: "modifiedAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "Additional parameters for the operation."
    - id: "sourceModifiedAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.SourceModifiedAccessConditions"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsCreateResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.deleteWithRestResponseAsync(com.azure.core.util.Context)"
  id: "deleteWithRestResponseAsync(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "deleteWithRestResponseAsync(Context context)"
  nameWithType: "PathsImpl.deleteWithRestResponseAsync(Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.deleteWithRestResponseAsync(Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.deleteWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Delete File | Delete Directory Delete the file or directory. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  syntax:
    content: "public Mono<PathsDeleteResponse> deleteWithRestResponseAsync(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsDeleteResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.deleteWithRestResponseAsync(java.lang.Boolean,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  id: "deleteWithRestResponseAsync(java.lang.Boolean,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "deleteWithRestResponseAsync(Boolean recursive, String continuation, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  nameWithType: "PathsImpl.deleteWithRestResponseAsync(Boolean recursive, String continuation, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.deleteWithRestResponseAsync(Boolean recursive, String continuation, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.deleteWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Delete File | Delete Directory Delete the file or directory. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  syntax:
    content: "public Mono<PathsDeleteResponse> deleteWithRestResponseAsync(Boolean recursive, String continuation, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
    parameters:
    - id: "recursive"
      type: "java.lang.Boolean"
      description: "Required."
    - id: "continuation"
      type: "java.lang.String"
      description: "Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
      description: "Additional parameters for the operation."
    - id: "modifiedAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsDeleteResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.flushDataWithRestResponseAsync(com.azure.core.util.Context)"
  id: "flushDataWithRestResponseAsync(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "flushDataWithRestResponseAsync(Context context)"
  nameWithType: "PathsImpl.flushDataWithRestResponseAsync(Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.flushDataWithRestResponseAsync(Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.flushDataWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Set the owner, group, permissions, or access control list for a path."
  syntax:
    content: "public Mono<PathsFlushDataResponse> flushDataWithRestResponseAsync(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsFlushDataResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.flushDataWithRestResponseAsync(java.lang.Integer,java.lang.Long,java.lang.Boolean,java.lang.Boolean,java.lang.Long,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  id: "flushDataWithRestResponseAsync(java.lang.Integer,java.lang.Long,java.lang.Boolean,java.lang.Boolean,java.lang.Long,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "flushDataWithRestResponseAsync(Integer timeout, Long position, Boolean retainUncommittedData, Boolean close, Long contentLength, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  nameWithType: "PathsImpl.flushDataWithRestResponseAsync(Integer timeout, Long position, Boolean retainUncommittedData, Boolean close, Long contentLength, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.flushDataWithRestResponseAsync(Integer timeout, Long position, Boolean retainUncommittedData, Boolean close, Long contentLength, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.flushDataWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Set the owner, group, permissions, or access control list for a path."
  syntax:
    content: "public Mono<PathsFlushDataResponse> flushDataWithRestResponseAsync(Integer timeout, Long position, Boolean retainUncommittedData, Boolean close, Long contentLength, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
    parameters:
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "position"
      type: "java.lang.Long"
      description: "This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of the file after all data has been written, and there must not be a request entity body included with the request."
    - id: "retainUncommittedData"
      type: "java.lang.Boolean"
      description: "Valid only for flush operations.  If \"true\", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted after the flush operation.  The default is false.  Data at offsets less than the specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future flush operation."
    - id: "close"
      type: "java.lang.Boolean"
      description: "Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled, a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter is valid only when the action is \"flush\" and change notifications are enabled. If the value of close is \"true\" and the flush operation completes successfully, the service raises a file change notification with a property indicating that this is the final update (the file stream has been closed). If \"false\" a change notification is raised indicating the file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that the file stream has been closed.\"."
    - id: "contentLength"
      type: "java.lang.Long"
      description: "Required for \"Append Data\" and \"Flush Data\".  Must be 0 for \"Flush Data\".  Must be the length of the request content in bytes for \"Append Data\"."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "pathHttpHeaders"
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "Additional parameters for the operation."
    - id: "leaseAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
      description: "Additional parameters for the operation."
    - id: "modifiedAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsFlushDataResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.getPropertiesWithRestResponseAsync(com.azure.core.util.Context)"
  id: "getPropertiesWithRestResponseAsync(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "getPropertiesWithRestResponseAsync(Context context)"
  nameWithType: "PathsImpl.getPropertiesWithRestResponseAsync(Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.getPropertiesWithRestResponseAsync(Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.getPropertiesWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Get Properties | Get Status | Get Access Control List Get Properties returns all system and user defined properties for a path. Get Status returns all system defined properties for a path. Get Access Control List returns the access control list for a path. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  syntax:
    content: "public Mono<PathsGetPropertiesResponse> getPropertiesWithRestResponseAsync(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsGetPropertiesResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.getPropertiesWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathGetPropertiesAction,java.lang.Boolean,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  id: "getPropertiesWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathGetPropertiesAction,java.lang.Boolean,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "getPropertiesWithRestResponseAsync(PathGetPropertiesAction action, Boolean upn, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  nameWithType: "PathsImpl.getPropertiesWithRestResponseAsync(PathGetPropertiesAction action, Boolean upn, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.getPropertiesWithRestResponseAsync(PathGetPropertiesAction action, Boolean upn, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.getPropertiesWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Get Properties | Get Status | Get Access Control List Get Properties returns all system and user defined properties for a path. Get Status returns all system defined properties for a path. Get Access Control List returns the access control list for a path. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  syntax:
    content: "public Mono<PathsGetPropertiesResponse> getPropertiesWithRestResponseAsync(PathGetPropertiesAction action, Boolean upn, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
    parameters:
    - id: "action"
      type: "com.azure.storage.file.datalake.implementation.models.PathGetPropertiesAction"
      description: "Optional. If the value is \"getStatus\" only the system defined properties for the path are returned. If the value is \"getAccessControl\" the access control list is returned in the response headers (Hierarchical Namespace must be enabled for the account), otherwise the properties are returned. Possible values include: 'getAccessControl', 'getStatus'."
    - id: "upn"
      type: "java.lang.Boolean"
      description: "Optional. Valid only when Hierarchical Namespace is enabled for the account. If \"true\", the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to User Principal Names.  If \"false\", the values will be returned as Azure Active Directory Object IDs. The default value is false. Note that group and application Object IDs are not translated because they do not have unique friendly names."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
      description: "Additional parameters for the operation."
    - id: "modifiedAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsGetPropertiesResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathLeaseAction,com.azure.core.util.Context)"
  id: "leaseWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathLeaseAction,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Context context)"
  nameWithType: "PathsImpl.leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Lease Path Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  syntax:
    content: "public Mono<PathsLeaseResponse> leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Context context)"
    parameters:
    - id: "xMsLeaseAction"
      type: "com.azure.storage.file.datalake.implementation.models.PathLeaseAction"
      description: "There are five lease actions: \"acquire\", \"break\", \"change\", \"renew\", and \"release\". Use \"acquire\" and specify the \"x-ms-proposed-lease-id\" and \"x-ms-lease-duration\" to acquire a new lease. Use \"break\" to break an existing lease. When a lease is broken, the lease break period is allowed to elapse, during which time no lease operation except break and release can be performed on the file. When a lease is successfully broken, the response indicates the interval in seconds until a new lease can be acquired. Use \"change\" and specify the current lease ID in \"x-ms-lease-id\" and the new lease ID in \"x-ms-proposed-lease-id\" to change the lease ID of an active lease. Use \"renew\" and specify the \"x-ms-lease-id\" to renew an existing lease. Use \"release\" and specify the \"x-ms-lease-id\" to release a lease. Possible values include: 'acquire', 'break', 'change', 'renew', 'release'."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathLeaseAction,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  id: "leaseWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathLeaseAction,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Integer xMsLeaseDuration, Integer xMsLeaseBreakPeriod, String proposedLeaseId, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  nameWithType: "PathsImpl.leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Integer xMsLeaseDuration, Integer xMsLeaseBreakPeriod, String proposedLeaseId, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Integer xMsLeaseDuration, Integer xMsLeaseBreakPeriod, String proposedLeaseId, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Lease Path Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  syntax:
    content: "public Mono<PathsLeaseResponse> leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Integer xMsLeaseDuration, Integer xMsLeaseBreakPeriod, String proposedLeaseId, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
    parameters:
    - id: "xMsLeaseAction"
      type: "com.azure.storage.file.datalake.implementation.models.PathLeaseAction"
      description: "There are five lease actions: \"acquire\", \"break\", \"change\", \"renew\", and \"release\". Use \"acquire\" and specify the \"x-ms-proposed-lease-id\" and \"x-ms-lease-duration\" to acquire a new lease. Use \"break\" to break an existing lease. When a lease is broken, the lease break period is allowed to elapse, during which time no lease operation except break and release can be performed on the file. When a lease is successfully broken, the response indicates the interval in seconds until a new lease can be acquired. Use \"change\" and specify the current lease ID in \"x-ms-lease-id\" and the new lease ID in \"x-ms-proposed-lease-id\" to change the lease ID of an active lease. Use \"renew\" and specify the \"x-ms-lease-id\" to renew an existing lease. Use \"release\" and specify the \"x-ms-lease-id\" to release a lease. Possible values include: 'acquire', 'break', 'change', 'renew', 'release'."
    - id: "xMsLeaseDuration"
      type: "java.lang.Integer"
      description: "The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration must be between 15 and 60 seconds or -1 for infinite lease."
    - id: "xMsLeaseBreakPeriod"
      type: "java.lang.Integer"
      description: "The lease break period duration is optional to break a lease, and  specifies the break period of the lease in seconds.  The lease break  duration must be between 0 and 60 seconds."
    - id: "proposedLeaseId"
      type: "java.lang.String"
      description: "Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
      description: "Additional parameters for the operation."
    - id: "modifiedAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.readWithRestResponseAsync(com.azure.core.util.Context)"
  id: "readWithRestResponseAsync(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "readWithRestResponseAsync(Context context)"
  nameWithType: "PathsImpl.readWithRestResponseAsync(Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.readWithRestResponseAsync(Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.readWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Read File Read the contents of a file. For read operations, range requests are supported. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  syntax:
    content: "public Mono<PathsReadResponse> readWithRestResponseAsync(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsReadResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.readWithRestResponseAsync(java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  id: "readWithRestResponseAsync(java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "readWithRestResponseAsync(String range, Boolean xMsRangeGetContentMd5, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  nameWithType: "PathsImpl.readWithRestResponseAsync(String range, Boolean xMsRangeGetContentMd5, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.readWithRestResponseAsync(String range, Boolean xMsRangeGetContentMd5, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.readWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Read File Read the contents of a file. For read operations, range requests are supported. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  syntax:
    content: "public Mono<PathsReadResponse> readWithRestResponseAsync(String range, Boolean xMsRangeGetContentMd5, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
    parameters:
    - id: "range"
      type: "java.lang.String"
      description: "The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved."
    - id: "xMsRangeGetContentMd5"
      type: "java.lang.Boolean"
      description: "Optional. When this header is set to \"true\" and specified together with the Range header, the service returns the MD5 hash for the range, as long as the range is less than or equal to 4MB in size. If this header is specified without the Range header, the service returns status code 400 (Bad Request). If this header is set to true when the range exceeds 4 MB in size, the service returns status code 400 (Bad Request)."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
      description: "Additional parameters for the operation."
    - id: "modifiedAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsReadResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.setAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  id: "setAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "setAccessControlWithRestResponseAsync(Context context)"
  nameWithType: "PathsImpl.setAccessControlWithRestResponseAsync(Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.setAccessControlWithRestResponseAsync(Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.setAccessControlWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Set the owner, group, permissions, or access control list for a path."
  syntax:
    content: "public Mono<PathsSetAccessControlResponse> setAccessControlWithRestResponseAsync(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsSetAccessControlResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.setAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  id: "setAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "setAccessControlWithRestResponseAsync(Integer timeout, String owner, String group, String permissions, String acl, String requestId, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  nameWithType: "PathsImpl.setAccessControlWithRestResponseAsync(Integer timeout, String owner, String group, String permissions, String acl, String requestId, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.setAccessControlWithRestResponseAsync(Integer timeout, String owner, String group, String permissions, String acl, String requestId, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.setAccessControlWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Set the owner, group, permissions, or access control list for a path."
  syntax:
    content: "public Mono<PathsSetAccessControlResponse> setAccessControlWithRestResponseAsync(Integer timeout, String owner, String group, String permissions, String acl, String requestId, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
    parameters:
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "owner"
      type: "java.lang.String"
      description: "Optional. The owner of the blob or directory."
    - id: "group"
      type: "java.lang.String"
      description: "Optional. The owning group of the blob or directory."
    - id: "permissions"
      type: "java.lang.String"
      description: "Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported."
    - id: "acl"
      type: "java.lang.String"
      description: "Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format \"[scope:][type]:[id]:[permissions]\"."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "leaseAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
      description: "Additional parameters for the operation."
    - id: "modifiedAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsSetAccessControlResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.updateWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathUpdateAction,reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.core.util.Context)"
  id: "updateWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathUpdateAction,reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "updateWithRestResponseAsync(PathUpdateAction action, Flux<ByteBuffer> body, Context context)"
  nameWithType: "PathsImpl.updateWithRestResponseAsync(PathUpdateAction action, Flux<ByteBuffer> body, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.updateWithRestResponseAsync(PathUpdateAction action, Flux<ByteBuffer> body, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.updateWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Append Data | Flush Data | Set Properties | Set Access Control Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, sets properties for a file or directory, or sets access control for a file or directory. Data can only be appended to a file. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  syntax:
    content: "public Mono<PathsUpdateResponse> updateWithRestResponseAsync(PathUpdateAction action, Flux<ByteBuffer> body, Context context)"
    parameters:
    - id: "action"
      type: "com.azure.storage.file.datalake.implementation.models.PathUpdateAction"
      description: "The action must be \"append\" to upload data to be appended to a file, \"flush\" to flush previously uploaded data to a file, \"setProperties\" to set the properties of a file or directory, or \"setAccessControl\" to set the owner, group, permissions, or access control list for a file or directory.  Note that Hierarchical Namespace must be enabled for the account in order to use access control.  Also note that the Access Control List (ACL) includes permissions for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl request headers are mutually exclusive. Possible values include: 'append', 'flush', 'setProperties', 'setAccessControl'."
    - id: "body"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "Initial data."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsUpdateResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.updateWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathUpdateAction,reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.Long,java.lang.Boolean,java.lang.Boolean,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  id: "updateWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathUpdateAction,reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.Long,java.lang.Boolean,java.lang.Boolean,java.lang.Long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.datalake.implementation.PathsImpl"
  langs:
  - "java"
  name: "updateWithRestResponseAsync(PathUpdateAction action, Flux<ByteBuffer> body, Long position, Boolean retainUncommittedData, Boolean close, Long contentLength, String properties, String owner, String group, String permissions, String acl, String requestId, Integer timeout, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  nameWithType: "PathsImpl.updateWithRestResponseAsync(PathUpdateAction action, Flux<ByteBuffer> body, Long position, Boolean retainUncommittedData, Boolean close, Long contentLength, String properties, String owner, String group, String permissions, String acl, String requestId, Integer timeout, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.updateWithRestResponseAsync(PathUpdateAction action, Flux<ByteBuffer> body, Long position, Boolean retainUncommittedData, Boolean close, Long contentLength, String properties, String owner, String group, String permissions, String acl, String requestId, Integer timeout, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  overload: "com.azure.storage.file.datalake.implementation.PathsImpl.updateWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation"
  summary: "Append Data | Flush Data | Set Properties | Set Access Control Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, sets properties for a file or directory, or sets access control for a file or directory. Data can only be appended to a file. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  syntax:
    content: "public Mono<PathsUpdateResponse> updateWithRestResponseAsync(PathUpdateAction action, Flux<ByteBuffer> body, Long position, Boolean retainUncommittedData, Boolean close, Long contentLength, String properties, String owner, String group, String permissions, String acl, String requestId, Integer timeout, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
    parameters:
    - id: "action"
      type: "com.azure.storage.file.datalake.implementation.models.PathUpdateAction"
      description: "The action must be \"append\" to upload data to be appended to a file, \"flush\" to flush previously uploaded data to a file, \"setProperties\" to set the properties of a file or directory, or \"setAccessControl\" to set the owner, group, permissions, or access control list for a file or directory.  Note that Hierarchical Namespace must be enabled for the account in order to use access control.  Also note that the Access Control List (ACL) includes permissions for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl request headers are mutually exclusive. Possible values include: 'append', 'flush', 'setProperties', 'setAccessControl'."
    - id: "body"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "Initial data."
    - id: "position"
      type: "java.lang.Long"
      description: "This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of the file after all data has been written, and there must not be a request entity body included with the request."
    - id: "retainUncommittedData"
      type: "java.lang.Boolean"
      description: "Valid only for flush operations.  If \"true\", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted after the flush operation.  The default is false.  Data at offsets less than the specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future flush operation."
    - id: "close"
      type: "java.lang.Boolean"
      description: "Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled, a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter is valid only when the action is \"flush\" and change notifications are enabled. If the value of close is \"true\" and the flush operation completes successfully, the service raises a file change notification with a property indicating that this is the final update (the file stream has been closed). If \"false\" a change notification is raised indicating the file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that the file stream has been closed.\"."
    - id: "contentLength"
      type: "java.lang.Long"
      description: "Required for \"Append Data\" and \"Flush Data\".  Must be 0 for \"Flush Data\".  Must be the length of the request content in bytes for \"Append Data\"."
    - id: "properties"
      type: "java.lang.String"
      description: "Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs \"n1=v1, n2=v2, ...\", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties."
    - id: "owner"
      type: "java.lang.String"
      description: "Optional. The owner of the blob or directory."
    - id: "group"
      type: "java.lang.String"
      description: "Optional. The owning group of the blob or directory."
    - id: "permissions"
      type: "java.lang.String"
      description: "Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported."
    - id: "acl"
      type: "java.lang.String"
      description: "Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format \"[scope:][type]:[id]:[permissions]\"."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "pathHttpHeaders"
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "Additional parameters for the operation."
    - id: "leaseAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
      description: "Additional parameters for the operation."
    - id: "modifiedAccessConditions"
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsUpdateResponse>"
      description: "a Mono which performs the network request upon subscription."
references:
- uid: "com.azure.storage.file.datalake.implementation.DataLakeStorageClientImpl"
  name: "DataLakeStorageClientImpl"
  nameWithType: "DataLakeStorageClientImpl"
  fullName: "com.azure.storage.file.datalake.implementation.DataLakeStorageClientImpl"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.PathsImpl*"
  name: "PathsImpl"
  nameWithType: "PathsImpl.PathsImpl"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.PathsImpl"
  package: "com.azure.storage.file.datalake.implementation"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsCreateResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.implementation.models.PathsCreateResponse"
    name: "PathsCreateResponse"
    fullName: "com.azure.storage.file.datalake.implementation.models.PathsCreateResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.createWithRestResponseAsync*"
  name: "createWithRestResponseAsync"
  nameWithType: "PathsImpl.createWithRestResponseAsync"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.createWithRestResponseAsync"
  package: "com.azure.storage.file.datalake.implementation"
- uid: "com.azure.storage.file.datalake.implementation.models.PathResourceType"
  name: "PathResourceType"
  nameWithType: "PathResourceType"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathResourceType"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.datalake.implementation.models.PathRenameMode"
  name: "PathRenameMode"
  nameWithType: "PathRenameMode"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathRenameMode"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  name: "PathHttpHeaders"
  nameWithType: "PathHttpHeaders"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders"
- uid: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
  name: "LeaseAccessConditions"
  nameWithType: "LeaseAccessConditions"
  fullName: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  name: "ModifiedAccessConditions"
  nameWithType: "ModifiedAccessConditions"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
- uid: "com.azure.storage.file.datalake.implementation.models.SourceModifiedAccessConditions"
  name: "SourceModifiedAccessConditions"
  nameWithType: "SourceModifiedAccessConditions"
  fullName: "com.azure.storage.file.datalake.implementation.models.SourceModifiedAccessConditions"
- uid: "com.azure.storage.file.datalake.implementation.models.PathUpdateAction"
  name: "PathUpdateAction"
  nameWithType: "PathUpdateAction"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathUpdateAction"
- uid: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsUpdateResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.implementation.models.PathsUpdateResponse"
    name: "PathsUpdateResponse"
    fullName: "com.azure.storage.file.datalake.implementation.models.PathsUpdateResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.updateWithRestResponseAsync*"
  name: "updateWithRestResponseAsync"
  nameWithType: "PathsImpl.updateWithRestResponseAsync"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.updateWithRestResponseAsync"
  package: "com.azure.storage.file.datalake.implementation"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.azure.storage.file.datalake.implementation.models.PathLeaseAction"
  name: "PathLeaseAction"
  nameWithType: "PathLeaseAction"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathLeaseAction"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse"
    name: "PathsLeaseResponse"
    fullName: "com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync*"
  name: "leaseWithRestResponseAsync"
  nameWithType: "PathsImpl.leaseWithRestResponseAsync"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync"
  package: "com.azure.storage.file.datalake.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsReadResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.implementation.models.PathsReadResponse"
    name: "PathsReadResponse"
    fullName: "com.azure.storage.file.datalake.implementation.models.PathsReadResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.readWithRestResponseAsync*"
  name: "readWithRestResponseAsync"
  nameWithType: "PathsImpl.readWithRestResponseAsync"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.readWithRestResponseAsync"
  package: "com.azure.storage.file.datalake.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsGetPropertiesResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.implementation.models.PathsGetPropertiesResponse"
    name: "PathsGetPropertiesResponse"
    fullName: "com.azure.storage.file.datalake.implementation.models.PathsGetPropertiesResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.getPropertiesWithRestResponseAsync*"
  name: "getPropertiesWithRestResponseAsync"
  nameWithType: "PathsImpl.getPropertiesWithRestResponseAsync"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.getPropertiesWithRestResponseAsync"
  package: "com.azure.storage.file.datalake.implementation"
- uid: "com.azure.storage.file.datalake.implementation.models.PathGetPropertiesAction"
  name: "PathGetPropertiesAction"
  nameWithType: "PathGetPropertiesAction"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathGetPropertiesAction"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsDeleteResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.implementation.models.PathsDeleteResponse"
    name: "PathsDeleteResponse"
    fullName: "com.azure.storage.file.datalake.implementation.models.PathsDeleteResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.deleteWithRestResponseAsync*"
  name: "deleteWithRestResponseAsync"
  nameWithType: "PathsImpl.deleteWithRestResponseAsync"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.deleteWithRestResponseAsync"
  package: "com.azure.storage.file.datalake.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsSetAccessControlResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.implementation.models.PathsSetAccessControlResponse"
    name: "PathsSetAccessControlResponse"
    fullName: "com.azure.storage.file.datalake.implementation.models.PathsSetAccessControlResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.setAccessControlWithRestResponseAsync*"
  name: "setAccessControlWithRestResponseAsync"
  nameWithType: "PathsImpl.setAccessControlWithRestResponseAsync"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.setAccessControlWithRestResponseAsync"
  package: "com.azure.storage.file.datalake.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsFlushDataResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.implementation.models.PathsFlushDataResponse"
    name: "PathsFlushDataResponse"
    fullName: "com.azure.storage.file.datalake.implementation.models.PathsFlushDataResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.flushDataWithRestResponseAsync*"
  name: "flushDataWithRestResponseAsync"
  nameWithType: "PathsImpl.flushDataWithRestResponseAsync"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.flushDataWithRestResponseAsync"
  package: "com.azure.storage.file.datalake.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse"
    name: "PathsAppendDataResponse"
    fullName: "com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync*"
  name: "appendDataWithRestResponseAsync"
  nameWithType: "PathsImpl.appendDataWithRestResponseAsync"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync"
  package: "com.azure.storage.file.datalake.implementation"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.PathsService"
  name: "PathsImpl.PathsService"
  nameWithType: "PathsImpl.PathsService"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.PathsService"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.storage.file.datalake.implementation.models.PathsCreateResponse"
  name: "PathsCreateResponse"
  nameWithType: "PathsCreateResponse"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathsCreateResponse"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "java.nio.ByteBuffer"
  name: "ByteBuffer"
  nameWithType: "ByteBuffer"
  fullName: "java.nio.ByteBuffer"
- uid: "com.azure.storage.file.datalake.implementation.models.PathsUpdateResponse"
  name: "PathsUpdateResponse"
  nameWithType: "PathsUpdateResponse"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathsUpdateResponse"
- uid: "com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse"
  name: "PathsLeaseResponse"
  nameWithType: "PathsLeaseResponse"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse"
- uid: "com.azure.storage.file.datalake.implementation.models.PathsReadResponse"
  name: "PathsReadResponse"
  nameWithType: "PathsReadResponse"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathsReadResponse"
- uid: "com.azure.storage.file.datalake.implementation.models.PathsGetPropertiesResponse"
  name: "PathsGetPropertiesResponse"
  nameWithType: "PathsGetPropertiesResponse"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathsGetPropertiesResponse"
- uid: "com.azure.storage.file.datalake.implementation.models.PathsDeleteResponse"
  name: "PathsDeleteResponse"
  nameWithType: "PathsDeleteResponse"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathsDeleteResponse"
- uid: "com.azure.storage.file.datalake.implementation.models.PathsSetAccessControlResponse"
  name: "PathsSetAccessControlResponse"
  nameWithType: "PathsSetAccessControlResponse"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathsSetAccessControlResponse"
- uid: "com.azure.storage.file.datalake.implementation.models.PathsFlushDataResponse"
  name: "PathsFlushDataResponse"
  nameWithType: "PathsFlushDataResponse"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathsFlushDataResponse"
- uid: "com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse"
  name: "PathsAppendDataResponse"
  nameWithType: "PathsAppendDataResponse"
  fullName: "com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse"
