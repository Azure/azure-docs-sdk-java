### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask"
  id: "WorkerTask"
  parent: "com.azure.cosmos.implementation.changefeed.implementation"
  children:
  - "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.WorkerTask(com.azure.cosmos.implementation.changefeed.Lease,java.lang.Runnable)"
  - "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.isRunning()"
  - "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.lease()"
  - "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.run()"
  langs:
  - "java"
  name: "WorkerTask"
  nameWithType: "WorkerTask"
  fullName: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask"
  type: "Class"
  package: "com.azure.cosmos.implementation.changefeed.implementation"
  summary: "Worker task that executes in a separate thread."
  syntax:
    content: " class WorkerTask extends Thread"
  inheritance:
  - "java.lang.Object"
  - "java.lang.Thread"
  inheritedMembers:
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "java.lang.Thread.activeCount()"
  - "java.lang.Thread.blockedOn(sun.nio.ch.Interruptible)"
  - "java.lang.Thread.checkAccess()"
  - "java.lang.Thread.clone()"
  - "java.lang.Thread.countStackFrames()"
  - "java.lang.Thread.currentThread()"
  - "java.lang.Thread.dumpStack()"
  - "java.lang.Thread.enumerate(java.lang.Thread[])"
  - "java.lang.Thread.getAllStackTraces()"
  - "java.lang.Thread.getContextClassLoader()"
  - "java.lang.Thread.getDefaultUncaughtExceptionHandler()"
  - "java.lang.Thread.getId()"
  - "java.lang.Thread.getName()"
  - "java.lang.Thread.getPriority()"
  - "java.lang.Thread.getStackTrace()"
  - "java.lang.Thread.getState()"
  - "java.lang.Thread.getThreadGroup()"
  - "java.lang.Thread.getUncaughtExceptionHandler()"
  - "java.lang.Thread.holdsLock(java.lang.Object)"
  - "java.lang.Thread.interrupt()"
  - "java.lang.Thread.interrupted()"
  - "java.lang.Thread.isAlive()"
  - "java.lang.Thread.isDaemon()"
  - "java.lang.Thread.isInterrupted()"
  - "java.lang.Thread.join()"
  - "java.lang.Thread.join(long)"
  - "java.lang.Thread.join(long,int)"
  - "java.lang.Thread.onSpinWait()"
  - "java.lang.Thread.processQueue(java.lang.ref.ReferenceQueue<java.lang.Class<?>>,java.util.concurrent.ConcurrentMap<? extends java.lang.ref.WeakReference<java.lang.Class<?>>,?>)"
  - "java.lang.Thread.resume()"
  - "java.lang.Thread.run()"
  - "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
  - "java.lang.Thread.setDaemon(boolean)"
  - "java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
  - "java.lang.Thread.setName(java.lang.String)"
  - "java.lang.Thread.setPriority(int)"
  - "java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
  - "java.lang.Thread.sleep(long)"
  - "java.lang.Thread.sleep(long,int)"
  - "java.lang.Thread.start()"
  - "java.lang.Thread.stop()"
  - "java.lang.Thread.suspend()"
  - "java.lang.Thread.toString()"
  - "java.lang.Thread.yield()"
- uid: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.WorkerTask(com.azure.cosmos.implementation.changefeed.Lease,java.lang.Runnable)"
  id: "WorkerTask(com.azure.cosmos.implementation.changefeed.Lease,java.lang.Runnable)"
  parent: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask"
  langs:
  - "java"
  name: "WorkerTask(Lease lease, Runnable job)"
  nameWithType: "WorkerTask.WorkerTask(Lease lease, Runnable job)"
  fullName: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.WorkerTask(Lease lease, Runnable job)"
  overload: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.WorkerTask*"
  type: "Constructor"
  package: "com.azure.cosmos.implementation.changefeed.implementation"
  syntax:
    content: " WorkerTask(Lease lease, Runnable job)"
    parameters:
    - id: "lease"
      type: "com.azure.cosmos.implementation.changefeed.Lease"
    - id: "job"
      type: "java.lang.Runnable"
- uid: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.isRunning()"
  id: "isRunning()"
  parent: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask"
  langs:
  - "java"
  name: "isRunning()"
  nameWithType: "WorkerTask.isRunning()"
  fullName: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.isRunning()"
  overload: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.isRunning*"
  type: "Method"
  package: "com.azure.cosmos.implementation.changefeed.implementation"
  syntax:
    content: "public boolean isRunning()"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.lease()"
  id: "lease()"
  parent: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask"
  langs:
  - "java"
  name: "lease()"
  nameWithType: "WorkerTask.lease()"
  fullName: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.lease()"
  overload: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.lease*"
  type: "Method"
  package: "com.azure.cosmos.implementation.changefeed.implementation"
  syntax:
    content: "public Lease lease()"
    return:
      type: "com.azure.cosmos.implementation.changefeed.Lease"
- uid: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.run()"
  id: "run()"
  parent: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask"
  langs:
  - "java"
  name: "run()"
  nameWithType: "WorkerTask.run()"
  fullName: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.run()"
  overload: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.run*"
  type: "Method"
  package: "com.azure.cosmos.implementation.changefeed.implementation"
  syntax:
    content: "public void run()"
references:
- uid: "com.azure.cosmos.implementation.changefeed.Lease"
  name: "Lease"
  nameWithType: "Lease"
  fullName: "com.azure.cosmos.implementation.changefeed.Lease"
- uid: "java.lang.Runnable"
  spec.java:
  - uid: "java.lang.Runnable"
    name: "Runnable"
    fullName: "java.lang.Runnable"
- uid: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.WorkerTask*"
  name: "WorkerTask"
  nameWithType: "WorkerTask.WorkerTask"
  fullName: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.WorkerTask"
  package: "com.azure.cosmos.implementation.changefeed.implementation"
- uid: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.run*"
  name: "run"
  nameWithType: "WorkerTask.run"
  fullName: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.run"
  package: "com.azure.cosmos.implementation.changefeed.implementation"
- uid: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.lease*"
  name: "lease"
  nameWithType: "WorkerTask.lease"
  fullName: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.lease"
  package: "com.azure.cosmos.implementation.changefeed.implementation"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.isRunning*"
  name: "isRunning"
  nameWithType: "WorkerTask.isRunning"
  fullName: "com.azure.cosmos.implementation.changefeed.implementation.WorkerTask.isRunning"
  package: "com.azure.cosmos.implementation.changefeed.implementation"
- uid: "java.lang.Thread"
  name: "Thread"
  nameWithType: "Thread"
  fullName: "java.lang.Thread"
- uid: "java.lang.Thread.toString()"
  name: "Thread.toString()"
  nameWithType: "Thread.toString()"
  fullName: "java.lang.Thread.toString()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Thread.getUncaughtExceptionHandler()"
  name: "Thread.getUncaughtExceptionHandler()"
  nameWithType: "Thread.getUncaughtExceptionHandler()"
  fullName: "java.lang.Thread.getUncaughtExceptionHandler()"
- uid: "java.lang.Thread.isInterrupted()"
  name: "Thread.isInterrupted()"
  nameWithType: "Thread.isInterrupted()"
  fullName: "java.lang.Thread.isInterrupted()"
- uid: "java.lang.Thread.getName()"
  name: "Thread.getName()"
  nameWithType: "Thread.getName()"
  fullName: "java.lang.Thread.getName()"
- uid: "java.lang.Thread.interrupt()"
  name: "Thread.interrupt()"
  nameWithType: "Thread.interrupt()"
  fullName: "java.lang.Thread.interrupt()"
- uid: "java.lang.Thread.countStackFrames()"
  name: "Thread.countStackFrames()"
  nameWithType: "Thread.countStackFrames()"
  fullName: "java.lang.Thread.countStackFrames()"
- uid: "java.lang.Thread.isAlive()"
  name: "Thread.isAlive()"
  nameWithType: "Thread.isAlive()"
  fullName: "java.lang.Thread.isAlive()"
- uid: "java.lang.Thread.getThreadGroup()"
  name: "Thread.getThreadGroup()"
  nameWithType: "Thread.getThreadGroup()"
  fullName: "java.lang.Thread.getThreadGroup()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Thread.getAllStackTraces()"
  name: "Thread.getAllStackTraces()"
  nameWithType: "Thread.getAllStackTraces()"
  fullName: "java.lang.Thread.getAllStackTraces()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Thread.dumpStack()"
  name: "Thread.dumpStack()"
  nameWithType: "Thread.dumpStack()"
  fullName: "java.lang.Thread.dumpStack()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Thread.setDaemon(boolean)"
  name: "Thread.setDaemon(boolean)"
  nameWithType: "Thread.setDaemon(boolean)"
  fullName: "java.lang.Thread.setDaemon(boolean)"
- uid: "java.lang.Thread.blockedOn(sun.nio.ch.Interruptible)"
  name: "Thread.blockedOn(Interruptible)"
  nameWithType: "Thread.blockedOn(Interruptible)"
  fullName: "java.lang.Thread.blockedOn(sun.nio.ch.Interruptible)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Thread.resume()"
  name: "Thread.resume()"
  nameWithType: "Thread.resume()"
  fullName: "java.lang.Thread.resume()"
- uid: "java.lang.Thread.currentThread()"
  name: "Thread.currentThread()"
  nameWithType: "Thread.currentThread()"
  fullName: "java.lang.Thread.currentThread()"
- uid: "java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
  name: "Thread.setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)"
  nameWithType: "Thread.setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)"
  fullName: "java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
- uid: "java.lang.Thread.getPriority()"
  name: "Thread.getPriority()"
  nameWithType: "Thread.getPriority()"
  fullName: "java.lang.Thread.getPriority()"
- uid: "java.lang.Thread.activeCount()"
  name: "Thread.activeCount()"
  nameWithType: "Thread.activeCount()"
  fullName: "java.lang.Thread.activeCount()"
- uid: "java.lang.Thread.getStackTrace()"
  name: "Thread.getStackTrace()"
  nameWithType: "Thread.getStackTrace()"
  fullName: "java.lang.Thread.getStackTrace()"
- uid: "java.lang.Thread.sleep(long)"
  name: "Thread.sleep(long)"
  nameWithType: "Thread.sleep(long)"
  fullName: "java.lang.Thread.sleep(long)"
- uid: "java.lang.Thread.setName(java.lang.String)"
  name: "Thread.setName(String)"
  nameWithType: "Thread.setName(String)"
  fullName: "java.lang.Thread.setName(java.lang.String)"
- uid: "java.lang.Thread.yield()"
  name: "Thread.yield()"
  nameWithType: "Thread.yield()"
  fullName: "java.lang.Thread.yield()"
- uid: "java.lang.Thread.getState()"
  name: "Thread.getState()"
  nameWithType: "Thread.getState()"
  fullName: "java.lang.Thread.getState()"
- uid: "java.lang.Thread.join(long)"
  name: "Thread.join(long)"
  nameWithType: "Thread.join(long)"
  fullName: "java.lang.Thread.join(long)"
- uid: "java.lang.Thread.setPriority(int)"
  name: "Thread.setPriority(int)"
  nameWithType: "Thread.setPriority(int)"
  fullName: "java.lang.Thread.setPriority(int)"
- uid: "java.lang.Thread.onSpinWait()"
  name: "Thread.onSpinWait()"
  nameWithType: "Thread.onSpinWait()"
  fullName: "java.lang.Thread.onSpinWait()"
- uid: "java.lang.Thread.processQueue(java.lang.ref.ReferenceQueue<java.lang.Class<?>>,java.util.concurrent.ConcurrentMap<? extends java.lang.ref.WeakReference<java.lang.Class<?>>,?>)"
  name: "Thread.processQueue(ReferenceQueue<Class<?>>,ConcurrentMap<? extends WeakReference<Class<?>>,?>)"
  nameWithType: "Thread.processQueue(ReferenceQueue<Class<?>>,ConcurrentMap<? extends WeakReference<Class<?>>,?>)"
  fullName: "java.lang.Thread.processQueue(java.lang.ref.ReferenceQueue<java.lang.Class<?>>,java.util.concurrent.ConcurrentMap<? extends java.lang.ref.WeakReference<java.lang.Class<?>>,?>)"
- uid: "java.lang.Thread.getContextClassLoader()"
  name: "Thread.getContextClassLoader()"
  nameWithType: "Thread.getContextClassLoader()"
  fullName: "java.lang.Thread.getContextClassLoader()"
- uid: "java.lang.Thread.getDefaultUncaughtExceptionHandler()"
  name: "Thread.getDefaultUncaughtExceptionHandler()"
  nameWithType: "Thread.getDefaultUncaughtExceptionHandler()"
  fullName: "java.lang.Thread.getDefaultUncaughtExceptionHandler()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Thread.interrupted()"
  name: "Thread.interrupted()"
  nameWithType: "Thread.interrupted()"
  fullName: "java.lang.Thread.interrupted()"
- uid: "java.lang.Thread.holdsLock(java.lang.Object)"
  name: "Thread.holdsLock(Object)"
  nameWithType: "Thread.holdsLock(Object)"
  fullName: "java.lang.Thread.holdsLock(java.lang.Object)"
- uid: "java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
  name: "Thread.setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)"
  nameWithType: "Thread.setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)"
  fullName: "java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
- uid: "java.lang.Thread.join(long,int)"
  name: "Thread.join(long,int)"
  nameWithType: "Thread.join(long,int)"
  fullName: "java.lang.Thread.join(long,int)"
- uid: "java.lang.Thread.run()"
  name: "Thread.run()"
  nameWithType: "Thread.run()"
  fullName: "java.lang.Thread.run()"
- uid: "java.lang.Thread.enumerate(java.lang.Thread[])"
  name: "Thread.enumerate(Thread[])"
  nameWithType: "Thread.enumerate(Thread[])"
  fullName: "java.lang.Thread.enumerate(java.lang.Thread[])"
- uid: "java.lang.Thread.clone()"
  name: "Thread.clone()"
  nameWithType: "Thread.clone()"
  fullName: "java.lang.Thread.clone()"
- uid: "java.lang.Thread.checkAccess()"
  name: "Thread.checkAccess()"
  nameWithType: "Thread.checkAccess()"
  fullName: "java.lang.Thread.checkAccess()"
- uid: "java.lang.Thread.sleep(long,int)"
  name: "Thread.sleep(long,int)"
  nameWithType: "Thread.sleep(long,int)"
  fullName: "java.lang.Thread.sleep(long,int)"
- uid: "java.lang.Thread.join()"
  name: "Thread.join()"
  nameWithType: "Thread.join()"
  fullName: "java.lang.Thread.join()"
- uid: "java.lang.Thread.suspend()"
  name: "Thread.suspend()"
  nameWithType: "Thread.suspend()"
  fullName: "java.lang.Thread.suspend()"
- uid: "java.lang.Thread.start()"
  name: "Thread.start()"
  nameWithType: "Thread.start()"
  fullName: "java.lang.Thread.start()"
- uid: "java.lang.Thread.isDaemon()"
  name: "Thread.isDaemon()"
  nameWithType: "Thread.isDaemon()"
  fullName: "java.lang.Thread.isDaemon()"
- uid: "java.lang.Thread.stop()"
  name: "Thread.stop()"
  nameWithType: "Thread.stop()"
  fullName: "java.lang.Thread.stop()"
- uid: "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
  name: "Thread.setContextClassLoader(ClassLoader)"
  nameWithType: "Thread.setContextClassLoader(ClassLoader)"
  fullName: "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
- uid: "java.lang.Thread.getId()"
  name: "Thread.getId()"
  nameWithType: "Thread.getId()"
  fullName: "java.lang.Thread.getId()"
- uid: "?>>,java.util.concurrent.ConcurrentMap"
  name: "?>>,ConcurrentMap"
  nameWithType: "?>>,ConcurrentMap"
  fullName: "?>>,java.util.concurrent.ConcurrentMap"
- uid: "java.lang.Thread.processQueue(java.lang.ref.ReferenceQueue"
  name: "Thread.processQueue(ReferenceQueue"
  nameWithType: "Thread.processQueue(ReferenceQueue"
  fullName: "java.lang.Thread.processQueue(java.lang.ref.ReferenceQueue"
- uid: "? extends java.lang.ref.WeakReference"
  name: "? extends WeakReference"
  nameWithType: "? extends WeakReference"
  fullName: "? extends java.lang.ref.WeakReference"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "?>>,?>)"
  name: "?>>,?>)"
  nameWithType: "?>>,?>)"
  fullName: "?>>,?>)"
