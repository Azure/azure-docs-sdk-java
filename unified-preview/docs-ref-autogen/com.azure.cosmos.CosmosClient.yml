### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosClient"
  id: "CosmosClient"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosClient.CosmosClient(com.azure.cosmos.CosmosClientBuilder)"
  - "com.azure.cosmos.CosmosClient.asyncClient()"
  - "com.azure.cosmos.CosmosClient.close()"
  - "com.azure.cosmos.CosmosClient.convertResponse(com.azure.cosmos.CosmosAsyncDatabaseResponse)"
  - "com.azure.cosmos.CosmosClient.cosmosClientBuilder()"
  - "com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.CosmosDatabaseProperties)"
  - "com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.CosmosDatabaseProperties,com.azure.cosmos.CosmosDatabaseRequestOptions)"
  - "com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.CosmosDatabaseProperties,int)"
  - "com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.CosmosDatabaseProperties,int,com.azure.cosmos.CosmosDatabaseRequestOptions)"
  - "com.azure.cosmos.CosmosClient.createDatabase(java.lang.String)"
  - "com.azure.cosmos.CosmosClient.createDatabase(java.lang.String,int)"
  - "com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(com.azure.cosmos.CosmosDatabaseProperties)"
  - "com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(java.lang.String)"
  - "com.azure.cosmos.CosmosClient.getDatabase(java.lang.String)"
  - "com.azure.cosmos.CosmosClient.mapDatabaseResponseAndBlock(reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncDatabaseResponse>)"
  - "com.azure.cosmos.CosmosClient.queryDatabases(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.CosmosClient.queryDatabases(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.CosmosClient.readAllDatabases()"
  - "com.azure.cosmos.CosmosClient.readAllDatabases(com.azure.cosmos.FeedOptions)"
  langs:
  - "java"
  name: "CosmosClient"
  nameWithType: "CosmosClient"
  fullName: "com.azure.cosmos.CosmosClient"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Provides a client-side logical representation of the Azure Cosmos database service. SyncClient is used to perform operations in a synchronous way"
  syntax:
    content: "public class CosmosClient implements AutoCloseable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.lang.AutoCloseable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosClient.CosmosClient(com.azure.cosmos.CosmosClientBuilder)"
  id: "CosmosClient(com.azure.cosmos.CosmosClientBuilder)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "CosmosClient(CosmosClientBuilder builder)"
  nameWithType: "CosmosClient.CosmosClient(CosmosClientBuilder builder)"
  fullName: "com.azure.cosmos.CosmosClient.CosmosClient(CosmosClientBuilder builder)"
  overload: "com.azure.cosmos.CosmosClient.CosmosClient*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosClient(CosmosClientBuilder builder)"
    parameters:
    - id: "builder"
      type: "com.azure.cosmos.CosmosClientBuilder"
- uid: "com.azure.cosmos.CosmosClient.asyncClient()"
  id: "asyncClient()"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "asyncClient()"
  nameWithType: "CosmosClient.asyncClient()"
  fullName: "com.azure.cosmos.CosmosClient.asyncClient()"
  overload: "com.azure.cosmos.CosmosClient.asyncClient*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosAsyncClient asyncClient()"
    return:
      type: "com.azure.cosmos.CosmosAsyncClient"
- uid: "com.azure.cosmos.CosmosClient.close()"
  id: "close()"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "close()"
  nameWithType: "CosmosClient.close()"
  fullName: "com.azure.cosmos.CosmosClient.close()"
  overload: "com.azure.cosmos.CosmosClient.close*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Close this <xref uid=\"com.azure.cosmos.CosmosClient\" data-throw-if-not-resolved=\"false\">CosmosClient</xref> instance"
  syntax:
    content: "public void close()"
- uid: "com.azure.cosmos.CosmosClient.convertResponse(com.azure.cosmos.CosmosAsyncDatabaseResponse)"
  id: "convertResponse(com.azure.cosmos.CosmosAsyncDatabaseResponse)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "convertResponse(CosmosAsyncDatabaseResponse response)"
  nameWithType: "CosmosClient.convertResponse(CosmosAsyncDatabaseResponse response)"
  fullName: "com.azure.cosmos.CosmosClient.convertResponse(CosmosAsyncDatabaseResponse response)"
  overload: "com.azure.cosmos.CosmosClient.convertResponse*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosDatabaseResponse convertResponse(CosmosAsyncDatabaseResponse response)"
    parameters:
    - id: "response"
      type: "com.azure.cosmos.CosmosAsyncDatabaseResponse"
    return:
      type: "com.azure.cosmos.CosmosDatabaseResponse"
- uid: "com.azure.cosmos.CosmosClient.cosmosClientBuilder()"
  id: "cosmosClientBuilder()"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "cosmosClientBuilder()"
  nameWithType: "CosmosClient.cosmosClientBuilder()"
  fullName: "com.azure.cosmos.CosmosClient.cosmosClientBuilder()"
  overload: "com.azure.cosmos.CosmosClient.cosmosClientBuilder*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Instantiate the cosmos client builder to build cosmos client"
  syntax:
    content: "public static CosmosClientBuilder cosmosClientBuilder()"
    return:
      type: "com.azure.cosmos.CosmosClientBuilder"
      description: "<xref uid=\"com.azure.cosmos.CosmosClientBuilder\" data-throw-if-not-resolved=\"false\">CosmosClientBuilder</xref>"
- uid: "com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.CosmosDatabaseProperties)"
  id: "createDatabase(com.azure.cosmos.CosmosDatabaseProperties)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "createDatabase(CosmosDatabaseProperties databaseProperties)"
  nameWithType: "CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties)"
  fullName: "com.azure.cosmos.CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties)"
  overload: "com.azure.cosmos.CosmosClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database."
  syntax:
    content: "public CosmosDatabaseResponse createDatabase(CosmosDatabaseProperties databaseProperties)"
    parameters:
    - id: "databaseProperties"
      type: "com.azure.cosmos.CosmosDatabaseProperties"
      description: "<xref uid=\"com.azure.cosmos.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\">CosmosDatabaseProperties</xref> the database properties."
    return:
      type: "com.azure.cosmos.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref> with the created database."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception."
- uid: "com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.CosmosDatabaseProperties,com.azure.cosmos.CosmosDatabaseRequestOptions)"
  id: "createDatabase(com.azure.cosmos.CosmosDatabaseProperties,com.azure.cosmos.CosmosDatabaseRequestOptions)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)"
  overload: "com.azure.cosmos.CosmosClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database."
  syntax:
    content: "public CosmosDatabaseResponse createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)"
    parameters:
    - id: "databaseProperties"
      type: "com.azure.cosmos.CosmosDatabaseProperties"
      description: "<xref uid=\"com.azure.cosmos.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\">CosmosDatabaseProperties</xref> the database properties."
    - id: "options"
      type: "com.azure.cosmos.CosmosDatabaseRequestOptions"
      description: "the request options."
    return:
      type: "com.azure.cosmos.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref> with the created database."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception."
- uid: "com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.CosmosDatabaseProperties,int)"
  id: "createDatabase(com.azure.cosmos.CosmosDatabaseProperties,int)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "createDatabase(CosmosDatabaseProperties databaseProperties, int throughput)"
  nameWithType: "CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, int throughput)"
  fullName: "com.azure.cosmos.CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, int throughput)"
  overload: "com.azure.cosmos.CosmosClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database."
  syntax:
    content: "public CosmosDatabaseResponse createDatabase(CosmosDatabaseProperties databaseProperties, int throughput)"
    parameters:
    - id: "databaseProperties"
      type: "com.azure.cosmos.CosmosDatabaseProperties"
      description: "<xref uid=\"com.azure.cosmos.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\">CosmosDatabaseProperties</xref> the database properties."
    - id: "throughput"
      type: "int"
      description: "the throughput"
    return:
      type: "com.azure.cosmos.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref> with the created database."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosClient.createDatabase(com.azure.cosmos.CosmosDatabaseProperties,int,com.azure.cosmos.CosmosDatabaseRequestOptions)"
  id: "createDatabase(com.azure.cosmos.CosmosDatabaseProperties,int,com.azure.cosmos.CosmosDatabaseRequestOptions)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "createDatabase(CosmosDatabaseProperties databaseProperties, int throughput, CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, int throughput, CosmosDatabaseRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosClient.createDatabase(CosmosDatabaseProperties databaseProperties, int throughput, CosmosDatabaseRequestOptions options)"
  overload: "com.azure.cosmos.CosmosClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database."
  syntax:
    content: "public CosmosDatabaseResponse createDatabase(CosmosDatabaseProperties databaseProperties, int throughput, CosmosDatabaseRequestOptions options)"
    parameters:
    - id: "databaseProperties"
      type: "com.azure.cosmos.CosmosDatabaseProperties"
      description: "<xref uid=\"com.azure.cosmos.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\">CosmosDatabaseProperties</xref> the database properties."
    - id: "throughput"
      type: "int"
      description: "the throughput"
    - id: "options"
      type: "com.azure.cosmos.CosmosDatabaseRequestOptions"
      description: "<xref uid=\"com.azure.cosmos.CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"false\">CosmosDatabaseRequestOptions</xref> the request options"
    return:
      type: "com.azure.cosmos.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref> with the created database."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosClient.createDatabase(java.lang.String)"
  id: "createDatabase(java.lang.String)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "createDatabase(String id)"
  nameWithType: "CosmosClient.createDatabase(String id)"
  fullName: "com.azure.cosmos.CosmosClient.createDatabase(String id)"
  overload: "com.azure.cosmos.CosmosClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database."
  syntax:
    content: "public CosmosDatabaseResponse createDatabase(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id of the database"
    return:
      type: "com.azure.cosmos.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref> with the created database."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception."
- uid: "com.azure.cosmos.CosmosClient.createDatabase(java.lang.String,int)"
  id: "createDatabase(java.lang.String,int)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "createDatabase(String id, int throughput)"
  nameWithType: "CosmosClient.createDatabase(String id, int throughput)"
  fullName: "com.azure.cosmos.CosmosClient.createDatabase(String id, int throughput)"
  overload: "com.azure.cosmos.CosmosClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database."
  syntax:
    content: "public CosmosDatabaseResponse createDatabase(String id, int throughput)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id of the database"
    - id: "throughput"
      type: "int"
      description: "the throughput"
    return:
      type: "com.azure.cosmos.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref> with the created database."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(com.azure.cosmos.CosmosDatabaseProperties)"
  id: "createDatabaseIfNotExists(com.azure.cosmos.CosmosDatabaseProperties)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "createDatabaseIfNotExists(CosmosDatabaseProperties databaseProperties)"
  nameWithType: "CosmosClient.createDatabaseIfNotExists(CosmosDatabaseProperties databaseProperties)"
  fullName: "com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(CosmosDatabaseProperties databaseProperties)"
  overload: "com.azure.cosmos.CosmosClient.createDatabaseIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Create a Database if it does not already exist on the service"
  syntax:
    content: "public CosmosDatabaseResponse createDatabaseIfNotExists(CosmosDatabaseProperties databaseProperties)"
    parameters:
    - id: "databaseProperties"
      type: "com.azure.cosmos.CosmosDatabaseProperties"
      description: "<xref uid=\"com.azure.cosmos.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\">CosmosDatabaseProperties</xref> the database properties"
    return:
      type: "com.azure.cosmos.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref> with the created database."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception."
- uid: "com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(java.lang.String)"
  id: "createDatabaseIfNotExists(java.lang.String)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "createDatabaseIfNotExists(String id)"
  nameWithType: "CosmosClient.createDatabaseIfNotExists(String id)"
  fullName: "com.azure.cosmos.CosmosClient.createDatabaseIfNotExists(String id)"
  overload: "com.azure.cosmos.CosmosClient.createDatabaseIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Create a Database if it does not already exist on the service"
  syntax:
    content: "public CosmosDatabaseResponse createDatabaseIfNotExists(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id of the database"
    return:
      type: "com.azure.cosmos.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref> with the created database."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception."
- uid: "com.azure.cosmos.CosmosClient.getDatabase(java.lang.String)"
  id: "getDatabase(java.lang.String)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "getDatabase(String id)"
  nameWithType: "CosmosClient.getDatabase(String id)"
  fullName: "com.azure.cosmos.CosmosClient.getDatabase(String id)"
  overload: "com.azure.cosmos.CosmosClient.getDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the database client"
  syntax:
    content: "public CosmosDatabase getDatabase(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id of the database"
    return:
      type: "com.azure.cosmos.CosmosDatabase"
      description: "<xref uid=\"com.azure.cosmos.CosmosDatabase\" data-throw-if-not-resolved=\"false\">CosmosDatabase</xref> the cosmos sync database"
- uid: "com.azure.cosmos.CosmosClient.mapDatabaseResponseAndBlock(reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncDatabaseResponse>)"
  id: "mapDatabaseResponseAndBlock(reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncDatabaseResponse>)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "mapDatabaseResponseAndBlock(Mono<CosmosAsyncDatabaseResponse> databaseMono)"
  nameWithType: "CosmosClient.mapDatabaseResponseAndBlock(Mono<CosmosAsyncDatabaseResponse> databaseMono)"
  fullName: "com.azure.cosmos.CosmosClient.mapDatabaseResponseAndBlock(Mono<CosmosAsyncDatabaseResponse> databaseMono)"
  overload: "com.azure.cosmos.CosmosClient.mapDatabaseResponseAndBlock*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosDatabaseResponse mapDatabaseResponseAndBlock(Mono<CosmosAsyncDatabaseResponse> databaseMono)"
    parameters:
    - id: "databaseMono"
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncDatabaseResponse>"
    return:
      type: "com.azure.cosmos.CosmosDatabaseResponse"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
- uid: "com.azure.cosmos.CosmosClient.queryDatabases(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryDatabases(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "CosmosClient.queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosClient.queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosClient.queryDatabases*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query a database"
  syntax:
    content: "public CosmosContinuablePagedIterable<CosmosDatabaseProperties> queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "<xref uid=\"com.azure.cosmos.SqlQuerySpec\" data-throw-if-not-resolved=\"false\">SqlQuerySpec</xref> the query spec"
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the query"
    return:
      type: "com.azure.cosmos.CosmosContinuablePagedIterable<com.azure.cosmos.CosmosDatabaseProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosContinuablePagedIterable\" data-throw-if-not-resolved=\"false\">CosmosContinuablePagedIterable</xref> for feed response with the obtained databases."
- uid: "com.azure.cosmos.CosmosClient.queryDatabases(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryDatabases(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "queryDatabases(String query, FeedOptions options)"
  nameWithType: "CosmosClient.queryDatabases(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosClient.queryDatabases(String query, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosClient.queryDatabases*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query a database"
  syntax:
    content: "public CosmosContinuablePagedIterable<CosmosDatabaseProperties> queryDatabases(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query"
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "<xref uid=\"com.azure.cosmos.FeedOptions\" data-throw-if-not-resolved=\"false\">FeedOptions</xref>the feed options."
    return:
      type: "com.azure.cosmos.CosmosContinuablePagedIterable<com.azure.cosmos.CosmosDatabaseProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosContinuablePagedIterable\" data-throw-if-not-resolved=\"false\">CosmosContinuablePagedIterable</xref> for feed response with the obtained databases."
- uid: "com.azure.cosmos.CosmosClient.readAllDatabases()"
  id: "readAllDatabases()"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "readAllDatabases()"
  nameWithType: "CosmosClient.readAllDatabases()"
  fullName: "com.azure.cosmos.CosmosClient.readAllDatabases()"
  overload: "com.azure.cosmos.CosmosClient.readAllDatabases*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all databases."
  syntax:
    content: "public CosmosContinuablePagedIterable<CosmosDatabaseProperties> readAllDatabases()"
    return:
      type: "com.azure.cosmos.CosmosContinuablePagedIterable<com.azure.cosmos.CosmosDatabaseProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosContinuablePagedIterable\" data-throw-if-not-resolved=\"false\">CosmosContinuablePagedIterable</xref> for feed response with the read databases."
- uid: "com.azure.cosmos.CosmosClient.readAllDatabases(com.azure.cosmos.FeedOptions)"
  id: "readAllDatabases(com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.CosmosClient"
  langs:
  - "java"
  name: "readAllDatabases(FeedOptions options)"
  nameWithType: "CosmosClient.readAllDatabases(FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosClient.readAllDatabases(FeedOptions options)"
  overload: "com.azure.cosmos.CosmosClient.readAllDatabases*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all databases."
  syntax:
    content: "public CosmosContinuablePagedIterable<CosmosDatabaseProperties> readAllDatabases(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "<xref uid=\"com.azure.cosmos.FeedOptions\" data-throw-if-not-resolved=\"false\">FeedOptions</xref>the feed options."
    return:
      type: "com.azure.cosmos.CosmosContinuablePagedIterable<com.azure.cosmos.CosmosDatabaseProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosContinuablePagedIterable\" data-throw-if-not-resolved=\"false\">CosmosContinuablePagedIterable</xref> for feed response with the read databases."
references:
- uid: "com.azure.cosmos.CosmosClientBuilder"
  name: "CosmosClientBuilder"
  nameWithType: "CosmosClientBuilder"
  fullName: "com.azure.cosmos.CosmosClientBuilder"
- uid: "com.azure.cosmos.CosmosClient.CosmosClient*"
  name: "CosmosClient"
  nameWithType: "CosmosClient.CosmosClient"
  fullName: "com.azure.cosmos.CosmosClient.CosmosClient"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClient.cosmosClientBuilder*"
  name: "cosmosClientBuilder"
  nameWithType: "CosmosClient.cosmosClientBuilder"
  fullName: "com.azure.cosmos.CosmosClient.cosmosClientBuilder"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientException"
  name: "CosmosClientException"
  nameWithType: "CosmosClientException"
  fullName: "com.azure.cosmos.CosmosClientException"
- uid: "com.azure.cosmos.CosmosDatabaseProperties"
  name: "CosmosDatabaseProperties"
  nameWithType: "CosmosDatabaseProperties"
  fullName: "com.azure.cosmos.CosmosDatabaseProperties"
- uid: "com.azure.cosmos.CosmosDatabaseResponse"
  name: "CosmosDatabaseResponse"
  nameWithType: "CosmosDatabaseResponse"
  fullName: "com.azure.cosmos.CosmosDatabaseResponse"
- uid: "com.azure.cosmos.CosmosClient.createDatabaseIfNotExists*"
  name: "createDatabaseIfNotExists"
  nameWithType: "CosmosClient.createDatabaseIfNotExists"
  fullName: "com.azure.cosmos.CosmosClient.createDatabaseIfNotExists"
  package: "com.azure.cosmos"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.CosmosDatabaseRequestOptions"
  name: "CosmosDatabaseRequestOptions"
  nameWithType: "CosmosDatabaseRequestOptions"
  fullName: "com.azure.cosmos.CosmosDatabaseRequestOptions"
- uid: "com.azure.cosmos.CosmosClient.createDatabase*"
  name: "createDatabase"
  nameWithType: "CosmosClient.createDatabase"
  fullName: "com.azure.cosmos.CosmosClient.createDatabase"
  package: "com.azure.cosmos"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncDatabaseResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.CosmosAsyncDatabaseResponse"
    name: "CosmosAsyncDatabaseResponse"
    fullName: "com.azure.cosmos.CosmosAsyncDatabaseResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosClient.mapDatabaseResponseAndBlock*"
  name: "mapDatabaseResponseAndBlock"
  nameWithType: "CosmosClient.mapDatabaseResponseAndBlock"
  fullName: "com.azure.cosmos.CosmosClient.mapDatabaseResponseAndBlock"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.FeedOptions"
  name: "FeedOptions"
  nameWithType: "FeedOptions"
  fullName: "com.azure.cosmos.FeedOptions"
- uid: "com.azure.cosmos.CosmosContinuablePagedIterable<com.azure.cosmos.CosmosDatabaseProperties>"
  spec.java:
  - uid: "com.azure.cosmos.CosmosContinuablePagedIterable"
    name: "CosmosContinuablePagedIterable"
    fullName: "com.azure.cosmos.CosmosContinuablePagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.CosmosDatabaseProperties"
    name: "CosmosDatabaseProperties"
    fullName: "com.azure.cosmos.CosmosDatabaseProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosClient.readAllDatabases*"
  name: "readAllDatabases"
  nameWithType: "CosmosClient.readAllDatabases"
  fullName: "com.azure.cosmos.CosmosClient.readAllDatabases"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClient.queryDatabases*"
  name: "queryDatabases"
  nameWithType: "CosmosClient.queryDatabases"
  fullName: "com.azure.cosmos.CosmosClient.queryDatabases"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.SqlQuerySpec"
  name: "SqlQuerySpec"
  nameWithType: "SqlQuerySpec"
  fullName: "com.azure.cosmos.SqlQuerySpec"
- uid: "com.azure.cosmos.CosmosDatabase"
  name: "CosmosDatabase"
  nameWithType: "CosmosDatabase"
  fullName: "com.azure.cosmos.CosmosDatabase"
- uid: "com.azure.cosmos.CosmosClient.getDatabase*"
  name: "getDatabase"
  nameWithType: "CosmosClient.getDatabase"
  fullName: "com.azure.cosmos.CosmosClient.getDatabase"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabaseResponse"
  name: "CosmosAsyncDatabaseResponse"
  nameWithType: "CosmosAsyncDatabaseResponse"
  fullName: "com.azure.cosmos.CosmosAsyncDatabaseResponse"
- uid: "com.azure.cosmos.CosmosClient.convertResponse*"
  name: "convertResponse"
  nameWithType: "CosmosClient.convertResponse"
  fullName: "com.azure.cosmos.CosmosClient.convertResponse"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncClient"
  name: "CosmosAsyncClient"
  nameWithType: "CosmosAsyncClient"
  fullName: "com.azure.cosmos.CosmosAsyncClient"
- uid: "com.azure.cosmos.CosmosClient.asyncClient*"
  name: "asyncClient"
  nameWithType: "CosmosClient.asyncClient"
  fullName: "com.azure.cosmos.CosmosClient.asyncClient"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClient.close*"
  name: "close"
  nameWithType: "CosmosClient.close"
  fullName: "com.azure.cosmos.CosmosClient.close"
  package: "com.azure.cosmos"
- uid: "java.lang.AutoCloseable"
  name: "AutoCloseable"
  nameWithType: "AutoCloseable"
  fullName: "java.lang.AutoCloseable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.cosmos.CosmosContinuablePagedIterable"
  name: "CosmosContinuablePagedIterable"
  nameWithType: "CosmosContinuablePagedIterable"
  fullName: "com.azure.cosmos.CosmosContinuablePagedIterable"
