### YamlMime:ManagedReference
items:
- uid: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil"
  id: "AmqpPropagationFormatUtil"
  parent: "com.azure.tracing.opentelemetry.implementation"
  children:
  - "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.extractContext(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.getDiagnosticId(io.opencensus.trace.SpanContext)"
  langs:
  - "java"
  name: "AmqpPropagationFormatUtil"
  nameWithType: "AmqpPropagationFormatUtil"
  fullName: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil"
  type: "Class"
  package: "com.azure.tracing.opentelemetry.implementation"
  syntax:
    content: "public class AmqpPropagationFormatUtil"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.AmqpPropagationFormatUtil()"
  id: "AmqpPropagationFormatUtil()"
  parent: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil"
  langs:
  - "java"
  name: "AmqpPropagationFormatUtil()"
  nameWithType: "AmqpPropagationFormatUtil.AmqpPropagationFormatUtil()"
  fullName: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.AmqpPropagationFormatUtil()"
  overload: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.AmqpPropagationFormatUtil*"
  type: "Constructor"
  package: "com.azure.tracing.opentelemetry.implementation"
  syntax:
    content: "private AmqpPropagationFormatUtil()"
- uid: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.extractContext(java.lang.String,com.azure.core.util.Context)"
  id: "extractContext(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil"
  langs:
  - "java"
  name: "extractContext(String diagnosticId, Context context)"
  nameWithType: "AmqpPropagationFormatUtil.extractContext(String diagnosticId, Context context)"
  fullName: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.extractContext(String diagnosticId, Context context)"
  overload: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.extractContext*"
  type: "Method"
  package: "com.azure.tracing.opentelemetry.implementation"
  summary: "This method is called to extract the Span Context information from the received event's diagnostic Id."
  syntax:
    content: "public static Context extractContext(String diagnosticId, Context context)"
    parameters:
    - id: "diagnosticId"
      type: "java.lang.String"
      description: "The dignostic Id providing an unique identifier for individual traces and requests"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.util.Context"
      description: "<xref uid=\"\" data-throw-if-not-resolved=\"false\">Context</xref> which contains the trace context propagation data"
- uid: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.getDiagnosticId(io.opencensus.trace.SpanContext)"
  id: "getDiagnosticId(io.opencensus.trace.SpanContext)"
  parent: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil"
  langs:
  - "java"
  name: "getDiagnosticId(SpanContext spanContext)"
  nameWithType: "AmqpPropagationFormatUtil.getDiagnosticId(SpanContext spanContext)"
  fullName: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.getDiagnosticId(SpanContext spanContext)"
  overload: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.getDiagnosticId*"
  type: "Method"
  package: "com.azure.tracing.opentelemetry.implementation"
  summary: "The traceparent HTTP header field identifies the incoming request in a tracing system with four fields: version, trace-id, parent-id, trace-flags. Please refer to the [Traceparent Header][] for more information on the conversion of these fields to Span Context format.\n\n\n[Traceparent Header]: https://www.w3.org/TR/trace-context/#traceparent-header"
  syntax:
    content: "public static String getDiagnosticId(SpanContext spanContext)"
    parameters:
    - id: "spanContext"
      type: "io.opencensus.trace.SpanContext"
      description: "is a specification defines an agreed-upon format for the exchange of trace context propagation\n data"
    return:
      type: "java.lang.String"
references:
- uid: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.AmqpPropagationFormatUtil*"
  name: "AmqpPropagationFormatUtil"
  nameWithType: "AmqpPropagationFormatUtil.AmqpPropagationFormatUtil"
  fullName: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.AmqpPropagationFormatUtil"
  package: "com.azure.tracing.opentelemetry.implementation"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.extractContext*"
  name: "extractContext"
  nameWithType: "AmqpPropagationFormatUtil.extractContext"
  fullName: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.extractContext"
  package: "com.azure.tracing.opentelemetry.implementation"
- uid: "io.opencensus.trace.SpanContext"
  spec.java:
  - uid: "io.opencensus.trace.SpanContext"
    name: "SpanContext"
    fullName: "io.opencensus.trace.SpanContext"
- uid: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.getDiagnosticId*"
  name: "getDiagnosticId"
  nameWithType: "AmqpPropagationFormatUtil.getDiagnosticId"
  fullName: "com.azure.tracing.opentelemetry.implementation.AmqpPropagationFormatUtil.getDiagnosticId"
  package: "com.azure.tracing.opentelemetry.implementation"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
