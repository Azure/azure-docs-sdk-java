### YamlMime:ManagedReference
items:
- uid: "com.azure.core.http.HttpResponse"
  id: "HttpResponse"
  parent: "com.azure.core.http"
  children:
  - "com.azure.core.http.HttpResponse.HttpResponse(com.azure.core.http.HttpRequest)"
  - "com.azure.core.http.HttpResponse.buffer()"
  - "com.azure.core.http.HttpResponse.close()"
  - "com.azure.core.http.HttpResponse.getBody()"
  - "com.azure.core.http.HttpResponse.getBodyAsByteArray()"
  - "com.azure.core.http.HttpResponse.getBodyAsString()"
  - "com.azure.core.http.HttpResponse.getBodyAsString(java.nio.charset.Charset)"
  - "com.azure.core.http.HttpResponse.getHeaderValue(java.lang.String)"
  - "com.azure.core.http.HttpResponse.getHeaders()"
  - "com.azure.core.http.HttpResponse.getRequest()"
  - "com.azure.core.http.HttpResponse.getStatusCode()"
  langs:
  - "java"
  name: "HttpResponse"
  nameWithType: "HttpResponse"
  fullName: "com.azure.core.http.HttpResponse"
  type: "Class"
  package: "com.azure.core.http"
  summary: "The type representing response of <xref uid=\"com.azure.core.http.HttpRequest\" data-throw-if-not-resolved=\"false\">HttpRequest</xref>."
  syntax:
    content: "public abstract class HttpResponse implements Closeable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Closeable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.http.HttpResponse.HttpResponse(com.azure.core.http.HttpRequest)"
  id: "HttpResponse(com.azure.core.http.HttpRequest)"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "HttpResponse(HttpRequest request)"
  nameWithType: "HttpResponse.HttpResponse(HttpRequest request)"
  fullName: "com.azure.core.http.HttpResponse.HttpResponse(HttpRequest request)"
  overload: "com.azure.core.http.HttpResponse.HttpResponse*"
  type: "Constructor"
  package: "com.azure.core.http"
  syntax:
    content: "protected HttpResponse(HttpRequest request)"
    parameters:
    - id: "request"
      type: "com.azure.core.http.HttpRequest"
- uid: "com.azure.core.http.HttpResponse.buffer()"
  id: "buffer()"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "buffer()"
  nameWithType: "HttpResponse.buffer()"
  fullName: "com.azure.core.http.HttpResponse.buffer()"
  overload: "com.azure.core.http.HttpResponse.buffer*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Get a new Response object wrapping this response with it's content buffered into memory."
  syntax:
    content: "public HttpResponse buffer()"
    return:
      type: "com.azure.core.http.HttpResponse"
      description: "the new Response object"
- uid: "com.azure.core.http.HttpResponse.close()"
  id: "close()"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "close()"
  nameWithType: "HttpResponse.close()"
  fullName: "com.azure.core.http.HttpResponse.close()"
  overload: "com.azure.core.http.HttpResponse.close*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Closes the response content stream, if any."
  syntax:
    content: "public void close()"
- uid: "com.azure.core.http.HttpResponse.getBody()"
  id: "getBody()"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "getBody()"
  nameWithType: "HttpResponse.getBody()"
  fullName: "com.azure.core.http.HttpResponse.getBody()"
  overload: "com.azure.core.http.HttpResponse.getBody*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Get the publisher emitting response content chunks.\n\nReturns a stream of the response's body content. Emissions may occur on the Netty EventLoop threads which are shared across channels and should not be blocked. Blocking should be avoided as much as possible/practical in reactive programming but if you do use methods like `blockingSubscribe` or `blockingGet` on the stream then be sure to use `subscribeOn` and `observeOn` before the blocking call. For example:\n\n```java\nresponse.body()\n     .map(bb -> bb.limit())\n     .reduce((x,y) -> x + y)\n     .subscribeOn(Schedulers.io())\n     .observeOn(Schedulers.io())\n     ;\n```\n\nThe above code is a simplistic example and would probably run fine without the \\`subscribeOn\\` and \\`observeOn\\` but should be considered a template for more complex situations."
  syntax:
    content: "public abstract Flux<ByteBuffer> getBody()"
    return:
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "The response's content as a stream of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\">ByteBuffer</xref>."
- uid: "com.azure.core.http.HttpResponse.getBodyAsByteArray()"
  id: "getBodyAsByteArray()"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "getBodyAsByteArray()"
  nameWithType: "HttpResponse.getBodyAsByteArray()"
  fullName: "com.azure.core.http.HttpResponse.getBodyAsByteArray()"
  overload: "com.azure.core.http.HttpResponse.getBodyAsByteArray*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Get the response content as a byte\\[\\]."
  syntax:
    content: "public abstract Mono<byte[]> getBodyAsByteArray()"
    return:
      type: "reactor.core.publisher.Mono<byte[]>"
      description: "this response content as a byte[]"
- uid: "com.azure.core.http.HttpResponse.getBodyAsString()"
  id: "getBodyAsString()"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "getBodyAsString()"
  nameWithType: "HttpResponse.getBodyAsString()"
  fullName: "com.azure.core.http.HttpResponse.getBodyAsString()"
  overload: "com.azure.core.http.HttpResponse.getBodyAsString*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Get the response content as a string."
  syntax:
    content: "public abstract Mono<String> getBodyAsString()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.String>"
      description: "This response content as a string"
- uid: "com.azure.core.http.HttpResponse.getBodyAsString(java.nio.charset.Charset)"
  id: "getBodyAsString(java.nio.charset.Charset)"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "getBodyAsString(Charset charset)"
  nameWithType: "HttpResponse.getBodyAsString(Charset charset)"
  fullName: "com.azure.core.http.HttpResponse.getBodyAsString(Charset charset)"
  overload: "com.azure.core.http.HttpResponse.getBodyAsString*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Get the response content as a string."
  syntax:
    content: "public abstract Mono<String> getBodyAsString(Charset charset)"
    parameters:
    - id: "charset"
      type: "java.nio.charset.Charset"
      description: "the charset to use as encoding"
    return:
      type: "reactor.core.publisher.Mono<java.lang.String>"
      description: "This response content as a string"
- uid: "com.azure.core.http.HttpResponse.getHeaderValue(java.lang.String)"
  id: "getHeaderValue(java.lang.String)"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "getHeaderValue(String name)"
  nameWithType: "HttpResponse.getHeaderValue(String name)"
  fullName: "com.azure.core.http.HttpResponse.getHeaderValue(String name)"
  overload: "com.azure.core.http.HttpResponse.getHeaderValue*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Lookup a response header with the provided name."
  syntax:
    content: "public abstract String getHeaderValue(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "the name of the header to lookup."
    return:
      type: "java.lang.String"
      description: "the value of the header, or null if the header doesn't exist in the response."
- uid: "com.azure.core.http.HttpResponse.getHeaders()"
  id: "getHeaders()"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "getHeaders()"
  nameWithType: "HttpResponse.getHeaders()"
  fullName: "com.azure.core.http.HttpResponse.getHeaders()"
  overload: "com.azure.core.http.HttpResponse.getHeaders*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Get all response headers."
  syntax:
    content: "public abstract HttpHeaders getHeaders()"
    return:
      type: "com.azure.core.http.HttpHeaders"
      description: "the response headers"
- uid: "com.azure.core.http.HttpResponse.getRequest()"
  id: "getRequest()"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "getRequest()"
  nameWithType: "HttpResponse.getRequest()"
  fullName: "com.azure.core.http.HttpResponse.getRequest()"
  overload: "com.azure.core.http.HttpResponse.getRequest*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Get the request which resulted in this response."
  syntax:
    content: "public final HttpRequest getRequest()"
    return:
      type: "com.azure.core.http.HttpRequest"
      description: "the request which resulted in this response."
- uid: "com.azure.core.http.HttpResponse.getStatusCode()"
  id: "getStatusCode()"
  parent: "com.azure.core.http.HttpResponse"
  langs:
  - "java"
  name: "getStatusCode()"
  nameWithType: "HttpResponse.getStatusCode()"
  fullName: "com.azure.core.http.HttpResponse.getStatusCode()"
  overload: "com.azure.core.http.HttpResponse.getStatusCode*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Get the response status code."
  syntax:
    content: "public abstract int getStatusCode()"
    return:
      type: "int"
      description: "the response status code"
references:
- uid: "com.azure.core.http.HttpRequest"
  name: "HttpRequest"
  nameWithType: "HttpRequest"
  fullName: "com.azure.core.http.HttpRequest"
- uid: "com.azure.core.http.HttpResponse.HttpResponse*"
  name: "HttpResponse"
  nameWithType: "HttpResponse.HttpResponse"
  fullName: "com.azure.core.http.HttpResponse.HttpResponse"
  package: "com.azure.core.http"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.core.http.HttpResponse.getStatusCode*"
  name: "getStatusCode"
  nameWithType: "HttpResponse.getStatusCode"
  fullName: "com.azure.core.http.HttpResponse.getStatusCode"
  package: "com.azure.core.http"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.http.HttpResponse.getHeaderValue*"
  name: "getHeaderValue"
  nameWithType: "HttpResponse.getHeaderValue"
  fullName: "com.azure.core.http.HttpResponse.getHeaderValue"
  package: "com.azure.core.http"
- uid: "com.azure.core.http.HttpHeaders"
  name: "HttpHeaders"
  nameWithType: "HttpHeaders"
  fullName: "com.azure.core.http.HttpHeaders"
- uid: "com.azure.core.http.HttpResponse.getHeaders*"
  name: "getHeaders"
  nameWithType: "HttpResponse.getHeaders"
  fullName: "com.azure.core.http.HttpResponse.getHeaders"
  package: "com.azure.core.http"
- uid: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.HttpResponse.getBody*"
  name: "getBody"
  nameWithType: "HttpResponse.getBody"
  fullName: "com.azure.core.http.HttpResponse.getBody"
  package: "com.azure.core.http"
- uid: "reactor.core.publisher.Mono<byte[]>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.HttpResponse.getBodyAsByteArray*"
  name: "getBodyAsByteArray"
  nameWithType: "HttpResponse.getBodyAsByteArray"
  fullName: "com.azure.core.http.HttpResponse.getBodyAsByteArray"
  package: "com.azure.core.http"
- uid: "reactor.core.publisher.Mono<java.lang.String>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.HttpResponse.getBodyAsString*"
  name: "getBodyAsString"
  nameWithType: "HttpResponse.getBodyAsString"
  fullName: "com.azure.core.http.HttpResponse.getBodyAsString"
  package: "com.azure.core.http"
- uid: "java.nio.charset.Charset"
  spec.java:
  - uid: "java.nio.charset.Charset"
    name: "Charset"
    fullName: "java.nio.charset.Charset"
- uid: "com.azure.core.http.HttpResponse.getRequest*"
  name: "getRequest"
  nameWithType: "HttpResponse.getRequest"
  fullName: "com.azure.core.http.HttpResponse.getRequest"
  package: "com.azure.core.http"
- uid: "com.azure.core.http.HttpResponse.buffer*"
  name: "buffer"
  nameWithType: "HttpResponse.buffer"
  fullName: "com.azure.core.http.HttpResponse.buffer"
  package: "com.azure.core.http"
- uid: "com.azure.core.http.HttpResponse.close*"
  name: "close"
  nameWithType: "HttpResponse.close"
  fullName: "com.azure.core.http.HttpResponse.close"
  package: "com.azure.core.http"
- uid: "java.io.Closeable"
  name: "Closeable"
  nameWithType: "Closeable"
  fullName: "java.io.Closeable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "java.nio.ByteBuffer"
  name: "ByteBuffer"
  nameWithType: "ByteBuffer"
  fullName: "java.nio.ByteBuffer"
- uid: "byte[]"
  name: "byte[]"
  nameWithType: "byte[]"
  fullName: "byte[]"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
