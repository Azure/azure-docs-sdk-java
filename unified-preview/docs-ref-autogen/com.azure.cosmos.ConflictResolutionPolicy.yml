### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.ConflictResolutionPolicy"
  id: "ConflictResolutionPolicy"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.ConflictResolutionPolicy.ConflictResolutionPolicy()"
  - "com.azure.cosmos.ConflictResolutionPolicy.ConflictResolutionPolicy(java.lang.String)"
  - "com.azure.cosmos.ConflictResolutionPolicy.createCustomPolicy()"
  - "com.azure.cosmos.ConflictResolutionPolicy.createCustomPolicy(java.lang.String)"
  - "com.azure.cosmos.ConflictResolutionPolicy.createLastWriterWinsPolicy()"
  - "com.azure.cosmos.ConflictResolutionPolicy.createLastWriterWinsPolicy(java.lang.String)"
  - "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionPath()"
  - "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionProcedure()"
  - "com.azure.cosmos.ConflictResolutionPolicy.getMode()"
  - "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionPath(java.lang.String)"
  - "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionProcedure(java.lang.String)"
  - "com.azure.cosmos.ConflictResolutionPolicy.setMode(com.azure.cosmos.ConflictResolutionMode)"
  langs:
  - "java"
  name: "ConflictResolutionPolicy"
  nameWithType: "ConflictResolutionPolicy"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Represents the conflict resolution policy configuration for specifying how to resolve conflicts in case writes from different regions result in conflicts on documents in the collection in the Azure Cosmos DB service.\n\nA collection with custom conflict resolution with no user-registered stored procedure.\n\n```java\nDocumentCollection collectionSpec = new DocumentCollection();\n collectionSpec.getId(\"Multi-master collection\");\n\n ConflictResolutionPolicy policy = ConflictResolutionPolicy.createCustomPolicy();\n collectionSpec.getConflictResolutionPolicy(policy);\n\n DocumentCollection collection = client.createCollection(databaseLink, collectionSpec, null)\n         .toBlocking().single().getResource();\n```\n\nA collection with custom conflict resolution with a user-registered stored procedure.\n\n```java\nDocumentCollection collectionSpec = new DocumentCollection();\n collectionSpec.getId(\"Multi-master collection\");\n\n ConflictResolutionPolicy policy = ConflictResolutionPolicy.createCustomPolicy(conflictResolutionSprocName);\n collectionSpec.getConflictResolutionPolicy(policy);\n\n DocumentCollection collection = client.createCollection(databaseLink, collectionSpec, null)\n         .toBlocking().single().getResource();\n```\n\nA collection with last writer wins conflict resolution, based on a path in the conflicting documents. A collection with custom conflict resolution with a user-registered stored procedure.\n\n```java\nDocumentCollection collectionSpec = new DocumentCollection();\n collectionSpec.getId(\"Multi-master collection\");\n\n ConflictResolutionPolicy policy = ConflictResolutionPolicy.createLastWriterWinsPolicy\n (\"/path/for/conflict/resolution\");\n collectionSpec.getConflictResolutionPolicy(policy);\n\n DocumentCollection collection = client.createCollection(databaseLink, collectionSpec, null)\n         .toBlocking().single().getResource();\n```"
  syntax:
    content: "public class ConflictResolutionPolicy extends JsonSerializable"
  inheritance:
  - "java.lang.Object"
  - "com.azure.cosmos.JsonSerializable"
  inheritedMembers:
  - "com.azure.cosmos.JsonSerializable.<T>getCollection(java.lang.String,java.lang.Class<T>,boolean...)"
  - "com.azure.cosmos.JsonSerializable.<T>getList(java.lang.String,java.lang.Class<T>,boolean...)"
  - "com.azure.cosmos.JsonSerializable.<T>getObject(java.lang.String,java.lang.Class<T>,boolean...)"
  - "com.azure.cosmos.JsonSerializable.<T>set(java.lang.String,T)"
  - "com.azure.cosmos.JsonSerializable.<T>toObject(java.lang.Class<T>)"
  - "com.azure.cosmos.JsonSerializable.get(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getBoolean(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getCollection(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getDouble(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getInt(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getLogger()"
  - "com.azure.cosmos.JsonSerializable.getLong(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getMap()"
  - "com.azure.cosmos.JsonSerializable.getObject(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getObjectByPath(java.util.List<java.lang.String>)"
  - "com.azure.cosmos.JsonSerializable.getString(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.getValue(com.fasterxml.jackson.databind.JsonNode)"
  - "com.azure.cosmos.JsonSerializable.has(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.populatePropertyBag()"
  - "com.azure.cosmos.JsonSerializable.remove(java.lang.String)"
  - "com.azure.cosmos.JsonSerializable.setMapper(com.fasterxml.jackson.databind.ObjectMapper)"
  - "com.azure.cosmos.JsonSerializable.toJson()"
  - "com.azure.cosmos.JsonSerializable.toJson(com.azure.cosmos.SerializationFormattingPolicy)"
  - "com.azure.cosmos.JsonSerializable.toString()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.ConflictResolutionPolicy()"
  id: "ConflictResolutionPolicy()"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "ConflictResolutionPolicy()"
  nameWithType: "ConflictResolutionPolicy.ConflictResolutionPolicy()"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.ConflictResolutionPolicy()"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.ConflictResolutionPolicy*"
  type: "Constructor"
  package: "com.azure.cosmos"
  summary: "Initializes a new instance of the <xref uid=\"com.azure.cosmos.ConflictResolutionPolicy\" data-throw-if-not-resolved=\"false\">ConflictResolutionPolicy</xref> class for the Azure Cosmos DB service."
  syntax:
    content: " ConflictResolutionPolicy()"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.ConflictResolutionPolicy(java.lang.String)"
  id: "ConflictResolutionPolicy(java.lang.String)"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "ConflictResolutionPolicy(String jsonString)"
  nameWithType: "ConflictResolutionPolicy.ConflictResolutionPolicy(String jsonString)"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.ConflictResolutionPolicy(String jsonString)"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.ConflictResolutionPolicy*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: "public ConflictResolutionPolicy(String jsonString)"
    parameters:
    - id: "jsonString"
      type: "java.lang.String"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.createCustomPolicy()"
  id: "createCustomPolicy()"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "createCustomPolicy()"
  nameWithType: "ConflictResolutionPolicy.createCustomPolicy()"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.createCustomPolicy()"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.createCustomPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a CUSTOM <xref uid=\"com.azure.cosmos.ConflictResolutionPolicy\" data-throw-if-not-resolved=\"false\">ConflictResolutionPolicy</xref> without any <xref uid=\"com.azure.cosmos.implementation.StoredProcedure\" data-throw-if-not-resolved=\"false\">StoredProcedure</xref>. User manually should resolve conflicts.\n\nThe conflicts will be registered in the conflicts feed and the user should manually resolve them."
  syntax:
    content: "public static ConflictResolutionPolicy createCustomPolicy()"
    return:
      type: "com.azure.cosmos.ConflictResolutionPolicy"
      description: "ConflictResolutionPolicy."
- uid: "com.azure.cosmos.ConflictResolutionPolicy.createCustomPolicy(java.lang.String)"
  id: "createCustomPolicy(java.lang.String)"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "createCustomPolicy(String conflictResolutionSprocName)"
  nameWithType: "ConflictResolutionPolicy.createCustomPolicy(String conflictResolutionSprocName)"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.createCustomPolicy(String conflictResolutionSprocName)"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.createCustomPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a CUSTOM <xref uid=\"com.azure.cosmos.ConflictResolutionPolicy\" data-throw-if-not-resolved=\"false\">ConflictResolutionPolicy</xref> which uses the specified stored procedure to perform conflict resolution\n\nThis stored procedure may be created after the <xref uid=\"com.azure.cosmos.implementation.DocumentCollection\" data-throw-if-not-resolved=\"false\">DocumentCollection</xref> is created and can be changed as required.\n\n *  In case the stored procedure fails or throws an exception, the conflict resolution will default to registering conflicts in the conflicts feed\n *  The user can provide the stored procedure @see <xref uid=\"com.azure.cosmos.Resource.getId()\" data-throw-if-not-resolved=\"false\">Resource#getId()</xref>"
  syntax:
    content: "public static ConflictResolutionPolicy createCustomPolicy(String conflictResolutionSprocName)"
    parameters:
    - id: "conflictResolutionSprocName"
      type: "java.lang.String"
      description: "stored procedure to perform conflict resolution."
    return:
      type: "com.azure.cosmos.ConflictResolutionPolicy"
      description: "ConflictResolutionPolicy."
- uid: "com.azure.cosmos.ConflictResolutionPolicy.createLastWriterWinsPolicy()"
  id: "createLastWriterWinsPolicy()"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "createLastWriterWinsPolicy()"
  nameWithType: "ConflictResolutionPolicy.createLastWriterWinsPolicy()"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.createLastWriterWinsPolicy()"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.createLastWriterWinsPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a LAST\\_WRITER\\_WINS <xref uid=\"com.azure.cosmos.ConflictResolutionPolicy\" data-throw-if-not-resolved=\"false\">ConflictResolutionPolicy</xref> with \"/\\_ts\" as the resolution path.\n\nIn case of a conflict occurring on a document, the document with the higher integer value in the default path <xref uid=\"com.azure.cosmos.Resource.getTimestamp()\" data-throw-if-not-resolved=\"false\">Resource#getTimestamp()</xref> ()\\}, i.e., \"/\\_ts\" will be used. <xref uid=\"com.azure.cosmos.Resource.getTimestamp()\" data-throw-if-not-resolved=\"false\">Resource#getTimestamp()</xref>, i.e., \"/\\_ts\" will be used."
  syntax:
    content: "public static ConflictResolutionPolicy createLastWriterWinsPolicy()"
    return:
      type: "com.azure.cosmos.ConflictResolutionPolicy"
      description: "ConflictResolutionPolicy."
- uid: "com.azure.cosmos.ConflictResolutionPolicy.createLastWriterWinsPolicy(java.lang.String)"
  id: "createLastWriterWinsPolicy(java.lang.String)"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "createLastWriterWinsPolicy(String conflictResolutionPath)"
  nameWithType: "ConflictResolutionPolicy.createLastWriterWinsPolicy(String conflictResolutionPath)"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.createLastWriterWinsPolicy(String conflictResolutionPath)"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.createLastWriterWinsPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a LAST\\_WRITER\\_WINS <xref uid=\"com.azure.cosmos.ConflictResolutionPolicy\" data-throw-if-not-resolved=\"false\">ConflictResolutionPolicy</xref> with path as the resolution path.\n\nThe specified path must be present in each document and must be an integer value. In case of a conflict occurring on a document, the document with the higher integer value in the specified path will be picked."
  syntax:
    content: "public static ConflictResolutionPolicy createLastWriterWinsPolicy(String conflictResolutionPath)"
    parameters:
    - id: "conflictResolutionPath"
      type: "java.lang.String"
      description: "The path to check values for last-writer wins conflict resolution.\n That path is a rooted path of the property in the document, such as \"/name/first\"."
    return:
      type: "com.azure.cosmos.ConflictResolutionPolicy"
      description: "ConflictResolutionPolicy."
- uid: "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionPath()"
  id: "getConflictResolutionPath()"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "getConflictResolutionPath()"
  nameWithType: "ConflictResolutionPolicy.getConflictResolutionPath()"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionPath()"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionPath*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the path which is present in each document in the Azure Cosmos DB service for last writer wins conflict-resolution. This path must be present in each document and must be an integer value. In case of a conflict occurring on a document, the document with the higher integer value in the specified path will be picked. If the path is unspecified, by default the <xref uid=\"com.azure.cosmos.Resource.getTimestamp()\" data-throw-if-not-resolved=\"false\">Resource#getTimestamp()</xref> ()\\} path will be used.\n\nThis value should only be set when using <xref uid=\"com.azure.cosmos.ConflictResolutionMode.LAST_WRITER_WINS\" data-throw-if-not-resolved=\"false\">ConflictResolutionMode#LAST_WRITER_WINS</xref>"
  syntax:
    content: "public String getConflictResolutionPath()"
    return:
      type: "java.lang.String"
      description: "The path to check values for last-writer wins conflict resolution.\n That path is a rooted path of the property in the document, such as \"/name/first\"."
- uid: "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionProcedure()"
  id: "getConflictResolutionProcedure()"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "getConflictResolutionProcedure()"
  nameWithType: "ConflictResolutionPolicy.getConflictResolutionProcedure()"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionProcedure()"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionProcedure*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the <xref uid=\"com.azure.cosmos.implementation.StoredProcedure\" data-throw-if-not-resolved=\"false\">StoredProcedure</xref> which is used for conflict resolution in the Azure Cosmos DB service. This stored procedure may be created after the <xref uid=\"com.azure.cosmos.implementation.DocumentCollection\" data-throw-if-not-resolved=\"false\">DocumentCollection</xref> is created and can be changed as required.\n\n *  This value should only be set when using <xref uid=\"com.azure.cosmos.ConflictResolutionMode.CUSTOM\" data-throw-if-not-resolved=\"false\">ConflictResolutionMode#CUSTOM</xref>\n *  In case the stored procedure fails or throws an exception, the conflict resolution will default to registering conflicts in the conflicts feed\n *  The user can provide the stored procedure @see <xref uid=\"com.azure.cosmos.Resource.getId()\" data-throw-if-not-resolved=\"false\">Resource#getId()</xref> ()\\}\n\n\\*"
  syntax:
    content: "public String getConflictResolutionProcedure()"
    return:
      type: "java.lang.String"
      description: "the stored procedure to perform conflict resolution.]"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.getMode()"
  id: "getMode()"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "getMode()"
  nameWithType: "ConflictResolutionPolicy.getMode()"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.getMode()"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.getMode*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the <xref uid=\"com.azure.cosmos.ConflictResolutionMode\" data-throw-if-not-resolved=\"false\">ConflictResolutionMode</xref> in the Azure Cosmos DB service. By default it is <xref uid=\"com.azure.cosmos.ConflictResolutionMode.LAST_WRITER_WINS\" data-throw-if-not-resolved=\"false\">ConflictResolutionMode#LAST_WRITER_WINS</xref>."
  syntax:
    content: "public ConflictResolutionMode getMode()"
    return:
      type: "com.azure.cosmos.ConflictResolutionMode"
      description: "ConflictResolutionMode."
- uid: "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionPath(java.lang.String)"
  id: "setConflictResolutionPath(java.lang.String)"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "setConflictResolutionPath(String value)"
  nameWithType: "ConflictResolutionPolicy.setConflictResolutionPath(String value)"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionPath(String value)"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionPath*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the path which is present in each document in the Azure Cosmos DB service for last writer wins conflict-resolution. This path must be present in each document and must be an integer value. In case of a conflict occurring on a document, the document with the higher integer value in the specified path will be picked. If the path is unspecified, by default the <xref uid=\"com.azure.cosmos.Resource.getTimestamp()\" data-throw-if-not-resolved=\"false\">Resource#getTimestamp()</xref> ()\\} path will be used.\n\nThis value should only be set when using <xref uid=\"com.azure.cosmos.ConflictResolutionMode.LAST_WRITER_WINS\" data-throw-if-not-resolved=\"false\">ConflictResolutionMode#LAST_WRITER_WINS</xref>"
  syntax:
    content: " ConflictResolutionPolicy setConflictResolutionPath(String value)"
    parameters:
    - id: "value"
      type: "java.lang.String"
      description: "The path to check values for last-writer wins conflict resolution.\n That path is a rooted path of the property in the document, such as \"/name/first\"."
    return:
      type: "com.azure.cosmos.ConflictResolutionPolicy"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionProcedure(java.lang.String)"
  id: "setConflictResolutionProcedure(java.lang.String)"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "setConflictResolutionProcedure(String value)"
  nameWithType: "ConflictResolutionPolicy.setConflictResolutionProcedure(String value)"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionProcedure(String value)"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionProcedure*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " ConflictResolutionPolicy setConflictResolutionProcedure(String value)"
    parameters:
    - id: "value"
      type: "java.lang.String"
    return:
      type: "com.azure.cosmos.ConflictResolutionPolicy"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.setMode(com.azure.cosmos.ConflictResolutionMode)"
  id: "setMode(com.azure.cosmos.ConflictResolutionMode)"
  parent: "com.azure.cosmos.ConflictResolutionPolicy"
  langs:
  - "java"
  name: "setMode(ConflictResolutionMode mode)"
  nameWithType: "ConflictResolutionPolicy.setMode(ConflictResolutionMode mode)"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.setMode(ConflictResolutionMode mode)"
  overload: "com.azure.cosmos.ConflictResolutionPolicy.setMode*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets the <xref uid=\"com.azure.cosmos.ConflictResolutionMode\" data-throw-if-not-resolved=\"false\">ConflictResolutionMode</xref> in the Azure Cosmos DB service. By default it is <xref uid=\"com.azure.cosmos.ConflictResolutionMode.LAST_WRITER_WINS\" data-throw-if-not-resolved=\"false\">ConflictResolutionMode#LAST_WRITER_WINS</xref>."
  syntax:
    content: " ConflictResolutionPolicy setMode(ConflictResolutionMode mode)"
    parameters:
    - id: "mode"
      type: "com.azure.cosmos.ConflictResolutionMode"
      description: "One of the values of the <xref uid=\"com.azure.cosmos.ConflictResolutionMode\" data-throw-if-not-resolved=\"false\">ConflictResolutionMode</xref> enum."
    return:
      type: "com.azure.cosmos.ConflictResolutionPolicy"
references:
- uid: "com.azure.cosmos.ConflictResolutionPolicy.ConflictResolutionPolicy*"
  name: "ConflictResolutionPolicy"
  nameWithType: "ConflictResolutionPolicy.ConflictResolutionPolicy"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.ConflictResolutionPolicy"
  package: "com.azure.cosmos"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.createLastWriterWinsPolicy*"
  name: "createLastWriterWinsPolicy"
  nameWithType: "ConflictResolutionPolicy.createLastWriterWinsPolicy"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.createLastWriterWinsPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.createCustomPolicy*"
  name: "createCustomPolicy"
  nameWithType: "ConflictResolutionPolicy.createCustomPolicy"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.createCustomPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConflictResolutionMode"
  name: "ConflictResolutionMode"
  nameWithType: "ConflictResolutionMode"
  fullName: "com.azure.cosmos.ConflictResolutionMode"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.getMode*"
  name: "getMode"
  nameWithType: "ConflictResolutionPolicy.getMode"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.getMode"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.setMode*"
  name: "setMode"
  nameWithType: "ConflictResolutionPolicy.setMode"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.setMode"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionPath*"
  name: "getConflictResolutionPath"
  nameWithType: "ConflictResolutionPolicy.getConflictResolutionPath"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionPath"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionPath*"
  name: "setConflictResolutionPath"
  nameWithType: "ConflictResolutionPolicy.setConflictResolutionPath"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionPath"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionProcedure*"
  name: "getConflictResolutionProcedure"
  nameWithType: "ConflictResolutionPolicy.getConflictResolutionProcedure"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.getConflictResolutionProcedure"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionProcedure*"
  name: "setConflictResolutionProcedure"
  nameWithType: "ConflictResolutionPolicy.setConflictResolutionProcedure"
  fullName: "com.azure.cosmos.ConflictResolutionPolicy.setConflictResolutionProcedure"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.JsonSerializable"
  name: "JsonSerializable"
  nameWithType: "JsonSerializable"
  fullName: "com.azure.cosmos.JsonSerializable"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "com.azure.cosmos.JsonSerializable.<T>getObject(java.lang.String,java.lang.Class<T>,boolean...)"
  name: "JsonSerializable.<T>getObject(String,Class<T>,)"
  nameWithType: "JsonSerializable.<T>getObject(String,Class<T>,)"
  fullName: "com.azure.cosmos.JsonSerializable.<T>getObject(java.lang.String,java.lang.Class<T>,boolean...)"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.azure.cosmos.JsonSerializable.<T>set(java.lang.String,T)"
  name: "JsonSerializable.<T>set(String,T)"
  nameWithType: "JsonSerializable.<T>set(String,T)"
  fullName: "com.azure.cosmos.JsonSerializable.<T>set(java.lang.String,T)"
- uid: "com.azure.cosmos.JsonSerializable.getObjectByPath(java.util.List<java.lang.String>)"
  name: "JsonSerializable.getObjectByPath(List<String>)"
  nameWithType: "JsonSerializable.getObjectByPath(List<String>)"
  fullName: "com.azure.cosmos.JsonSerializable.getObjectByPath(java.util.List<java.lang.String>)"
- uid: "com.azure.cosmos.JsonSerializable.toJson()"
  name: "JsonSerializable.toJson()"
  nameWithType: "JsonSerializable.toJson()"
  fullName: "com.azure.cosmos.JsonSerializable.toJson()"
- uid: "com.azure.cosmos.JsonSerializable.getMap()"
  name: "JsonSerializable.getMap()"
  nameWithType: "JsonSerializable.getMap()"
  fullName: "com.azure.cosmos.JsonSerializable.getMap()"
- uid: "com.azure.cosmos.JsonSerializable.setMapper(com.fasterxml.jackson.databind.ObjectMapper)"
  name: "JsonSerializable.setMapper(ObjectMapper)"
  nameWithType: "JsonSerializable.setMapper(ObjectMapper)"
  fullName: "com.azure.cosmos.JsonSerializable.setMapper(com.fasterxml.jackson.databind.ObjectMapper)"
- uid: "com.azure.cosmos.JsonSerializable.getCollection(java.lang.String)"
  name: "JsonSerializable.getCollection(String)"
  nameWithType: "JsonSerializable.getCollection(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getCollection(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.getBoolean(java.lang.String)"
  name: "JsonSerializable.getBoolean(String)"
  nameWithType: "JsonSerializable.getBoolean(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getBoolean(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.remove(java.lang.String)"
  name: "JsonSerializable.remove(String)"
  nameWithType: "JsonSerializable.remove(String)"
  fullName: "com.azure.cosmos.JsonSerializable.remove(java.lang.String)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "com.azure.cosmos.JsonSerializable.getValue(com.fasterxml.jackson.databind.JsonNode)"
  name: "JsonSerializable.getValue(JsonNode)"
  nameWithType: "JsonSerializable.getValue(JsonNode)"
  fullName: "com.azure.cosmos.JsonSerializable.getValue(com.fasterxml.jackson.databind.JsonNode)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.JsonSerializable.getObject(java.lang.String)"
  name: "JsonSerializable.getObject(String)"
  nameWithType: "JsonSerializable.getObject(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getObject(java.lang.String)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.azure.cosmos.JsonSerializable.has(java.lang.String)"
  name: "JsonSerializable.has(String)"
  nameWithType: "JsonSerializable.has(String)"
  fullName: "com.azure.cosmos.JsonSerializable.has(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.getLong(java.lang.String)"
  name: "JsonSerializable.getLong(String)"
  nameWithType: "JsonSerializable.getLong(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getLong(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.toJson(com.azure.cosmos.SerializationFormattingPolicy)"
  name: "JsonSerializable.toJson(SerializationFormattingPolicy)"
  nameWithType: "JsonSerializable.toJson(SerializationFormattingPolicy)"
  fullName: "com.azure.cosmos.JsonSerializable.toJson(com.azure.cosmos.SerializationFormattingPolicy)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.azure.cosmos.JsonSerializable.getString(java.lang.String)"
  name: "JsonSerializable.getString(String)"
  nameWithType: "JsonSerializable.getString(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getString(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.populatePropertyBag()"
  name: "JsonSerializable.populatePropertyBag()"
  nameWithType: "JsonSerializable.populatePropertyBag()"
  fullName: "com.azure.cosmos.JsonSerializable.populatePropertyBag()"
- uid: "com.azure.cosmos.JsonSerializable.getInt(java.lang.String)"
  name: "JsonSerializable.getInt(String)"
  nameWithType: "JsonSerializable.getInt(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getInt(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.getDouble(java.lang.String)"
  name: "JsonSerializable.getDouble(String)"
  nameWithType: "JsonSerializable.getDouble(String)"
  fullName: "com.azure.cosmos.JsonSerializable.getDouble(java.lang.String)"
- uid: "com.azure.cosmos.JsonSerializable.<T>toObject(java.lang.Class<T>)"
  name: "JsonSerializable.<T>toObject(Class<T>)"
  nameWithType: "JsonSerializable.<T>toObject(Class<T>)"
  fullName: "com.azure.cosmos.JsonSerializable.<T>toObject(java.lang.Class<T>)"
- uid: "com.azure.cosmos.JsonSerializable.getLogger()"
  name: "JsonSerializable.getLogger()"
  nameWithType: "JsonSerializable.getLogger()"
  fullName: "com.azure.cosmos.JsonSerializable.getLogger()"
- uid: "com.azure.cosmos.JsonSerializable.<T>getList(java.lang.String,java.lang.Class<T>,boolean...)"
  name: "JsonSerializable.<T>getList(String,Class<T>,)"
  nameWithType: "JsonSerializable.<T>getList(String,Class<T>,)"
  fullName: "com.azure.cosmos.JsonSerializable.<T>getList(java.lang.String,java.lang.Class<T>,boolean...)"
- uid: "com.azure.cosmos.JsonSerializable.toString()"
  name: "JsonSerializable.toString()"
  nameWithType: "JsonSerializable.toString()"
  fullName: "com.azure.cosmos.JsonSerializable.toString()"
- uid: "com.azure.cosmos.JsonSerializable.<T>getCollection(java.lang.String,java.lang.Class<T>,boolean...)"
  name: "JsonSerializable.<T>getCollection(String,Class<T>,)"
  nameWithType: "JsonSerializable.<T>getCollection(String,Class<T>,)"
  fullName: "com.azure.cosmos.JsonSerializable.<T>getCollection(java.lang.String,java.lang.Class<T>,boolean...)"
- uid: "com.azure.cosmos.JsonSerializable.get(java.lang.String)"
  name: "JsonSerializable.get(String)"
  nameWithType: "JsonSerializable.get(String)"
  fullName: "com.azure.cosmos.JsonSerializable.get(java.lang.String)"
- uid: "T>,boolean...)"
  name: "T>,)"
  nameWithType: "T>,)"
  fullName: "T>,boolean...)"
- uid: "com.azure.cosmos.JsonSerializable."
  name: "JsonSerializable."
  nameWithType: "JsonSerializable."
  fullName: "com.azure.cosmos.JsonSerializable."
- uid: "T>getObject(java.lang.String,java.lang.Class"
  name: "T>getObject(String,Class"
  nameWithType: "T>getObject(String,Class"
  fullName: "T>getObject(java.lang.String,java.lang.Class"
- uid: "T>set(java.lang.String,T)"
  name: "T>set(String,T)"
  nameWithType: "T>set(String,T)"
  fullName: "T>set(java.lang.String,T)"
- uid: "com.azure.cosmos.JsonSerializable.getObjectByPath(java.util.List"
  name: "JsonSerializable.getObjectByPath(List"
  nameWithType: "JsonSerializable.getObjectByPath(List"
  fullName: "com.azure.cosmos.JsonSerializable.getObjectByPath(java.util.List"
- uid: "java.lang.String>)"
  name: "String>)"
  nameWithType: "String>)"
  fullName: "java.lang.String>)"
- uid: "T>toObject(java.lang.Class"
  name: "T>toObject(Class"
  nameWithType: "T>toObject(Class"
  fullName: "T>toObject(java.lang.Class"
- uid: "T>)"
  name: "T>)"
  nameWithType: "T>)"
  fullName: "T>)"
- uid: "T>getList(java.lang.String,java.lang.Class"
  name: "T>getList(String,Class"
  nameWithType: "T>getList(String,Class"
  fullName: "T>getList(java.lang.String,java.lang.Class"
- uid: "T>getCollection(java.lang.String,java.lang.Class"
  name: "T>getCollection(String,Class"
  nameWithType: "T>getCollection(String,Class"
  fullName: "T>getCollection(java.lang.String,java.lang.Class"
