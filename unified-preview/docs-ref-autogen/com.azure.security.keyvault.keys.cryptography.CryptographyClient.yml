### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  id: "CryptographyClient"
  parent: "com.azure.security.keyvault.keys.cryptography"
  children:
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.CryptographyClient(com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKey()"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKeyWithResponse(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getServiceClient()"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  langs:
  - "java"
  name: "CryptographyClient"
  nameWithType: "CryptographyClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  type: "Class"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "The CryptographyClient provides synchronous methods to perform cryptographic operations using asymmetric and symmetric keys. The client supports encrypt, decrypt, wrap key, unwrap key, sign and verify operations using the configured key.\n\n**Samples to construct the sync client**\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.cryptographyclient.instantiation\\}"
  syntax:
    content: "public class CryptographyClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.CryptographyClient(com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient)"
  id: "CryptographyClient(com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "CryptographyClient(CryptographyAsyncClient client)"
  nameWithType: "CryptographyClient.CryptographyClient(CryptographyAsyncClient client)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.CryptographyClient(CryptographyAsyncClient client)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.CryptographyClient*"
  type: "Constructor"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Creates a KeyClient that uses `pipeline` to service requests"
  syntax:
    content: " CryptographyClient(CryptographyAsyncClient client)"
    parameters:
    - id: "client"
      type: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient\" data-throw-if-not-resolved=\"false\">CryptographyAsyncClient</xref> that the client routes its request through."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  id: "decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "decrypt(EncryptionAlgorithm algorithm, byte[] cipherText)"
  nameWithType: "CryptographyClient.decrypt(EncryptionAlgorithm algorithm, byte[] cipherText)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(EncryptionAlgorithm algorithm, byte[] cipherText)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Decrypts a single block of encrypted data using the configured key and specified algorithm. Note that only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The decrypt operation is supported for both asymmetric and symmetric keys. This operation requires the keys/decrypt permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\">encryption algorithm</xref> indicates the type of algorithm to use for decrypting the specified encrypted content. Possible values for assymetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\">A128CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\">A128CBC-HS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\">A192CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\">A192CBC-HS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\">A256CBC</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\">A256CBC-HS512</xref>\n\n**Code Samples**\n\nDecrypts the encrypted content. Subscribes to the call asynchronously and prints out the decrypted content details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt\\#EncryptionAlgorithm-byte\\}"
  syntax:
    content: "public DecryptResult decrypt(EncryptionAlgorithm algorithm, byte[] cipherText)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
      description: "The algorithm to be used for decryption."
    - id: "cipherText"
      type: "byte[]"
      description: "The content to be decrypted."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
      description: "The decrypted blob."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  id: "decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
  nameWithType: "CryptographyClient.decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Decrypts a single block of encrypted data using the configured key and specified algorithm. Note that only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The decrypt operation is supported for both asymmetric and symmetric keys. This operation requires the keys/decrypt permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\">encryption algorithm</xref> indicates the type of algorithm to use for decrypting the specified encrypted content. Possible values for assymetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\">A128CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\">A128CBC-HS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\">A192CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\">A192CBC-HS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\">A256CBC</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\">A256CBC-HS512</xref>\n\n**Code Samples**\n\nDecrypts the encrypted content. Subscribes to the call asynchronously and prints out the decrypted content details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt\\#EncryptionAlgorithm-byte-Context\\}"
  syntax:
    content: "public DecryptResult decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
      description: "The algorithm to be used for decryption."
    - id: "cipherText"
      type: "byte[]"
      description: "The content to be decrypted."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
      description: "The decrypted blob."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  id: "encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  nameWithType: "CryptographyClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used for encryption. This operation requires the keys/encrypt permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\">encryption algorithm</xref> indicates the type of algorithm to use for decrypting the specified encrypted content. Possible values for assymetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\">A128CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\">A128CBC-HS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\">A192CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\">A192CBC-HS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\">A256CBC</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\">A256CBC-HS512</xref>\n\n**Code Samples**\n\nEncrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt\\#EncryptionAlgorithm-byte\\}"
  syntax:
    content: "public EncryptResult encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
      description: "The algorithm to be used for encryption."
    - id: "plaintext"
      type: "byte[]"
      description: "The content to be encrypted."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult\" data-throw-if-not-resolved=\"false\">EncryptResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult.getCipherText()\" data-throw-if-not-resolved=\"false\">cipher text</xref> contains the encrypted\n     content."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  id: "encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  nameWithType: "CryptographyClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used for encryption. This operation requires the keys/encrypt permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\">encryption algorithm</xref> indicates the type of algorithm to use for decrypting the specified encrypted content. Possible values for assymetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\">A128CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\">A128CBC-HS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\">A192CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\">A192CBC-HS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\">A256CBC</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\">A256CBC-HS512</xref>\n\n**Code Samples**\n\nEncrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt\\#EncryptionAlgorithm-byte-Context\\}"
  syntax:
    content: "public EncryptResult encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
      description: "The algorithm to be used for encryption."
    - id: "plaintext"
      type: "byte[]"
      description: "The content to be encrypted."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
      description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult\" data-throw-if-not-resolved=\"false\">EncryptResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult.getCipherText()\" data-throw-if-not-resolved=\"false\">cipher text</xref> contains the encrypted\n content."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKey()"
  id: "getKey()"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "getKey()"
  nameWithType: "CryptographyClient.getKey()"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKey()"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Gets the public part of the configured key. The get key operation is applicable to all key types and it requires the `keys/get` permission.\n\n**Code Samples**\n\nGets the key configured in the client. Prints out the returned key details.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.cryptographyclient.getKey\\}"
  syntax:
    content: "public KeyVaultKey getKey()"
    return:
      type: "com.azure.security.keyvault.keys.models.KeyVaultKey"
      description: "The requested <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\">key</xref>."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKeyWithResponse(com.azure.core.util.Context)"
  id: "getKeyWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "getKeyWithResponse(Context context)"
  nameWithType: "CryptographyClient.getKeyWithResponse(Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKeyWithResponse(Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Gets the public part of the configured key. The get key operation is applicable to all key types and it requires the `keys/get` permission.\n\n**Code Samples**\n\nGets the key configured in the client. Prints out the returned key details.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.cryptographyclient.getKeyWithResponse\\#Context\\}"
  syntax:
    content: "public Response<KeyVaultKey> getKeyWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\">key</xref>."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getServiceClient()"
  id: "getServiceClient()"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "getServiceClient()"
  nameWithType: "CryptographyClient.getServiceClient()"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getServiceClient()"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getServiceClient*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " CryptographyServiceClient getServiceClient()"
    return:
      type: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  id: "sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest)"
  nameWithType: "CryptographyClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Creates a signature from a digest using the configured key. The sign operation supports both asymmetric and symmetric keys. This operation requires the keys/sign permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nSings the digest. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign\\#SignatureAlgorithm-byte\\}"
  syntax:
    content: "public SignResult sign(SignatureAlgorithm algorithm, byte[] digest)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "digest"
      type: "byte[]"
      description: "The content from which signature is to be created."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
      description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\">SignResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\">signature</xref> contains the created signature."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  id: "sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  nameWithType: "CryptographyClient.sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Creates a signature from a digest using the configured key. The sign operation supports both asymmetric and symmetric keys. This operation requires the keys/sign permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nSings the digest. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign\\#SignatureAlgorithm-byte-Context\\}"
  syntax:
    content: "public SignResult sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "digest"
      type: "byte[]"
      description: "The content from which signature is to be created."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
      description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\">SignResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\">signature</xref> contains the created signature."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  id: "signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "signData(SignatureAlgorithm algorithm, byte[] data)"
  nameWithType: "CryptographyClient.signData(SignatureAlgorithm algorithm, byte[] data)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData(SignatureAlgorithm algorithm, byte[] data)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Creates a signature from the raw data using the configured key. The sign data operation supports both asymmetric and symmetric keys. This operation requires the keys/sign permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nSigns the raw data. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData\\#SignatureAlgorithm-byte\\}"
  syntax:
    content: "public SignResult signData(SignatureAlgorithm algorithm, byte[] data)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "data"
      type: "byte[]"
      description: "The content from which signature is to be created."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
      description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\">SignResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\">signature</xref> contains the created signature."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  id: "signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  nameWithType: "CryptographyClient.signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Creates a signature from the raw data using the configured key. The sign data operation supports both asymmetric and symmetric keys. This operation requires the keys/sign permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nSigns the raw data. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData\\#SignatureAlgorithm-byte-Context\\}"
  syntax:
    content: "public SignResult signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "data"
      type: "byte[]"
      description: "The content from which signature is to be created."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
      description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\">SignResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\">signature</xref> contains the created signature."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  id: "unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  nameWithType: "CryptographyClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Unwraps a symmetric key using the configured key that was initially used for wrapping that key. This operation is the reverse of the wrap operation. The unwrap operation supports asymmetric and symmetric keys to unwrap. This operation requires the keys/unwrapKey permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\">wrap algorithm</xref> indicates the type of algorithm to use for wrapping the specified key content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A128KW\" data-throw-if-not-resolved=\"false\">A128KW</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A192KW\" data-throw-if-not-resolved=\"false\">A192KW</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A256KW\" data-throw-if-not-resolved=\"false\">A256KW</xref>\n\n**Code Samples**\n\nUnwraps the key content. Subscribes to the call asynchronously and prints out the unwrapped key details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey\\#KeyWrapAlgorithm-byte\\}"
  syntax:
    content: "public UnwrapResult unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
      description: "The encryption algorithm to use for wrapping the key."
    - id: "encryptedKey"
      type: "byte[]"
      description: "The encrypted key content to unwrap."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
      description: "The unwrapped key content."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  id: "unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  nameWithType: "CryptographyClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Unwraps a symmetric key using the configured key that was initially used for wrapping that key. This operation is the reverse of the wrap operation. The unwrap operation supports asymmetric and symmetric keys to unwrap. This operation requires the keys/unwrapKey permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\">wrap algorithm</xref> indicates the type of algorithm to use for wrapping the specified key content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A128KW\" data-throw-if-not-resolved=\"false\">A128KW</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A192KW\" data-throw-if-not-resolved=\"false\">A192KW</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A256KW\" data-throw-if-not-resolved=\"false\">A256KW</xref>\n\n**Code Samples**\n\nUnwraps the key content. Subscribes to the call asynchronously and prints out the unwrapped key details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey\\#KeyWrapAlgorithm-byte-Context\\}"
  syntax:
    content: "public UnwrapResult unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
      description: "The encryption algorithm to use for wrapping the key."
    - id: "encryptedKey"
      type: "byte[]"
      description: "The encrypted key content to unwrap."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
      description: "The unwrapped key content."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  id: "verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  nameWithType: "CryptographyClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Verifies a signature using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature . This operation requires the keys/verify permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nVerifies the signature against the specified digest. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify\\#SignatureAlgorithm-byte-byte\\}"
  syntax:
    content: "public VerifyResult verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "digest"
      type: "byte[]"
      description: "The content from which signature was created."
    - id: "signature"
      type: "byte[]"
      description: "The signature to be verified."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
      description: "The <xref uid=\"\" data-throw-if-not-resolved=\"false\">Boolean</xref> indicating the signature verification result."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  id: "verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  nameWithType: "CryptographyClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Verifies a signature using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature . This operation requires the keys/verify permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nVerifies the signature against the specified digest. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify\\#SignatureAlgorithm-byte-byte-Context\\}"
  syntax:
    content: "public VerifyResult verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "digest"
      type: "byte[]"
      description: "The content from which signature is to be created."
    - id: "signature"
      type: "byte[]"
      description: "The signature to be verified."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
      description: "The <xref uid=\"\" data-throw-if-not-resolved=\"false\">Boolean</xref> indicating the signature verification result."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  id: "verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  nameWithType: "CryptographyClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Verifies a signature against the raw data using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature . This operation requires the keys/verify permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nVerifies the signature against the raw data. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData\\#SignatureAlgorithm-byte-byte\\}"
  syntax:
    content: "public VerifyResult verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "data"
      type: "byte[]"
      description: "The raw content against which signature is to be verified."
    - id: "signature"
      type: "byte[]"
      description: "The signature to be verified."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
      description: "The <xref uid=\"\" data-throw-if-not-resolved=\"false\">Boolean</xref> indicating the signature verification result."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  id: "verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  nameWithType: "CryptographyClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Verifies a signature against the raw data using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature . This operation requires the keys/verify permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nVerifies the signature against the raw data. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData\\#SignatureAlgorithm-byte-byte-Context\\}"
  syntax:
    content: "public VerifyResult verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "data"
      type: "byte[]"
      description: "The raw content against which signature is to be verified."
    - id: "signature"
      type: "byte[]"
      description: "The signature to be verified."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
      description: "The <xref uid=\"\" data-throw-if-not-resolved=\"false\">Boolean</xref> indicating the signature verification result."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  id: "wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  nameWithType: "CryptographyClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Wraps a symmetric key using the configured key. The wrap operation supports wrapping a symmetric key with both symmetric and asymmetric keys. This operation requires the keys/wrapKey permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\">wrap algorithm</xref> indicates the type of algorithm to use for wrapping the specified key content. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>\n\n**Code Samples**\n\nWraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey\\#KeyWrapAlgorithm-byte\\}"
  syntax:
    content: "public WrapResult wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
      description: "The encryption algorithm to use for wrapping the key."
    - id: "key"
      type: "byte[]"
      description: "The key content to be wrapped"
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult\" data-throw-if-not-resolved=\"false\">WrapResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult.getEncryptedKey()\" data-throw-if-not-resolved=\"false\">encrypted key</xref> contains the wrapped\n     key result."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  id: "wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
  langs:
  - "java"
  name: "wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  nameWithType: "CryptographyClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Wraps a symmetric key using the configured key. The wrap operation supports wrapping a symmetric key with both symmetric and asymmetric keys. This operation requires the keys/wrapKey permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\">wrap algorithm</xref> indicates the type of algorithm to use for wrapping the specified key content. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>\n\n**Code Samples**\n\nWraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey\\#KeyWrapAlgorithm-byte-Context\\}"
  syntax:
    content: "public WrapResult wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
      description: "The encryption algorithm to use for wrapping the key."
    - id: "key"
      type: "byte[]"
      description: "The key content to be wrapped"
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult\" data-throw-if-not-resolved=\"false\">WrapResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult.getEncryptedKey()\" data-throw-if-not-resolved=\"false\">encrypted key</xref> contains the wrapped\n     key result."
references:
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  name: "CryptographyAsyncClient"
  nameWithType: "CryptographyAsyncClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.CryptographyClient*"
  name: "CryptographyClient"
  nameWithType: "CryptographyClient.CryptographyClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.CryptographyClient"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.models.KeyVaultKey"
  name: "KeyVaultKey"
  nameWithType: "KeyVaultKey"
  fullName: "com.azure.security.keyvault.keys.models.KeyVaultKey"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKey*"
  name: "getKey"
  nameWithType: "CryptographyClient.getKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.models.KeyVaultKey"
    name: "KeyVaultKey"
    fullName: "com.azure.security.keyvault.keys.models.KeyVaultKey"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKeyWithResponse*"
  name: "getKeyWithResponse"
  nameWithType: "CryptographyClient.getKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKeyWithResponse"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
  name: "EncryptionAlgorithm"
  nameWithType: "EncryptionAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
  name: "EncryptResult"
  nameWithType: "EncryptResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt*"
  name: "encrypt"
  nameWithType: "CryptographyClient.encrypt"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
  name: "DecryptResult"
  nameWithType: "DecryptResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt*"
  name: "decrypt"
  nameWithType: "CryptographyClient.decrypt"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
  name: "SignatureAlgorithm"
  nameWithType: "SignatureAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
- uid: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
  name: "SignResult"
  nameWithType: "SignResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign*"
  name: "sign"
  nameWithType: "CryptographyClient.sign"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
  name: "VerifyResult"
  nameWithType: "VerifyResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify*"
  name: "verify"
  nameWithType: "CryptographyClient.verify"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
  name: "KeyWrapAlgorithm"
  nameWithType: "KeyWrapAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
- uid: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
  name: "WrapResult"
  nameWithType: "WrapResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey*"
  name: "wrapKey"
  nameWithType: "CryptographyClient.wrapKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
  name: "UnwrapResult"
  nameWithType: "UnwrapResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey*"
  name: "unwrapKey"
  nameWithType: "CryptographyClient.unwrapKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData*"
  name: "signData"
  nameWithType: "CryptographyClient.signData"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData*"
  name: "verifyData"
  nameWithType: "CryptographyClient.verifyData"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  name: "CryptographyServiceClient"
  nameWithType: "CryptographyServiceClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getServiceClient*"
  name: "getServiceClient"
  nameWithType: "CryptographyClient.getServiceClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getServiceClient"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
