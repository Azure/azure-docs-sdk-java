### YamlMime:ManagedReference
items:
- uid: "com.azure.core.annotation.UnexpectedResponseExceptionType"
  id: "UnexpectedResponseExceptionType"
  parent: "com.azure.core.annotation"
  children:
  - "com.azure.core.annotation.UnexpectedResponseExceptionType.code()"
  - "com.azure.core.annotation.UnexpectedResponseExceptionType.value()"
  langs:
  - "java"
  name: "UnexpectedResponseExceptionType"
  nameWithType: "UnexpectedResponseExceptionType"
  fullName: "com.azure.core.annotation.UnexpectedResponseExceptionType"
  type: "Interface"
  package: "com.azure.core.annotation"
  summary: "The exception type that is thrown or returned when one of the status codes is returned from a REST API. Multiple annotations can be used. When no codes are listed that exception is always thrown or returned if it is reached during evaluation, this should be treated as a default case. If no default case is annotated the fall through exception is <xref uid=\"com.azure.core.exception.HttpResponseException\" data-throw-if-not-resolved=\"false\">HttpResponseException</xref>.\n\n**Example:**\n\n```java\n@UnexpectedResponseExceptionType(MyCustomException.class)\n @POST(\"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft\n .CustomerInsights/hubs/{hubName}/images/getEntityTypeImageUploadUrl\")\n  void getUploadUrlForEntityType(@Path(\"resourceGroupName\") String resourceGroupName, @Path(\"hubName\") String\n  hubName, @Path(\"subscriptionId\") String subscriptionId, @Body GetImageUploadUrlInputInner parameters);\n\n @UnexpectedResponseExceptionType(code = {404}, value = NotFoundException.class)\n @UnexpectedResponseExceptionType(DefaultException.class)\n @POST(\"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft\n .CustomerInsights/hubs/{hubName}/images/getEntityTypeImageUploadUrl\")\n  void getUploadUrlForEntityType(@Path(\"resourceGroupName\") String resourceGroupName, @Path(\"hubName\") String\n  hubName, @Path(\"subscriptionId\") String subscriptionId, @Body GetImageUploadUrlInputInner parameters);\n```\n\nIf multiple annotations share the same HTTP status code or there is multiple default annotations the exception from the last annotation in the top to bottom order will be used."
  syntax:
    content: "public interface UnexpectedResponseExceptionType implements Annotation"
  implements:
  - "java.lang.annotation.Annotation"
- uid: "com.azure.core.annotation.UnexpectedResponseExceptionType.code()"
  id: "code()"
  parent: "com.azure.core.annotation.UnexpectedResponseExceptionType"
  langs:
  - "java"
  name: "code()"
  nameWithType: "UnexpectedResponseExceptionType.code()"
  fullName: "com.azure.core.annotation.UnexpectedResponseExceptionType.code()"
  overload: "com.azure.core.annotation.UnexpectedResponseExceptionType.code*"
  type: "Method"
  package: "com.azure.core.annotation"
  summary: "HTTP status codes which trigger the exception to be thrown or returned, if not status codes are listed the exception is always thrown or returned."
  syntax:
    content: "public abstract int[] code()"
    return:
      type: "int[]"
      description: "The HTTP status codes that trigger the exception to be thrown or returned."
- uid: "com.azure.core.annotation.UnexpectedResponseExceptionType.value()"
  id: "value()"
  parent: "com.azure.core.annotation.UnexpectedResponseExceptionType"
  langs:
  - "java"
  name: "value()"
  nameWithType: "UnexpectedResponseExceptionType.value()"
  fullName: "com.azure.core.annotation.UnexpectedResponseExceptionType.value()"
  overload: "com.azure.core.annotation.UnexpectedResponseExceptionType.value*"
  type: "Method"
  package: "com.azure.core.annotation"
  summary: "The type of HttpResponseException that should be thrown/returned when the API returns an unrecognized status code."
  syntax:
    content: "public abstract Class<? extends HttpResponseException> value()"
    return:
      type: "java.lang.Class<? extends com.azure.core.exception.HttpResponseException>"
      description: "The type of RestException that should be thrown/returned."
references:
- uid: "java.lang.Class<? extends com.azure.core.exception.HttpResponseException>"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "? extends com.azure.core.exception.HttpResponseException"
    name: "HttpResponseException"
    fullName: "? extends com.azure.core.exception.HttpResponseException"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.annotation.UnexpectedResponseExceptionType.value*"
  name: "value"
  nameWithType: "UnexpectedResponseExceptionType.value"
  fullName: "com.azure.core.annotation.UnexpectedResponseExceptionType.value"
  package: "com.azure.core.annotation"
- uid: "int[]"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.core.annotation.UnexpectedResponseExceptionType.code*"
  name: "code"
  nameWithType: "UnexpectedResponseExceptionType.code"
  fullName: "com.azure.core.annotation.UnexpectedResponseExceptionType.code"
  package: "com.azure.core.annotation"
- uid: "java.lang.annotation.Annotation"
  name: "Annotation"
  nameWithType: "Annotation"
  fullName: "java.lang.annotation.Annotation"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "? extends com.azure.core.exception.HttpResponseException"
  name: "? extends HttpResponseException"
  nameWithType: "? extends HttpResponseException"
  fullName: "? extends com.azure.core.exception.HttpResponseException"
