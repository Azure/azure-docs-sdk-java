### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  id: "CryptographyServiceClient"
  parent: "com.azure.security.keyvault.keys.cryptography"
  children:
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.ACCEPT_LANGUAGE"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.API_VERSION"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.CONTENT_TYPE_HEADER_VALUE"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.CryptographyServiceClient(java.lang.String,com.azure.security.keyvault.keys.cryptography.CryptographyService)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getKey(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getSecretKey(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.setSecretKey(com.azure.security.keyvault.keys.cryptography.SecretKey,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.transformSecretKey(com.azure.security.keyvault.keys.cryptography.SecretKey)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  langs:
  - "java"
  name: "CryptographyServiceClient"
  nameWithType: "CryptographyServiceClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  type: "Class"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " class CryptographyServiceClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.ACCEPT_LANGUAGE"
  id: "ACCEPT_LANGUAGE"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "ACCEPT_LANGUAGE"
  nameWithType: "CryptographyServiceClient.ACCEPT_LANGUAGE"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.ACCEPT_LANGUAGE"
  type: "Field"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "static final String ACCEPT_LANGUAGE"
    return:
      type: "java.lang.String"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.API_VERSION"
  id: "API_VERSION"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "API_VERSION"
  nameWithType: "CryptographyServiceClient.API_VERSION"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.API_VERSION"
  type: "Field"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "static final String API_VERSION"
    return:
      type: "java.lang.String"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.CONTENT_TYPE_HEADER_VALUE"
  id: "CONTENT_TYPE_HEADER_VALUE"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "CONTENT_TYPE_HEADER_VALUE"
  nameWithType: "CryptographyServiceClient.CONTENT_TYPE_HEADER_VALUE"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.CONTENT_TYPE_HEADER_VALUE"
  type: "Field"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "static final String CONTENT_TYPE_HEADER_VALUE"
    return:
      type: "java.lang.String"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.CryptographyServiceClient(java.lang.String,com.azure.security.keyvault.keys.cryptography.CryptographyService)"
  id: "CryptographyServiceClient(java.lang.String,com.azure.security.keyvault.keys.cryptography.CryptographyService)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "CryptographyServiceClient(String keyId, CryptographyService service)"
  nameWithType: "CryptographyServiceClient.CryptographyServiceClient(String keyId, CryptographyService service)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.CryptographyServiceClient(String keyId, CryptographyService service)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.CryptographyServiceClient*"
  type: "Constructor"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " CryptographyServiceClient(String keyId, CryptographyService service)"
    parameters:
    - id: "keyId"
      type: "java.lang.String"
    - id: "service"
      type: "com.azure.security.keyvault.keys.cryptography.CryptographyService"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  id: "decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
  nameWithType: "CryptographyServiceClient.decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.decrypt*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
    - id: "cipherText"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.DecryptResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  id: "encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  nameWithType: "CryptographyServiceClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.encrypt*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
    - id: "plaintext"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.EncryptResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getKey(com.azure.core.util.Context)"
  id: "getKey(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "getKey(Context context)"
  nameWithType: "CryptographyServiceClient.getKey(Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getKey(Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<Response<KeyVaultKey>> getKey(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getSecretKey(com.azure.core.util.Context)"
  id: "getSecretKey(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "getSecretKey(Context context)"
  nameWithType: "CryptographyServiceClient.getSecretKey(Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getSecretKey(Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getSecretKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<Response<JsonWebKey>> getSecretKey(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.JsonWebKey>>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.setSecretKey(com.azure.security.keyvault.keys.cryptography.SecretKey,com.azure.core.util.Context)"
  id: "setSecretKey(com.azure.security.keyvault.keys.cryptography.SecretKey,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "setSecretKey(SecretKey secret, Context context)"
  nameWithType: "CryptographyServiceClient.setSecretKey(SecretKey secret, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.setSecretKey(SecretKey secret, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.setSecretKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<Response<SecretKey>> setSecretKey(SecretKey secret, Context context)"
    parameters:
    - id: "secret"
      type: "com.azure.security.keyvault.keys.cryptography.SecretKey"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.cryptography.SecretKey>>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  id: "sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  nameWithType: "CryptographyServiceClient.sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.sign*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<SignResult> sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "digest"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  id: "signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  nameWithType: "CryptographyServiceClient.signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.signData*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<SignResult> signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "data"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.transformSecretKey(com.azure.security.keyvault.keys.cryptography.SecretKey)"
  id: "transformSecretKey(com.azure.security.keyvault.keys.cryptography.SecretKey)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "transformSecretKey(SecretKey secretKey)"
  nameWithType: "CryptographyServiceClient.transformSecretKey(SecretKey secretKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.transformSecretKey(SecretKey secretKey)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.transformSecretKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " JsonWebKey transformSecretKey(SecretKey secretKey)"
    parameters:
    - id: "secretKey"
      type: "com.azure.security.keyvault.keys.cryptography.SecretKey"
    return:
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
  exceptions:
  - type: "com.fasterxml.jackson.core.JsonProcessingException"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  id: "unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  nameWithType: "CryptographyServiceClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.unwrapKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<UnwrapResult> unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
    - id: "encryptedKey"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.UnwrapResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  id: "verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  nameWithType: "CryptographyServiceClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verify*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<VerifyResult> verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "digest"
      type: "byte[]"
    - id: "signature"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  id: "verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  nameWithType: "CryptographyServiceClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verifyData*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<VerifyResult> verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "data"
      type: "byte[]"
    - id: "signature"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  id: "wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  langs:
  - "java"
  name: "wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  nameWithType: "CryptographyServiceClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.wrapKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
    - id: "key"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.WrapResult>"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyService"
  name: "CryptographyService"
  nameWithType: "CryptographyService"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyService"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.CryptographyServiceClient*"
  name: "CryptographyServiceClient"
  nameWithType: "CryptographyServiceClient.CryptographyServiceClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.CryptographyServiceClient"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.models.KeyVaultKey"
    name: "KeyVaultKey"
    fullName: "com.azure.security.keyvault.keys.models.KeyVaultKey"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getKey*"
  name: "getKey"
  nameWithType: "CryptographyServiceClient.getKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.JsonWebKey>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.models.JsonWebKey"
    name: "JsonWebKey"
    fullName: "com.azure.security.keyvault.keys.models.JsonWebKey"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getSecretKey*"
  name: "getSecretKey"
  nameWithType: "CryptographyServiceClient.getSecretKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.getSecretKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.SecretKey"
  name: "SecretKey"
  nameWithType: "SecretKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.SecretKey"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.cryptography.SecretKey>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.SecretKey"
    name: "SecretKey"
    fullName: "com.azure.security.keyvault.keys.cryptography.SecretKey"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.setSecretKey*"
  name: "setSecretKey"
  nameWithType: "CryptographyServiceClient.setSecretKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.setSecretKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.fasterxml.jackson.core.JsonProcessingException"
  spec.java:
  - uid: "com.fasterxml.jackson.core.JsonProcessingException"
    name: "JsonProcessingException"
    fullName: "com.fasterxml.jackson.core.JsonProcessingException"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey"
  name: "JsonWebKey"
  nameWithType: "JsonWebKey"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.transformSecretKey*"
  name: "transformSecretKey"
  nameWithType: "CryptographyServiceClient.transformSecretKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.transformSecretKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
  name: "EncryptionAlgorithm"
  nameWithType: "EncryptionAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.EncryptResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
    name: "EncryptResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.encrypt*"
  name: "encrypt"
  nameWithType: "CryptographyServiceClient.encrypt"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.encrypt"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.DecryptResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
    name: "DecryptResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.decrypt*"
  name: "decrypt"
  nameWithType: "CryptographyServiceClient.decrypt"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.decrypt"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
  name: "SignatureAlgorithm"
  nameWithType: "SignatureAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
    name: "SignResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.sign*"
  name: "sign"
  nameWithType: "CryptographyServiceClient.sign"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.sign"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
    name: "VerifyResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verify*"
  name: "verify"
  nameWithType: "CryptographyServiceClient.verify"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verify"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
  name: "KeyWrapAlgorithm"
  nameWithType: "KeyWrapAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.WrapResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
    name: "WrapResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.wrapKey*"
  name: "wrapKey"
  nameWithType: "CryptographyServiceClient.wrapKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.wrapKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.UnwrapResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
    name: "UnwrapResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.unwrapKey*"
  name: "unwrapKey"
  nameWithType: "CryptographyServiceClient.unwrapKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.unwrapKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.signData*"
  name: "signData"
  nameWithType: "CryptographyServiceClient.signData"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.signData"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verifyData*"
  name: "verifyData"
  nameWithType: "CryptographyServiceClient.verifyData"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient.verifyData"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.security.keyvault.keys.models.KeyVaultKey"
  name: "KeyVaultKey"
  nameWithType: "KeyVaultKey"
  fullName: "com.azure.security.keyvault.keys.models.KeyVaultKey"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
  name: "EncryptResult"
  nameWithType: "EncryptResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
  name: "DecryptResult"
  nameWithType: "DecryptResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
  name: "SignResult"
  nameWithType: "SignResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
  name: "VerifyResult"
  nameWithType: "VerifyResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
  name: "WrapResult"
  nameWithType: "WrapResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
  name: "UnwrapResult"
  nameWithType: "UnwrapResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
